
SingleCopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a800  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cec  0800a998  0800a998  0000b998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b684  0800b684  0000d098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b684  0800b684  0000c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b68c  0800b68c  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b68c  0800b68c  0000c68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b690  0800b690  0000c690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800b694  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000098  0800b72c  0000d098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800b72c  0000d418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139dd  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b0b  00000000  00000000  00020aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000235b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed1  00000000  00000000  00024848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019faf  00000000  00000000  00025719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f24  00000000  00000000  0003f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000990de  00000000  00000000  000575ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f06ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005398  00000000  00000000  000f0710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f5aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a980 	.word	0x0800a980

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	0800a980 	.word	0x0800a980

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_ldivmod>:
 8000a14:	b97b      	cbnz	r3, 8000a36 <__aeabi_ldivmod+0x22>
 8000a16:	b972      	cbnz	r2, 8000a36 <__aeabi_ldivmod+0x22>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bfbe      	ittt	lt
 8000a1c:	2000      	movlt	r0, #0
 8000a1e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a22:	e006      	blt.n	8000a32 <__aeabi_ldivmod+0x1e>
 8000a24:	bf08      	it	eq
 8000a26:	2800      	cmpeq	r0, #0
 8000a28:	bf1c      	itt	ne
 8000a2a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a32:	f000 b9b5 	b.w	8000da0 <__aeabi_idiv0>
 8000a36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	db09      	blt.n	8000a56 <__aeabi_ldivmod+0x42>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db1a      	blt.n	8000a7c <__aeabi_ldivmod+0x68>
 8000a46:	f000 f84d 	bl	8000ae4 <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr
 8000a56:	4240      	negs	r0, r0
 8000a58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db1b      	blt.n	8000a98 <__aeabi_ldivmod+0x84>
 8000a60:	f000 f840 	bl	8000ae4 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4240      	negs	r0, r0
 8000a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	4770      	bx	lr
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a82:	f000 f82f 	bl	8000ae4 <__udivmoddi4>
 8000a86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8e:	b004      	add	sp, #16
 8000a90:	4240      	negs	r0, r0
 8000a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a96:	4770      	bx	lr
 8000a98:	4252      	negs	r2, r2
 8000a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a9e:	f000 f821 	bl	8000ae4 <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b96a 	b.w	8000da0 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	460c      	mov	r4, r1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d14e      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af0:	4694      	mov	ip, r2
 8000af2:	458c      	cmp	ip, r1
 8000af4:	4686      	mov	lr, r0
 8000af6:	fab2 f282 	clz	r2, r2
 8000afa:	d962      	bls.n	8000bc2 <__udivmoddi4+0xde>
 8000afc:	b14a      	cbz	r2, 8000b12 <__udivmoddi4+0x2e>
 8000afe:	f1c2 0320 	rsb	r3, r2, #32
 8000b02:	4091      	lsls	r1, r2
 8000b04:	fa20 f303 	lsr.w	r3, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	4319      	orrs	r1, r3
 8000b0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b16:	fa1f f68c 	uxth.w	r6, ip
 8000b1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b22:	fb07 1114 	mls	r1, r7, r4, r1
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb04 f106 	mul.w	r1, r4, r6
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b3a:	f080 8112 	bcs.w	8000d62 <__udivmoddi4+0x27e>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 810f 	bls.w	8000d62 <__udivmoddi4+0x27e>
 8000b44:	3c02      	subs	r4, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	fa1f f38e 	uxth.w	r3, lr
 8000b4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b52:	fb07 1110 	mls	r1, r7, r0, r1
 8000b56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5a:	fb00 f606 	mul.w	r6, r0, r6
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x94>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b6a:	f080 80fc 	bcs.w	8000d66 <__udivmoddi4+0x282>
 8000b6e:	429e      	cmp	r6, r3
 8000b70:	f240 80f9 	bls.w	8000d66 <__udivmoddi4+0x282>
 8000b74:	4463      	add	r3, ip
 8000b76:	3802      	subs	r0, #2
 8000b78:	1b9b      	subs	r3, r3, r6
 8000b7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b7e:	2100      	movs	r1, #0
 8000b80:	b11d      	cbz	r5, 8000b8a <__udivmoddi4+0xa6>
 8000b82:	40d3      	lsrs	r3, r2
 8000b84:	2200      	movs	r2, #0
 8000b86:	e9c5 3200 	strd	r3, r2, [r5]
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d905      	bls.n	8000b9e <__udivmoddi4+0xba>
 8000b92:	b10d      	cbz	r5, 8000b98 <__udivmoddi4+0xb4>
 8000b94:	e9c5 0100 	strd	r0, r1, [r5]
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	e7f5      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000b9e:	fab3 f183 	clz	r1, r3
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d146      	bne.n	8000c34 <__udivmoddi4+0x150>
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xcc>
 8000baa:	4290      	cmp	r0, r2
 8000bac:	f0c0 80f0 	bcc.w	8000d90 <__udivmoddi4+0x2ac>
 8000bb0:	1a86      	subs	r6, r0, r2
 8000bb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d0e6      	beq.n	8000b8a <__udivmoddi4+0xa6>
 8000bbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc0:	e7e3      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	f040 8090 	bne.w	8000ce8 <__udivmoddi4+0x204>
 8000bc8:	eba1 040c 	sub.w	r4, r1, ip
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	fa1f f78c 	uxth.w	r7, ip
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bde:	fb08 4416 	mls	r4, r8, r6, r4
 8000be2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000be6:	fb07 f006 	mul.w	r0, r7, r6
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x11c>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x11a>
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2b4>
 8000bfe:	4626      	mov	r6, r4
 8000c00:	1a1c      	subs	r4, r3, r0
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb00 f707 	mul.w	r7, r0, r7
 8000c16:	429f      	cmp	r7, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x148>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x146>
 8000c24:	429f      	cmp	r7, r3
 8000c26:	f200 80b0 	bhi.w	8000d8a <__udivmoddi4+0x2a6>
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	1bdb      	subs	r3, r3, r7
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	e7a5      	b.n	8000b80 <__udivmoddi4+0x9c>
 8000c34:	f1c1 0620 	rsb	r6, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c3e:	431f      	orrs	r7, r3
 8000c40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c44:	fa04 f301 	lsl.w	r3, r4, r1
 8000c48:	ea43 030c 	orr.w	r3, r3, ip
 8000c4c:	40f4      	lsrs	r4, r6
 8000c4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c52:	0c38      	lsrs	r0, r7, #16
 8000c54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c58:	fbb4 fef0 	udiv	lr, r4, r0
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fb00 441e 	mls	r4, r0, lr, r4
 8000c64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c68:	fb0e f90c 	mul.w	r9, lr, ip
 8000c6c:	45a1      	cmp	r9, r4
 8000c6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x1a6>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c7a:	f080 8084 	bcs.w	8000d86 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8081 	bls.w	8000d86 <__udivmoddi4+0x2a2>
 8000c84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c88:	443c      	add	r4, r7
 8000c8a:	eba4 0409 	sub.w	r4, r4, r9
 8000c8e:	fa1f f983 	uxth.w	r9, r3
 8000c92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c96:	fb00 4413 	mls	r4, r0, r3, r4
 8000c9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x1d2>
 8000ca6:	193c      	adds	r4, r7, r4
 8000ca8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cac:	d267      	bcs.n	8000d7e <__udivmoddi4+0x29a>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	d965      	bls.n	8000d7e <__udivmoddi4+0x29a>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cba:	fba0 9302 	umull	r9, r3, r0, r2
 8000cbe:	eba4 040c 	sub.w	r4, r4, ip
 8000cc2:	429c      	cmp	r4, r3
 8000cc4:	46ce      	mov	lr, r9
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	d351      	bcc.n	8000d6e <__udivmoddi4+0x28a>
 8000cca:	d04e      	beq.n	8000d6a <__udivmoddi4+0x286>
 8000ccc:	b155      	cbz	r5, 8000ce4 <__udivmoddi4+0x200>
 8000cce:	ebb8 030e 	subs.w	r3, r8, lr
 8000cd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cda:	40cb      	lsrs	r3, r1
 8000cdc:	431e      	orrs	r6, r3
 8000cde:	40cc      	lsrs	r4, r1
 8000ce0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e750      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	430c      	orrs	r4, r1
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d10:	0c23      	lsrs	r3, r4, #16
 8000d12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d16:	fb00 f107 	mul.w	r1, r0, r7
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x24c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d26:	d22c      	bcs.n	8000d82 <__udivmoddi4+0x29e>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d92a      	bls.n	8000d82 <__udivmoddi4+0x29e>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4463      	add	r3, ip
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d38:	fb08 3311 	mls	r3, r8, r1, r3
 8000d3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d40:	fb01 f307 	mul.w	r3, r1, r7
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x276>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d50:	d213      	bcs.n	8000d7a <__udivmoddi4+0x296>
 8000d52:	42a3      	cmp	r3, r4
 8000d54:	d911      	bls.n	8000d7a <__udivmoddi4+0x296>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	1ae4      	subs	r4, r4, r3
 8000d5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d60:	e739      	b.n	8000bd6 <__udivmoddi4+0xf2>
 8000d62:	4604      	mov	r4, r0
 8000d64:	e6f0      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d66:	4608      	mov	r0, r1
 8000d68:	e706      	b.n	8000b78 <__udivmoddi4+0x94>
 8000d6a:	45c8      	cmp	r8, r9
 8000d6c:	d2ae      	bcs.n	8000ccc <__udivmoddi4+0x1e8>
 8000d6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d76:	3801      	subs	r0, #1
 8000d78:	e7a8      	b.n	8000ccc <__udivmoddi4+0x1e8>
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e7ed      	b.n	8000d5a <__udivmoddi4+0x276>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	e799      	b.n	8000cb6 <__udivmoddi4+0x1d2>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e7d4      	b.n	8000d30 <__udivmoddi4+0x24c>
 8000d86:	46d6      	mov	lr, sl
 8000d88:	e77f      	b.n	8000c8a <__udivmoddi4+0x1a6>
 8000d8a:	4463      	add	r3, ip
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	e74d      	b.n	8000c2c <__udivmoddi4+0x148>
 8000d90:	4606      	mov	r6, r0
 8000d92:	4623      	mov	r3, r4
 8000d94:	4608      	mov	r0, r1
 8000d96:	e70f      	b.n	8000bb8 <__udivmoddi4+0xd4>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	e730      	b.n	8000c00 <__udivmoddi4+0x11c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <i2c_write>:
#include "MPU6050/I2C.h"
//#include "i2c.h"
#include "stm32f4xx_hal.h"

HAL_StatusTypeDef i2c_write(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t length, uint8_t *data) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	460b      	mov	r3, r1
 8000db2:	71bb      	strb	r3, [r7, #6]
 8000db4:	4613      	mov	r3, r2
 8000db6:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Write(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	200a      	movs	r0, #10
 8000dca:	9002      	str	r0, [sp, #8]
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <i2c_write+0x40>)
 8000dd6:	f005 fd8f 	bl	80068f8 <HAL_I2C_Mem_Write>
 8000dda:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000108 	.word	0x20000108

08000de8 <i2c_read>:

HAL_StatusTypeDef i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length,
    uint8_t *data) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	460b      	mov	r3, r1
 8000df6:	71bb      	strb	r3, [r7, #6]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Read(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	b299      	uxth	r1, r3
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	797b      	ldrb	r3, [r7, #5]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	9002      	str	r0, [sp, #8]
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <i2c_read+0x40>)
 8000e1a:	f005 fe67 	bl	8006aec <HAL_I2C_Mem_Read>
 8000e1e:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);

}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000108 	.word	0x20000108

08000e2c <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000e36:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <set_int_enable+0xb0>)
 8000e38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01c      	beq.n	8000e7a <set_int_enable+0x4e>
        if (enable)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8000e46:	2302      	movs	r3, #2
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e001      	b.n	8000e50 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <set_int_enable+0xb0>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	7818      	ldrb	r0, [r3, #0]
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <set_int_enable+0xb0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	7c59      	ldrb	r1, [r3, #17]
 8000e5c:	f107 030f 	add.w	r3, r7, #15
 8000e60:	2201      	movs	r2, #1
 8000e62:	f7ff ff9f 	bl	8000da4 <i2c_write>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <set_int_enable+0x46>
            return -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	e030      	b.n	8000ed4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <set_int_enable+0xb0>)
 8000e76:	745a      	strb	r2, [r3, #17]
 8000e78:	e02b      	b.n	8000ed2 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <set_int_enable+0xb0>)
 8000e7c:	7a9b      	ldrb	r3, [r3, #10]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <set_int_enable+0x5c>
            return -1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e025      	b.n	8000ed4 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <set_int_enable+0x6e>
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <set_int_enable+0xb0>)
 8000e90:	7c5b      	ldrb	r3, [r3, #17]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <set_int_enable+0x6e>
            return 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e01c      	b.n	8000ed4 <set_int_enable+0xa8>
        if (enable)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e001      	b.n	8000eaa <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <set_int_enable+0xb0>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	7818      	ldrb	r0, [r3, #0]
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <set_int_enable+0xb0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	7c59      	ldrb	r1, [r3, #17]
 8000eb6:	f107 030f 	add.w	r3, r7, #15
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f7ff ff72 	bl	8000da4 <i2c_write>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <set_int_enable+0xa0>
            return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e003      	b.n	8000ed4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <set_int_enable+0xb0>)
 8000ed0:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000

08000ee0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = BIT_RESET;
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8000eec:	4b7e      	ldr	r3, [pc, #504]	@ (80010e8 <mpu_init+0x208>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	7818      	ldrb	r0, [r3, #0]
 8000ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80010e8 <mpu_init+0x208>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	7d59      	ldrb	r1, [r3, #21]
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2201      	movs	r2, #1
 8000efe:	f7ff ff51 	bl	8000da4 <i2c_write>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <mpu_init+0x2e>
        return -1;
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	e0e7      	b.n	80010de <mpu_init+0x1fe>
    delay_ms(100);
 8000f0e:	2064      	movs	r0, #100	@ 0x64
 8000f10:	f005 f848 	bl	8005fa4 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8000f18:	4b73      	ldr	r3, [pc, #460]	@ (80010e8 <mpu_init+0x208>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	7818      	ldrb	r0, [r3, #0]
 8000f1e:	4b72      	ldr	r3, [pc, #456]	@ (80010e8 <mpu_init+0x208>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	7d59      	ldrb	r1, [r3, #21]
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f7ff ff3b 	bl	8000da4 <i2c_write>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <mpu_init+0x5a>
        return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	e0d1      	b.n	80010de <mpu_init+0x1fe>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8000f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80010e8 <mpu_init+0x208>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	7818      	ldrb	r0, [r3, #0]
 8000f40:	4b69      	ldr	r3, [pc, #420]	@ (80010e8 <mpu_init+0x208>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	7e59      	ldrb	r1, [r3, #25]
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2206      	movs	r2, #6
 8000f4c:	f7ff ff4c 	bl	8000de8 <i2c_read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <mpu_init+0x7c>
        return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	e0c0      	b.n	80010de <mpu_init+0x1fe>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8000f5c:	7b7b      	ldrb	r3, [r7, #13]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	b25a      	sxtb	r2, r3
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8000f78:	7a7b      	ldrb	r3, [r7, #9]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	73fb      	strb	r3, [r7, #15]

    if (rev) {
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d010      	beq.n	8000fb0 <mpu_init+0xd0>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d103      	bne.n	8000f9c <mpu_init+0xbc>
            st.chip_cfg.accel_half = 1;
 8000f94:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <mpu_init+0x208>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	74da      	strb	r2, [r3, #19]
 8000f9a:	e02e      	b.n	8000ffa <mpu_init+0x11a>
        else if (rev == 2)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d103      	bne.n	8000faa <mpu_init+0xca>
            st.chip_cfg.accel_half = 0;
 8000fa2:	4b51      	ldr	r3, [pc, #324]	@ (80010e8 <mpu_init+0x208>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	74da      	strb	r2, [r3, #19]
 8000fa8:	e027      	b.n	8000ffa <mpu_init+0x11a>
        else {
            log_e("Unsupported software product rev %d.\n", rev);
            return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e096      	b.n	80010de <mpu_init+0x1fe>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80010e8 <mpu_init+0x208>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	7818      	ldrb	r0, [r3, #0]
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80010e8 <mpu_init+0x208>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	78d9      	ldrb	r1, [r3, #3]
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f7ff ff11 	bl	8000de8 <i2c_read>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <mpu_init+0xf2>
            return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	e085      	b.n	80010de <mpu_init+0x1fe>
        rev = data[0] & 0x0F;
 8000fd2:	7a3b      	ldrb	r3, [r7, #8]
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
        if (!rev) {
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <mpu_init+0x106>
            log_e("Product ID read as 0 indicates device is either "
                "incompatible or an MPU3050.\n");
            return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	e07b      	b.n	80010de <mpu_init+0x1fe>
        } else if (rev == 4) {
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d103      	bne.n	8000ff4 <mpu_init+0x114>
            log_i("Half sensitivity part found.\n");
            st.chip_cfg.accel_half = 1;
 8000fec:	4b3e      	ldr	r3, [pc, #248]	@ (80010e8 <mpu_init+0x208>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	74da      	strb	r2, [r3, #19]
 8000ff2:	e002      	b.n	8000ffa <mpu_init+0x11a>
        } else
            st.chip_cfg.accel_half = 0;
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80010e8 <mpu_init+0x208>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80010e8 <mpu_init+0x208>)
 8000ffc:	22ff      	movs	r2, #255	@ 0xff
 8000ffe:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001000:	4b39      	ldr	r3, [pc, #228]	@ (80010e8 <mpu_init+0x208>)
 8001002:	22ff      	movs	r2, #255	@ 0xff
 8001004:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8001006:	4b38      	ldr	r3, [pc, #224]	@ (80010e8 <mpu_init+0x208>)
 8001008:	22ff      	movs	r2, #255	@ 0xff
 800100a:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <mpu_init+0x208>)
 800100e:	22ff      	movs	r2, #255	@ 0xff
 8001010:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001012:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <mpu_init+0x208>)
 8001014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001018:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800101a:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <mpu_init+0x208>)
 800101c:	22ff      	movs	r2, #255	@ 0xff
 800101e:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001020:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <mpu_init+0x208>)
 8001022:	22ff      	movs	r2, #255	@ 0xff
 8001024:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001026:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <mpu_init+0x208>)
 8001028:	2201      	movs	r2, #1
 800102a:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <mpu_init+0x208>)
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <mpu_init+0x208>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 800103c:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <mpu_init+0x208>)
 800103e:	2200      	movs	r2, #0
 8001040:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8001042:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <mpu_init+0x208>)
 8001044:	2200      	movs	r2, #0
 8001046:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001048:	220c      	movs	r2, #12
 800104a:	2100      	movs	r1, #0
 800104c:	4827      	ldr	r0, [pc, #156]	@ (80010ec <mpu_init+0x20c>)
 800104e:	f009 f9cb 	bl	800a3e8 <memset>
    st.chip_cfg.dmp_on = 0;
 8001052:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <mpu_init+0x208>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 800105a:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <mpu_init+0x208>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <mpu_init+0x208>)
 8001064:	2200      	movs	r2, #0
 8001066:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8001068:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800106c:	f000 f9f4 	bl	8001458 <mpu_set_gyro_fsr>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <mpu_init+0x19c>
        return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e030      	b.n	80010de <mpu_init+0x1fe>
    if (mpu_set_accel_fsr(2))
 800107c:	2002      	movs	r0, #2
 800107e:	f000 fa79 	bl	8001574 <mpu_set_accel_fsr>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <mpu_init+0x1ae>
        return -1;
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	e027      	b.n	80010de <mpu_init+0x1fe>
    if (mpu_set_lpf(42))
 800108e:	202a      	movs	r0, #42	@ 0x2a
 8001090:	f000 fb16 	bl	80016c0 <mpu_set_lpf>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <mpu_init+0x1c0>
        return -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e01e      	b.n	80010de <mpu_init+0x1fe>
    if (mpu_set_sample_rate(200)) // TODO change 50 --> 200
 80010a0:	20c8      	movs	r0, #200	@ 0xc8
 80010a2:	f000 fb75 	bl	8001790 <mpu_set_sample_rate>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <mpu_init+0x1d2>
        return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	e015      	b.n	80010de <mpu_init+0x1fe>
    if (mpu_configure_fifo(0))
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fc5a 	bl	800196c <mpu_configure_fifo>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <mpu_init+0x1e4>
        return -1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e00c      	b.n	80010de <mpu_init+0x1fe>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 fda7 	bl	8001c18 <mpu_set_bypass>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <mpu_init+0x1f6>
        return -1;
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	e003      	b.n	80010de <mpu_init+0x1fe>
#endif

    mpu_set_sensors(0);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 fc9a 	bl	8001a10 <mpu_set_sensors>
    return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000016 	.word	0x20000016

080010f0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b28      	cmp	r3, #40	@ 0x28
 80010fe:	d902      	bls.n	8001106 <mpu_lp_accel_mode+0x16>
        return -1;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	e06a      	b.n	80011dc <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d11c      	bne.n	8001146 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 800110c:	2000      	movs	r0, #0
 800110e:	f000 fe49 	bl	8001da4 <mpu_set_int_latched>
        tmp[0] = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001116:	2307      	movs	r3, #7
 8001118:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800111a:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	7818      	ldrb	r0, [r3, #0]
 8001120:	4b30      	ldr	r3, [pc, #192]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	7d59      	ldrb	r1, [r3, #21]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2202      	movs	r2, #2
 800112c:	f7ff fe3a 	bl	8000da4 <i2c_write>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <mpu_lp_accel_mode+0x4c>
            return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e04f      	b.n	80011dc <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 800113e:	2200      	movs	r2, #0
 8001140:	751a      	strb	r2, [r3, #20]
        return 0;
 8001142:	2300      	movs	r3, #0
 8001144:	e04a      	b.n	80011dc <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 fe2c 	bl	8001da4 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 800114c:	2320      	movs	r3, #32
 800114e:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d105      	bne.n	8001162 <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8001156:	2300      	movs	r3, #0
 8001158:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800115a:	2005      	movs	r0, #5
 800115c:	f000 fab0 	bl	80016c0 <mpu_set_lpf>
 8001160:	e016      	b.n	8001190 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d805      	bhi.n	8001174 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8001168:	2301      	movs	r3, #1
 800116a:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800116c:	2005      	movs	r0, #5
 800116e:	f000 faa7 	bl	80016c0 <mpu_set_lpf>
 8001172:	e00d      	b.n	8001190 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b14      	cmp	r3, #20
 8001178:	d805      	bhi.n	8001186 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 800117a:	2302      	movs	r3, #2
 800117c:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800117e:	200a      	movs	r0, #10
 8001180:	f000 fa9e 	bl	80016c0 <mpu_set_lpf>
 8001184:	e004      	b.n	8001190 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001186:	2303      	movs	r3, #3
 8001188:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 800118a:	2014      	movs	r0, #20
 800118c:	f000 fa98 	bl	80016c0 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8001190:	7b7b      	ldrb	r3, [r7, #13]
 8001192:	019b      	lsls	r3, r3, #6
 8001194:	b25b      	sxtb	r3, r3
 8001196:	f043 0307 	orr.w	r3, r3, #7
 800119a:	b25b      	sxtb	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	7818      	ldrb	r0, [r3, #0]
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	7d59      	ldrb	r1, [r3, #21]
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2202      	movs	r2, #2
 80011b2:	f7ff fdf7 	bl	8000da4 <i2c_write>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <mpu_lp_accel_mode+0xd2>
        return -1;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	e00c      	b.n	80011dc <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 80011c4:	2208      	movs	r2, #8
 80011c6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <mpu_lp_accel_mode+0xf4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 fbc9 	bl	800196c <mpu_configure_fifo>

    return 0;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000

080011e8 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80011ee:	4b7e      	ldr	r3, [pc, #504]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80011f0:	7a9b      	ldrb	r3, [r3, #10]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <mpu_reset_fifo+0x14>
        return -1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e0f1      	b.n	80013e0 <mpu_reset_fifo+0x1f8>

    data = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001200:	4b79      	ldr	r3, [pc, #484]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	7818      	ldrb	r0, [r3, #0]
 8001206:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	7c59      	ldrb	r1, [r3, #17]
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	2201      	movs	r2, #1
 8001210:	f7ff fdc8 	bl	8000da4 <i2c_write>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <mpu_reset_fifo+0x38>
        return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e0df      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001220:	4b71      	ldr	r3, [pc, #452]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	4b70      	ldr	r3, [pc, #448]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	7959      	ldrb	r1, [r3, #5]
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	2201      	movs	r2, #1
 8001230:	f7ff fdb8 	bl	8000da4 <i2c_write>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <mpu_reset_fifo+0x58>
        return -1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e0cf      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001240:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	7818      	ldrb	r0, [r3, #0]
 8001246:	4b68      	ldr	r3, [pc, #416]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7919      	ldrb	r1, [r3, #4]
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	2201      	movs	r2, #1
 8001250:	f7ff fda8 	bl	8000da4 <i2c_write>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <mpu_reset_fifo+0x78>
        return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e0bf      	b.n	80013e0 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8001260:	4b61      	ldr	r3, [pc, #388]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001262:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001266:	2b00      	cmp	r3, #0
 8001268:	d05c      	beq.n	8001324 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800126a:	230c      	movs	r3, #12
 800126c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800126e:	4b5e      	ldr	r3, [pc, #376]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	7818      	ldrb	r0, [r3, #0]
 8001274:	4b5c      	ldr	r3, [pc, #368]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	7919      	ldrb	r1, [r3, #4]
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	2201      	movs	r2, #1
 800127e:	f7ff fd91 	bl	8000da4 <i2c_write>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <mpu_reset_fifo+0xa6>
            return -1;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	e0a8      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800128e:	2032      	movs	r0, #50	@ 0x32
 8001290:	f004 fe88 	bl	8005fa4 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8001294:	23c0      	movs	r3, #192	@ 0xc0
 8001296:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001298:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <mpu_reset_fifo+0x200>)
 800129a:	7a9b      	ldrb	r3, [r3, #10]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f043 0320 	orr.w	r3, r3, #32
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80012ae:	4b4e      	ldr	r3, [pc, #312]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	7818      	ldrb	r0, [r3, #0]
 80012b4:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	7919      	ldrb	r1, [r3, #4]
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	2201      	movs	r2, #1
 80012be:	f7ff fd71 	bl	8000da4 <i2c_write>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <mpu_reset_fifo+0xe6>
            return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	e088      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 80012ce:	4b46      	ldr	r3, [pc, #280]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80012d0:	7c5b      	ldrb	r3, [r3, #17]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 80012d6:	2302      	movs	r3, #2
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	e001      	b.n	80012e0 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80012e0:	4b41      	ldr	r3, [pc, #260]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	7818      	ldrb	r0, [r3, #0]
 80012e6:	4b40      	ldr	r3, [pc, #256]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	7c59      	ldrb	r1, [r3, #17]
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	2201      	movs	r2, #1
 80012f0:	f7ff fd58 	bl	8000da4 <i2c_write>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <mpu_reset_fifo+0x118>
            return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e06f      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
        data = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001304:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	7818      	ldrb	r0, [r3, #0]
 800130a:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <mpu_reset_fifo+0x200>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	7959      	ldrb	r1, [r3, #5]
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	2201      	movs	r2, #1
 8001314:	f7ff fd46 	bl	8000da4 <i2c_write>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d05f      	beq.n	80013de <mpu_reset_fifo+0x1f6>
            return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e05d      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8001324:	2304      	movs	r3, #4
 8001326:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001328:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <mpu_reset_fifo+0x200>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	7818      	ldrb	r0, [r3, #0]
 800132e:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	7919      	ldrb	r1, [r3, #4]
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	2201      	movs	r2, #1
 8001338:	f7ff fd34 	bl	8000da4 <i2c_write>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <mpu_reset_fifo+0x160>
            return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e04b      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <mpu_reset_fifo+0x200>)
 800134a:	7c9b      	ldrb	r3, [r3, #18]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <mpu_reset_fifo+0x174>
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001352:	7a9b      	ldrb	r3, [r3, #10]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 800135c:	2340      	movs	r3, #64	@ 0x40
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	e001      	b.n	8001366 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8001362:	2360      	movs	r3, #96	@ 0x60
 8001364:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001366:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <mpu_reset_fifo+0x200>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	7818      	ldrb	r0, [r3, #0]
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <mpu_reset_fifo+0x200>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	7919      	ldrb	r1, [r3, #4]
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	2201      	movs	r2, #1
 8001376:	f7ff fd15 	bl	8000da4 <i2c_write>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <mpu_reset_fifo+0x19e>
            return -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	e02c      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8001386:	2032      	movs	r0, #50	@ 0x32
 8001388:	f004 fe0c 	bl	8005fa4 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <mpu_reset_fifo+0x200>)
 800138e:	7c5b      	ldrb	r3, [r3, #17]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8001394:	2301      	movs	r3, #1
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	e001      	b.n	800139e <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	7818      	ldrb	r0, [r3, #0]
 80013a4:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	7c59      	ldrb	r1, [r3, #17]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	2201      	movs	r2, #1
 80013ae:	f7ff fcf9 	bl	8000da4 <i2c_write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <mpu_reset_fifo+0x1d6>
            return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e010      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	7818      	ldrb	r0, [r3, #0]
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <mpu_reset_fifo+0x200>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	7959      	ldrb	r1, [r3, #5]
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <mpu_reset_fifo+0x204>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	f7ff fce9 	bl	8000da4 <i2c_write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <mpu_reset_fifo+0x1f6>
            return -1;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	e000      	b.n	80013e0 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000010 	.word	0x20000010

080013f0 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <mpu_get_gyro_fsr+0x64>)
 80013fa:	7a1b      	ldrb	r3, [r3, #8]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d81e      	bhi.n	800143e <mpu_get_gyro_fsr+0x4e>
 8001400:	a201      	add	r2, pc, #4	@ (adr r2, 8001408 <mpu_get_gyro_fsr+0x18>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	08001419 	.word	0x08001419
 800140c:	08001421 	.word	0x08001421
 8001410:	0800142b 	.word	0x0800142b
 8001414:	08001435 	.word	0x08001435
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	22fa      	movs	r2, #250	@ 0xfa
 800141c:	801a      	strh	r2, [r3, #0]
        break;
 800141e:	e012      	b.n	8001446 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001426:	801a      	strh	r2, [r3, #0]
        break;
 8001428:	e00d      	b.n	8001446 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001430:	801a      	strh	r2, [r3, #0]
        break;
 8001432:	e008      	b.n	8001446 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800143a:	801a      	strh	r2, [r3, #0]
        break;
 800143c:	e003      	b.n	8001446 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	801a      	strh	r2, [r3, #0]
        break;
 8001444:	bf00      	nop
    }
    return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20000000 	.word	0x20000000

08001458 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <mpu_set_gyro_fsr+0xa4>)
 8001464:	7a9b      	ldrb	r3, [r3, #10]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <mpu_set_gyro_fsr+0x18>
        return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e041      	b.n	80014f4 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001476:	d017      	beq.n	80014a8 <mpu_set_gyro_fsr+0x50>
 8001478:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800147c:	dc17      	bgt.n	80014ae <mpu_set_gyro_fsr+0x56>
 800147e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001482:	d00e      	beq.n	80014a2 <mpu_set_gyro_fsr+0x4a>
 8001484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001488:	dc11      	bgt.n	80014ae <mpu_set_gyro_fsr+0x56>
 800148a:	2bfa      	cmp	r3, #250	@ 0xfa
 800148c:	d003      	beq.n	8001496 <mpu_set_gyro_fsr+0x3e>
 800148e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001492:	d003      	beq.n	800149c <mpu_set_gyro_fsr+0x44>
 8001494:	e00b      	b.n	80014ae <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
        break;
 800149a:	e00b      	b.n	80014b4 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800149c:	2308      	movs	r3, #8
 800149e:	73fb      	strb	r3, [r7, #15]
        break;
 80014a0:	e008      	b.n	80014b4 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 80014a2:	2310      	movs	r3, #16
 80014a4:	73fb      	strb	r3, [r7, #15]
        break;
 80014a6:	e005      	b.n	80014b4 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80014a8:	2318      	movs	r3, #24
 80014aa:	73fb      	strb	r3, [r7, #15]
        break;
 80014ac:	e002      	b.n	80014b4 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e01f      	b.n	80014f4 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <mpu_set_gyro_fsr+0xa4>)
 80014b6:	7a1a      	ldrb	r2, [r3, #8]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	429a      	cmp	r2, r3
 80014c0:	d101      	bne.n	80014c6 <mpu_set_gyro_fsr+0x6e>
        return 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e016      	b.n	80014f4 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <mpu_set_gyro_fsr+0xa4>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	7818      	ldrb	r0, [r3, #0]
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <mpu_set_gyro_fsr+0xa4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	7999      	ldrb	r1, [r3, #6]
 80014d2:	f107 030f 	add.w	r3, r7, #15
 80014d6:	2201      	movs	r2, #1
 80014d8:	f7ff fc64 	bl	8000da4 <i2c_write>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <mpu_set_gyro_fsr+0x90>
        return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e005      	b.n	80014f4 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	08db      	lsrs	r3, r3, #3
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <mpu_set_gyro_fsr+0xa4>)
 80014f0:	721a      	strb	r2, [r3, #8]
    return 0;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000

08001500 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <mpu_get_accel_fsr+0x70>)
 800150a:	7a5b      	ldrb	r3, [r3, #9]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d81b      	bhi.n	8001548 <mpu_get_accel_fsr+0x48>
 8001510:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <mpu_get_accel_fsr+0x18>)
 8001512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001516:	bf00      	nop
 8001518:	08001529 	.word	0x08001529
 800151c:	08001531 	.word	0x08001531
 8001520:	08001539 	.word	0x08001539
 8001524:	08001541 	.word	0x08001541
    case INV_FSR_2G:
        fsr[0] = 2;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	701a      	strb	r2, [r3, #0]
        break;
 800152e:	e00e      	b.n	800154e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	701a      	strb	r2, [r3, #0]
        break;
 8001536:	e00a      	b.n	800154e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2208      	movs	r2, #8
 800153c:	701a      	strb	r2, [r3, #0]
        break;
 800153e:	e006      	b.n	800154e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2210      	movs	r2, #16
 8001544:	701a      	strb	r2, [r3, #0]
        break;
 8001546:	e002      	b.n	800154e <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	e00a      	b.n	8001564 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <mpu_get_accel_fsr+0x70>)
 8001550:	7cdb      	ldrb	r3, [r3, #19]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	701a      	strb	r2, [r3, #0]
    return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	20000000 	.word	0x20000000

08001574 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800157e:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <mpu_set_accel_fsr+0xcc>)
 8001580:	7a9b      	ldrb	r3, [r3, #10]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <mpu_set_accel_fsr+0x18>
        return -1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e054      	b.n	8001636 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	3b02      	subs	r3, #2
 8001590:	2b0e      	cmp	r3, #14
 8001592:	d82d      	bhi.n	80015f0 <mpu_set_accel_fsr+0x7c>
 8001594:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <mpu_set_accel_fsr+0x28>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015d9 	.word	0x080015d9
 80015a0:	080015f1 	.word	0x080015f1
 80015a4:	080015df 	.word	0x080015df
 80015a8:	080015f1 	.word	0x080015f1
 80015ac:	080015f1 	.word	0x080015f1
 80015b0:	080015f1 	.word	0x080015f1
 80015b4:	080015e5 	.word	0x080015e5
 80015b8:	080015f1 	.word	0x080015f1
 80015bc:	080015f1 	.word	0x080015f1
 80015c0:	080015f1 	.word	0x080015f1
 80015c4:	080015f1 	.word	0x080015f1
 80015c8:	080015f1 	.word	0x080015f1
 80015cc:	080015f1 	.word	0x080015f1
 80015d0:	080015f1 	.word	0x080015f1
 80015d4:	080015eb 	.word	0x080015eb
    case 2:
        data = INV_FSR_2G << 3;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
        break;
 80015dc:	e00b      	b.n	80015f6 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80015de:	2308      	movs	r3, #8
 80015e0:	73fb      	strb	r3, [r7, #15]
        break;
 80015e2:	e008      	b.n	80015f6 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80015e4:	2310      	movs	r3, #16
 80015e6:	73fb      	strb	r3, [r7, #15]
        break;
 80015e8:	e005      	b.n	80015f6 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80015ea:	2318      	movs	r3, #24
 80015ec:	73fb      	strb	r3, [r7, #15]
        break;
 80015ee:	e002      	b.n	80015f6 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	e01f      	b.n	8001636 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <mpu_set_accel_fsr+0xcc>)
 80015f8:	7a5a      	ldrb	r2, [r3, #9]
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	429a      	cmp	r2, r3
 8001602:	d101      	bne.n	8001608 <mpu_set_accel_fsr+0x94>
        return 0;
 8001604:	2300      	movs	r3, #0
 8001606:	e016      	b.n	8001636 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <mpu_set_accel_fsr+0xcc>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	7818      	ldrb	r0, [r3, #0]
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <mpu_set_accel_fsr+0xcc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	79d9      	ldrb	r1, [r3, #7]
 8001614:	f107 030f 	add.w	r3, r7, #15
 8001618:	2201      	movs	r2, #1
 800161a:	f7ff fbc3 	bl	8000da4 <i2c_write>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <mpu_set_accel_fsr+0xb6>
        return -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	e005      	b.n	8001636 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	08db      	lsrs	r3, r3, #3
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b03      	ldr	r3, [pc, #12]	@ (8001640 <mpu_set_accel_fsr+0xcc>)
 8001632:	725a      	strb	r2, [r3, #9]
    return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000000 	.word	0x20000000

08001644 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <mpu_get_lpf+0x78>)
 800164e:	7adb      	ldrb	r3, [r3, #11]
 8001650:	3b01      	subs	r3, #1
 8001652:	2b05      	cmp	r3, #5
 8001654:	d826      	bhi.n	80016a4 <mpu_get_lpf+0x60>
 8001656:	a201      	add	r2, pc, #4	@ (adr r2, 800165c <mpu_get_lpf+0x18>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	08001675 	.word	0x08001675
 8001660:	0800167d 	.word	0x0800167d
 8001664:	08001685 	.word	0x08001685
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001695 	.word	0x08001695
 8001670:	0800169d 	.word	0x0800169d
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	22bc      	movs	r2, #188	@ 0xbc
 8001678:	801a      	strh	r2, [r3, #0]
        break;
 800167a:	e017      	b.n	80016ac <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2262      	movs	r2, #98	@ 0x62
 8001680:	801a      	strh	r2, [r3, #0]
        break;
 8001682:	e013      	b.n	80016ac <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	222a      	movs	r2, #42	@ 0x2a
 8001688:	801a      	strh	r2, [r3, #0]
        break;
 800168a:	e00f      	b.n	80016ac <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2214      	movs	r2, #20
 8001690:	801a      	strh	r2, [r3, #0]
        break;
 8001692:	e00b      	b.n	80016ac <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	220a      	movs	r2, #10
 8001698:	801a      	strh	r2, [r3, #0]
        break;
 800169a:	e007      	b.n	80016ac <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2205      	movs	r2, #5
 80016a0:	801a      	strh	r2, [r3, #0]
        break;
 80016a2:	e003      	b.n	80016ac <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	801a      	strh	r2, [r3, #0]
        break;
 80016aa:	bf00      	nop
    }
    return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000

080016c0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <mpu_set_lpf+0x98>)
 80016cc:	7a9b      	ldrb	r3, [r3, #10]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <mpu_set_lpf+0x18>
        return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e03b      	b.n	8001750 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	2bbb      	cmp	r3, #187	@ 0xbb
 80016dc:	d902      	bls.n	80016e4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e019      	b.n	8001718 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	2b61      	cmp	r3, #97	@ 0x61
 80016e8:	d902      	bls.n	80016f0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80016ea:	2302      	movs	r3, #2
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e013      	b.n	8001718 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	2b29      	cmp	r3, #41	@ 0x29
 80016f4:	d902      	bls.n	80016fc <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80016f6:	2303      	movs	r3, #3
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	e00d      	b.n	8001718 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	2b13      	cmp	r3, #19
 8001700:	d902      	bls.n	8001708 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001702:	2304      	movs	r3, #4
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e007      	b.n	8001718 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	2b09      	cmp	r3, #9
 800170c:	d902      	bls.n	8001714 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800170e:	2305      	movs	r3, #5
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e001      	b.n	8001718 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001714:	2306      	movs	r3, #6
 8001716:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <mpu_set_lpf+0x98>)
 800171a:	7ada      	ldrb	r2, [r3, #11]
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	429a      	cmp	r2, r3
 8001720:	d101      	bne.n	8001726 <mpu_set_lpf+0x66>
        return 0;
 8001722:	2300      	movs	r3, #0
 8001724:	e014      	b.n	8001750 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <mpu_set_lpf+0x98>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	7818      	ldrb	r0, [r3, #0]
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <mpu_set_lpf+0x98>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	7899      	ldrb	r1, [r3, #2]
 8001732:	f107 030f 	add.w	r3, r7, #15
 8001736:	2201      	movs	r2, #1
 8001738:	f7ff fb34 	bl	8000da4 <i2c_write>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <mpu_set_lpf+0x88>
        return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e003      	b.n	8001750 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <mpu_set_lpf+0x98>)
 800174c:	72da      	strb	r2, [r3, #11]
    return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000

0800175c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <mpu_get_sample_rate+0x30>)
 8001766:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <mpu_get_sample_rate+0x18>
        return -1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e004      	b.n	800177e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <mpu_get_sample_rate+0x30>)
 8001776:	89da      	ldrh	r2, [r3, #14]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	801a      	strh	r2, [r3, #0]
    return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000000 	.word	0x20000000

08001790 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <mpu_set_sample_rate+0xc8>)
 800179c:	7a9b      	ldrb	r3, [r3, #10]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <mpu_set_sample_rate+0x18>
        return -1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e053      	b.n	8001850 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <mpu_set_sample_rate+0xc8>)
 80017aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <mpu_set_sample_rate+0x28>
        return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e04b      	b.n	8001850 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <mpu_set_sample_rate+0xc8>)
 80017ba:	7d1b      	ldrb	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00f      	beq.n	80017e0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <mpu_set_sample_rate+0x4a>
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	2b28      	cmp	r3, #40	@ 0x28
 80017ca:	d806      	bhi.n	80017da <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc8d 	bl	80010f0 <mpu_lp_accel_mode>
                return 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e03a      	b.n	8001850 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fc88 	bl	80010f0 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d802      	bhi.n	80017ec <mpu_set_sample_rate+0x5c>
            rate = 4;
 80017e6:	2304      	movs	r3, #4
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	e006      	b.n	80017fa <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017f2:	d902      	bls.n	80017fa <mpu_set_sample_rate+0x6a>
            rate = 1000;
 80017f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001800:	fb92 f3f3 	sdiv	r3, r2, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <mpu_set_sample_rate+0xc8>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	7818      	ldrb	r0, [r3, #0]
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <mpu_set_sample_rate+0xc8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	7859      	ldrb	r1, [r3, #1]
 8001818:	f107 030f 	add.w	r3, r7, #15
 800181c:	2201      	movs	r2, #1
 800181e:	f7ff fac1 	bl	8000da4 <i2c_write>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <mpu_set_sample_rate+0x9e>
            return -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	e010      	b.n	8001850 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3301      	adds	r3, #1
 8001832:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001836:	fb92 f3f3 	sdiv	r3, r2, r3
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <mpu_set_sample_rate+0xc8>)
 800183e:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <mpu_set_sample_rate+0xc8>)
 8001842:	89db      	ldrh	r3, [r3, #14]
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff39 	bl	80016c0 <mpu_set_lpf>
        return 0;
 800184e:	2300      	movs	r3, #0
    }
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000

0800185c <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <mpu_get_gyro_sens+0x5c>)
 8001866:	7a1b      	ldrb	r3, [r3, #8]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d81b      	bhi.n	80018a4 <mpu_get_gyro_sens+0x48>
 800186c:	a201      	add	r2, pc, #4	@ (adr r2, 8001874 <mpu_get_gyro_sens+0x18>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	08001885 	.word	0x08001885
 8001878:	0800188d 	.word	0x0800188d
 800187c:	08001895 	.word	0x08001895
 8001880:	0800189d 	.word	0x0800189d
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <mpu_get_gyro_sens+0x60>)
 8001888:	601a      	str	r2, [r3, #0]
        break;
 800188a:	e00e      	b.n	80018aa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <mpu_get_gyro_sens+0x64>)
 8001890:	601a      	str	r2, [r3, #0]
        break;
 8001892:	e00a      	b.n	80018aa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <mpu_get_gyro_sens+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
        break;
 800189a:	e006      	b.n	80018aa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <mpu_get_gyro_sens+0x6c>)
 80018a0:	601a      	str	r2, [r3, #0]
        break;
 80018a2:	e002      	b.n	80018aa <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	e000      	b.n	80018ac <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000000 	.word	0x20000000
 80018bc:	43030000 	.word	0x43030000
 80018c0:	42830000 	.word	0x42830000
 80018c4:	42033333 	.word	0x42033333
 80018c8:	41833333 	.word	0x41833333

080018cc <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <mpu_get_accel_sens+0x78>)
 80018d6:	7a5b      	ldrb	r3, [r3, #9]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d81f      	bhi.n	800191c <mpu_get_accel_sens+0x50>
 80018dc:	a201      	add	r2, pc, #4	@ (adr r2, 80018e4 <mpu_get_accel_sens+0x18>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018f5 	.word	0x080018f5
 80018e8:	080018ff 	.word	0x080018ff
 80018ec:	08001909 	.word	0x08001909
 80018f0:	08001913 	.word	0x08001913
    case INV_FSR_2G:
        sens[0] = 16384;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018fa:	801a      	strh	r2, [r3, #0]
        break;
 80018fc:	e011      	b.n	8001922 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8001904:	801a      	strh	r2, [r3, #0]
        break;
 8001906:	e00c      	b.n	8001922 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800190e:	801a      	strh	r2, [r3, #0]
        break;
 8001910:	e007      	b.n	8001922 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001918:	801a      	strh	r2, [r3, #0]
        break;
 800191a:	e002      	b.n	8001922 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	e00a      	b.n	8001938 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <mpu_get_accel_sens+0x78>)
 8001924:	7cdb      	ldrb	r3, [r3, #19]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	801a      	strh	r2, [r3, #0]
    return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	20000000 	.word	0x20000000

08001948 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <mpu_get_fifo_config+0x20>)
 8001952:	7c1a      	ldrb	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	701a      	strb	r2, [r3, #0]
    return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000

0800196c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <mpu_configure_fifo+0x24>
        return 0;
 800198c:	2300      	movs	r3, #0
 800198e:	e038      	b.n	8001a02 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 8001992:	7a9b      	ldrb	r3, [r3, #10]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <mpu_configure_fifo+0x32>
            return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	e031      	b.n	8001a02 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800199e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 80019a0:	7c1b      	ldrb	r3, [r3, #16]
 80019a2:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 80019a6:	7a9a      	ldrb	r2, [r3, #10]
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4013      	ands	r3, r2
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 80019b0:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 80019b4:	7c1b      	ldrb	r3, [r3, #16]
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d003      	beq.n	80019c4 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e001      	b.n	80019c8 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <mpu_configure_fifo+0x6a>
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 80019d0:	7d1b      	ldrb	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fa28 	bl	8000e2c <set_int_enable>
 80019dc:	e002      	b.n	80019e4 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff fa24 	bl	8000e2c <set_int_enable>
        if (sensors) {
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 80019ea:	f7ff fbfd 	bl	80011e8 <mpu_reset_fifo>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 80019f4:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <mpu_configure_fifo+0xa0>)
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	7413      	strb	r3, [r2, #16]
                return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e000      	b.n	8001a02 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8001a00:	68fb      	ldr	r3, [r7, #12]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000

08001a10 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e007      	b.n	8001a3a <mpu_set_sensors+0x2a>
    else if (sensors)
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <mpu_set_sensors+0x26>
        data = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e001      	b.n	8001a3a <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8001a36:	2340      	movs	r3, #64	@ 0x40
 8001a38:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001a3a:	4b37      	ldr	r3, [pc, #220]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	7818      	ldrb	r0, [r3, #0]
 8001a40:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	7d59      	ldrb	r1, [r3, #21]
 8001a46:	f107 030f 	add.w	r3, r7, #15
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f7ff f9aa 	bl	8000da4 <i2c_write>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8001a56:	4b30      	ldr	r3, [pc, #192]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	729a      	strb	r2, [r3, #10]
        return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	e056      	b.n	8001b10 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001a6c:	731a      	strb	r2, [r3, #12]

    data = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d104      	bne.n	8001a86 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d104      	bne.n	8001a9a <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d104      	bne.n	8001aae <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d104      	bne.n	8001ac2 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	7818      	ldrb	r0, [r3, #0]
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	7d99      	ldrb	r1, [r3, #22]
 8001ace:	f107 030f 	add.w	r3, r7, #15
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f7ff f966 	bl	8000da4 <i2c_write>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	729a      	strb	r2, [r3, #10]
        return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	e012      	b.n	8001b10 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <mpu_set_sensors+0xec>
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d002      	beq.n	8001afc <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f954 	bl	8001da4 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8001afc:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <mpu_set_sensors+0x108>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8001b08:	2032      	movs	r0, #50	@ 0x32
 8001b0a:	f004 fa4b 	bl	8005fa4 <HAL_Delay>
    return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000000 	.word	0x20000000

08001b1c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <mpu_read_fifo_stream+0x1e>
        return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	e068      	b.n	8001c0c <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8001b3a:	4b36      	ldr	r3, [pc, #216]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001b3c:	7a9b      	ldrb	r3, [r3, #10]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <mpu_read_fifo_stream+0x2c>
        return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e061      	b.n	8001c0c <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001b48:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	7818      	ldrb	r0, [r3, #0]
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	7b19      	ldrb	r1, [r3, #12]
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f7ff f945 	bl	8000de8 <i2c_read>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <mpu_read_fifo_stream+0x4e>
        return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	e050      	b.n	8001c0c <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001b6a:	7d3b      	ldrb	r3, [r7, #20]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7d7b      	ldrb	r3, [r7, #21]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8001b7a:	8afa      	ldrh	r2, [r7, #22]
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d205      	bcs.n	8001b8e <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
        return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	e03e      	b.n	8001c0c <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	885b      	ldrh	r3, [r3, #2]
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	8afa      	ldrh	r2, [r7, #22]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d91a      	bls.n	8001bd4 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	7818      	ldrb	r0, [r3, #0]
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	7cd9      	ldrb	r1, [r3, #19]
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f7ff f91a 	bl	8000de8 <i2c_read>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <mpu_read_fifo_stream+0xa4>
            return -1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e025      	b.n	8001c0c <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001bc0:	7d3b      	ldrb	r3, [r7, #20]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 8001bca:	f7ff fb0d 	bl	80011e8 <mpu_reset_fifo>
            return -2;
 8001bce:	f06f 0301 	mvn.w	r3, #1
 8001bd2:	e01b      	b.n	8001c0c <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	7818      	ldrb	r0, [r3, #0]
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <mpu_read_fifo_stream+0xf8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	7b59      	ldrb	r1, [r3, #13]
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f7ff f8ff 	bl	8000de8 <i2c_read>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <mpu_read_fifo_stream+0xda>
        return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e00a      	b.n	8001c0c <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 8001bf6:	8afa      	ldrh	r2, [r7, #22]
 8001bf8:	89fb      	ldrh	r3, [r7, #14]
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	701a      	strb	r2, [r3, #0]
    return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000

08001c18 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8001c22:	4b5f      	ldr	r3, [pc, #380]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001c24:	7c9b      	ldrb	r3, [r3, #18]
 8001c26:	79fa      	ldrb	r2, [r7, #7]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d101      	bne.n	8001c30 <mpu_set_bypass+0x18>
        return 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e0b2      	b.n	8001d96 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d050      	beq.n	8001cd8 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001c36:	4b5a      	ldr	r3, [pc, #360]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	7818      	ldrb	r0, [r3, #0]
 8001c3c:	4b58      	ldr	r3, [pc, #352]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	7919      	ldrb	r1, [r3, #4]
 8001c42:	f107 030f 	add.w	r3, r7, #15
 8001c46:	2201      	movs	r2, #1
 8001c48:	f7ff f8ce 	bl	8000de8 <i2c_read>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <mpu_set_bypass+0x40>
            return -1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e09e      	b.n	8001d96 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	f023 0320 	bic.w	r3, r3, #32
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001c62:	4b4f      	ldr	r3, [pc, #316]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	7818      	ldrb	r0, [r3, #0]
 8001c68:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	7919      	ldrb	r1, [r3, #4]
 8001c6e:	f107 030f 	add.w	r3, r7, #15
 8001c72:	2201      	movs	r2, #1
 8001c74:	f7ff f896 	bl	8000da4 <i2c_write>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <mpu_set_bypass+0x6c>
            return -1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e088      	b.n	8001d96 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f004 f98d 	bl	8005fa4 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8001c8e:	4b44      	ldr	r3, [pc, #272]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001c90:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001ca4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	7818      	ldrb	r0, [r3, #0]
 8001cbc:	4b38      	ldr	r3, [pc, #224]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	7dd9      	ldrb	r1, [r3, #23]
 8001cc2:	f107 030f 	add.w	r3, r7, #15
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f7ff f86c 	bl	8000da4 <i2c_write>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d05d      	beq.n	8001d8e <mpu_set_bypass+0x176>
            return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e05e      	b.n	8001d96 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001cd8:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	7818      	ldrb	r0, [r3, #0]
 8001cde:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	7919      	ldrb	r1, [r3, #4]
 8001ce4:	f107 030f 	add.w	r3, r7, #15
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f7ff f87d 	bl	8000de8 <i2c_read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <mpu_set_bypass+0xe2>
            return -1;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	e04d      	b.n	8001d96 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001cfa:	4b29      	ldr	r3, [pc, #164]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001cfc:	7a9b      	ldrb	r3, [r3, #10]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e004      	b.n	8001d1c <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	f023 0320 	bic.w	r3, r3, #32
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001d1c:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	7818      	ldrb	r0, [r3, #0]
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	7919      	ldrb	r1, [r3, #4]
 8001d28:	f107 030f 	add.w	r3, r7, #15
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f7ff f839 	bl	8000da4 <i2c_write>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <mpu_set_bypass+0x126>
            return -1;
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3c:	e02b      	b.n	8001d96 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f004 f930 	bl	8005fa4 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001d46:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e001      	b.n	8001d58 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001d5a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	7dd9      	ldrb	r1, [r3, #23]
 8001d78:	f107 030f 	add.w	r3, r7, #15
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f7ff f811 	bl	8000da4 <i2c_write>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <mpu_set_bypass+0x176>
            return -1;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e003      	b.n	8001d96 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <mpu_set_bypass+0x188>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	7493      	strb	r3, [r2, #18]
    return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <mpu_set_int_latched+0x84>)
 8001db0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001db4:	79fa      	ldrb	r2, [r7, #7]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d101      	bne.n	8001dbe <mpu_set_int_latched+0x1a>
        return 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e030      	b.n	8001e20 <mpu_set_int_latched+0x7c>

    if (enable)
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001dc4:	2330      	movs	r3, #48	@ 0x30
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <mpu_set_int_latched+0x84>)
 8001dd0:	7c9b      	ldrb	r3, [r3, #18]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <mpu_set_int_latched+0x84>)
 8001de2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <mpu_set_int_latched+0x84>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	7818      	ldrb	r0, [r3, #0]
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <mpu_set_int_latched+0x84>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	7dd9      	ldrb	r1, [r3, #23]
 8001e00:	f107 030f 	add.w	r3, r7, #15
 8001e04:	2201      	movs	r2, #1
 8001e06:	f7fe ffcd 	bl	8000da4 <i2c_write>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <mpu_set_int_latched+0x72>
        return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	e004      	b.n	8001e20 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <mpu_set_int_latched+0x84>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000

08001e2c <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8001e34:	4b41      	ldr	r3, [pc, #260]	@ (8001f3c <get_accel_prod_shift+0x110>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	7818      	ldrb	r0, [r3, #0]
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	2204      	movs	r2, #4
 8001e40:	210d      	movs	r1, #13
 8001e42:	f7fe ffd1 	bl	8000de8 <i2c_read>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <get_accel_prod_shift+0x24>
        return 0x07;
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	e071      	b.n	8001f34 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8001e50:	7c3b      	ldrb	r3, [r7, #16]
 8001e52:	10db      	asrs	r3, r3, #3
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	f003 031c 	and.w	r3, r3, #28
 8001e5a:	b25a      	sxtb	r2, r3
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	111b      	asrs	r3, r3, #4
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8001e70:	7c7b      	ldrb	r3, [r7, #17]
 8001e72:	10db      	asrs	r3, r3, #3
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	f003 031c 	and.w	r3, r3, #28
 8001e7a:	b25a      	sxtb	r2, r3
 8001e7c:	7cfb      	ldrb	r3, [r7, #19]
 8001e7e:	109b      	asrs	r3, r3, #2
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8001e90:	7cbb      	ldrb	r3, [r7, #18]
 8001e92:	10db      	asrs	r3, r3, #3
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	f003 031c 	and.w	r3, r3, #28
 8001e9a:	b25a      	sxtb	r2, r3
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
 8001eb2:	e03b      	b.n	8001f2c <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	443b      	add	r3, r7
 8001eba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
            continue;
 8001ed0:	e029      	b.n	8001f26 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <get_accel_prod_shift+0x114>)
 8001edc:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8001ede:	e00f      	b.n	8001f00 <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001f44 <get_accel_prod_shift+0x118>
 8001ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efc:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	f103 0218 	add.w	r2, r3, #24
 8001f06:	443a      	add	r2, r7
 8001f08:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	b2d1      	uxtb	r1, r2
 8001f10:	f103 0218 	add.w	r2, r3, #24
 8001f14:	443a      	add	r2, r7
 8001f16:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	443b      	add	r3, r7
 8001f1e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1dc      	bne.n	8001ee0 <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	75fb      	strb	r3, [r7, #23]
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d9c0      	bls.n	8001eb4 <get_accel_prod_shift+0x88>
    }
    return 0;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	3eae147b 	.word	0x3eae147b
 8001f44:	3f845a1d 	.word	0x3f845a1d

08001f48 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff66 	bl	8001e2c <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f64:	e063      	b.n	800202e <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	440b      	add	r3, r1
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bfb8      	it	lt
 8001f80:	425b      	neglt	r3, r3
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8a:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002040 <accel_self_test+0xf8>
 8001f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f92:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3328      	adds	r3, #40	@ 0x28
 8001f9c:	443b      	add	r3, r7
 8001f9e:	3b1c      	subs	r3, #28
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d023      	beq.n	8001ff6 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	3328      	adds	r3, #40	@ 0x28
 8001fb4:	443b      	add	r3, r7
 8001fb6:	3b1c      	subs	r3, #28
 8001fb8:	ed93 7a00 	vldr	s14, [r3]
 8001fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fcc:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8001fd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd4:	eef0 7ae7 	vabs.f32	s15, s15
 8001fd8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002044 <accel_self_test+0xfc>
 8001fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	dd20      	ble.n	8002028 <accel_self_test+0xe0>
                result |= 1 << jj;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	6a3a      	ldr	r2, [r7, #32]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	e018      	b.n	8002028 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 8001ff6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002048 <accel_self_test+0x100>
 8001ffa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002006:	d408      	bmi.n	800201a <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002008:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800204c <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 800200c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	dd06      	ble.n	8002028 <accel_self_test+0xe0>
            result |= 1 << jj;
 800201a:	2201      	movs	r2, #1
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	6a3a      	ldr	r2, [r7, #32]
 8002024:	4313      	orrs	r3, r2
 8002026:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	3301      	adds	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	2b02      	cmp	r3, #2
 8002032:	dd98      	ble.n	8001f66 <accel_self_test+0x1e>
    }

    return result;
 8002034:	6a3b      	ldr	r3, [r7, #32]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	47800000 	.word	0x47800000
 8002044:	3e0f5c29 	.word	0x3e0f5c29
 8002048:	3e99999a 	.word	0x3e99999a
 800204c:	3f733333 	.word	0x3f733333

08002050 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 800205e:	4b55      	ldr	r3, [pc, #340]	@ (80021b4 <gyro_self_test+0x164>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	7818      	ldrb	r0, [r3, #0]
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	2203      	movs	r2, #3
 800206a:	210d      	movs	r1, #13
 800206c:	f7fe febc 	bl	8000de8 <i2c_read>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <gyro_self_test+0x2a>
        return 0x07;
 8002076:	2307      	movs	r3, #7
 8002078:	e097      	b.n	80021aa <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 800207a:	7a3b      	ldrb	r3, [r7, #8]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	b2db      	uxtb	r3, r3
 8002082:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8002084:	7a7b      	ldrb	r3, [r7, #9]
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	b2db      	uxtb	r3, r3
 800208c:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 800208e:	7abb      	ldrb	r3, [r7, #10]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	b2db      	uxtb	r3, r3
 8002096:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	e080      	b.n	80021a0 <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	440b      	add	r3, r1
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bfb8      	it	lt
 80020b8:	425b      	neglt	r3, r3
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80021b8 <gyro_self_test+0x168>
 80020c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ca:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 80020ce:	f107 0208 	add.w	r2, r7, #8
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d045      	beq.n	8002168 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 80020dc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80021bc <gyro_self_test+0x16c>
 80020e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80021c0 <gyro_self_test+0x170>
 80020e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ec:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 80020f0:	e007      	b.n	8002102 <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 80020f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80021c4 <gyro_self_test+0x174>
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002102:	f107 0208 	add.w	r2, r7, #8
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3b01      	subs	r3, #1
 800210e:	b2d9      	uxtb	r1, r3
 8002110:	f107 0208 	add.w	r2, r7, #8
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	460a      	mov	r2, r1
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e3      	bne.n	80020f2 <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 800212a:	edd7 6a04 	vldr	s13, [r7, #16]
 800212e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800213a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800213e:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8002142:	edd7 7a03 	vldr	s15, [r7, #12]
 8002146:	eef0 7ae7 	vabs.f32	s15, s15
 800214a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80021c8 <gyro_self_test+0x178>
 800214e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	dd20      	ble.n	800219a <gyro_self_test+0x14a>
                result |= 1 << jj;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	e018      	b.n	800219a <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002168:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800216c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	d408      	bmi.n	800218c <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 800217a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80021cc <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 800217e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	dd06      	ble.n	800219a <gyro_self_test+0x14a>
            result |= 1 << jj;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	f77f af7b 	ble.w	800209e <gyro_self_test+0x4e>
    }
    return result;
 80021a8:	69bb      	ldr	r3, [r7, #24]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000
 80021b8:	47800000 	.word	0x47800000
 80021bc:	00000083 	.word	0x00000083
 80021c0:	454cb000 	.word	0x454cb000
 80021c4:	3f85e354 	.word	0x3f85e354
 80021c8:	3e0f5c29 	.word	0x3e0f5c29
 80021cc:	42d20000 	.word	0x42d20000

080021d0 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80021d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d4:	b0b8      	sub	sp, #224	@ 0xe0
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80021dc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80021e0:	4613      	mov	r3, r2
 80021e2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 80021f2:	4ba5      	ldr	r3, [pc, #660]	@ (8002488 <get_st_biases+0x2b8>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	7818      	ldrb	r0, [r3, #0]
 80021f8:	4ba3      	ldr	r3, [pc, #652]	@ (8002488 <get_st_biases+0x2b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	7d59      	ldrb	r1, [r3, #21]
 80021fe:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002202:	2202      	movs	r2, #2
 8002204:	f7fe fdce 	bl	8000da4 <i2c_write>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <get_st_biases+0x44>
        return -1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	e34b      	b.n	80028ac <get_st_biases+0x6dc>
    delay_ms(200);
 8002214:	20c8      	movs	r0, #200	@ 0xc8
 8002216:	f003 fec5 	bl	8005fa4 <HAL_Delay>
    data[0] = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8002220:	4b99      	ldr	r3, [pc, #612]	@ (8002488 <get_st_biases+0x2b8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	7818      	ldrb	r0, [r3, #0]
 8002226:	4b98      	ldr	r3, [pc, #608]	@ (8002488 <get_st_biases+0x2b8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	7c59      	ldrb	r1, [r3, #17]
 800222c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002230:	2201      	movs	r2, #1
 8002232:	f7fe fdb7 	bl	8000da4 <i2c_write>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <get_st_biases+0x72>
        return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295
 8002240:	e334      	b.n	80028ac <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002242:	4b91      	ldr	r3, [pc, #580]	@ (8002488 <get_st_biases+0x2b8>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	7818      	ldrb	r0, [r3, #0]
 8002248:	4b8f      	ldr	r3, [pc, #572]	@ (8002488 <get_st_biases+0x2b8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	7959      	ldrb	r1, [r3, #5]
 800224e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002252:	2201      	movs	r2, #1
 8002254:	f7fe fda6 	bl	8000da4 <i2c_write>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <get_st_biases+0x94>
        return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	e323      	b.n	80028ac <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002264:	4b88      	ldr	r3, [pc, #544]	@ (8002488 <get_st_biases+0x2b8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	7818      	ldrb	r0, [r3, #0]
 800226a:	4b87      	ldr	r3, [pc, #540]	@ (8002488 <get_st_biases+0x2b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	7d59      	ldrb	r1, [r3, #21]
 8002270:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002274:	2201      	movs	r2, #1
 8002276:	f7fe fd95 	bl	8000da4 <i2c_write>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <get_st_biases+0xb6>
        return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	e312      	b.n	80028ac <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8002286:	4b80      	ldr	r3, [pc, #512]	@ (8002488 <get_st_biases+0x2b8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	7818      	ldrb	r0, [r3, #0]
 800228c:	4b7e      	ldr	r3, [pc, #504]	@ (8002488 <get_st_biases+0x2b8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	7e99      	ldrb	r1, [r3, #26]
 8002292:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002296:	2201      	movs	r2, #1
 8002298:	f7fe fd84 	bl	8000da4 <i2c_write>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <get_st_biases+0xd8>
        return -1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e301      	b.n	80028ac <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80022a8:	4b77      	ldr	r3, [pc, #476]	@ (8002488 <get_st_biases+0x2b8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	7818      	ldrb	r0, [r3, #0]
 80022ae:	4b76      	ldr	r3, [pc, #472]	@ (8002488 <get_st_biases+0x2b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	7919      	ldrb	r1, [r3, #4]
 80022b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80022b8:	2201      	movs	r2, #1
 80022ba:	f7fe fd73 	bl	8000da4 <i2c_write>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <get_st_biases+0xfa>
        return -1;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	e2f0      	b.n	80028ac <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 80022ca:	230c      	movs	r3, #12
 80022cc:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80022d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002488 <get_st_biases+0x2b8>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	7818      	ldrb	r0, [r3, #0]
 80022d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002488 <get_st_biases+0x2b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	7919      	ldrb	r1, [r3, #4]
 80022dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80022e0:	2201      	movs	r2, #1
 80022e2:	f7fe fd5f 	bl	8000da4 <i2c_write>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <get_st_biases+0x122>
        return -1;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	e2dc      	b.n	80028ac <get_st_biases+0x6dc>
    delay_ms(15);
 80022f2:	200f      	movs	r0, #15
 80022f4:	f003 fe56 	bl	8005fa4 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 80022f8:	4b63      	ldr	r3, [pc, #396]	@ (8002488 <get_st_biases+0x2b8>)
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	7a5b      	ldrb	r3, [r3, #9]
 80022fe:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8002302:	4b61      	ldr	r3, [pc, #388]	@ (8002488 <get_st_biases+0x2b8>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	7818      	ldrb	r0, [r3, #0]
 8002308:	4b5f      	ldr	r3, [pc, #380]	@ (8002488 <get_st_biases+0x2b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	7899      	ldrb	r1, [r3, #2]
 800230e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002312:	2201      	movs	r2, #1
 8002314:	f7fe fd46 	bl	8000da4 <i2c_write>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <get_st_biases+0x154>
        return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	e2c3      	b.n	80028ac <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8002324:	4b58      	ldr	r3, [pc, #352]	@ (8002488 <get_st_biases+0x2b8>)
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	7a1b      	ldrb	r3, [r3, #8]
 800232a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800232e:	4b56      	ldr	r3, [pc, #344]	@ (8002488 <get_st_biases+0x2b8>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	7818      	ldrb	r0, [r3, #0]
 8002334:	4b54      	ldr	r3, [pc, #336]	@ (8002488 <get_st_biases+0x2b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	7859      	ldrb	r1, [r3, #1]
 800233a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800233e:	2201      	movs	r2, #1
 8002340:	f7fe fd30 	bl	8000da4 <i2c_write>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <get_st_biases+0x180>
        return -1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e2ad      	b.n	80028ac <get_st_biases+0x6dc>
    if (hw_test)
 8002350:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8002358:	4b4b      	ldr	r3, [pc, #300]	@ (8002488 <get_st_biases+0x2b8>)
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	7a9b      	ldrb	r3, [r3, #10]
 800235e:	f063 031f 	orn	r3, r3, #31
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8002368:	e004      	b.n	8002374 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <get_st_biases+0x2b8>)
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	7a9b      	ldrb	r3, [r3, #10]
 8002370:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8002374:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <get_st_biases+0x2b8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	7818      	ldrb	r0, [r3, #0]
 800237a:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <get_st_biases+0x2b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	7999      	ldrb	r1, [r3, #6]
 8002380:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002384:	2201      	movs	r2, #1
 8002386:	f7fe fd0d 	bl	8000da4 <i2c_write>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <get_st_biases+0x1c6>
        return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	e28a      	b.n	80028ac <get_st_biases+0x6dc>

    if (hw_test)
 8002396:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800239e:	4b3a      	ldr	r3, [pc, #232]	@ (8002488 <get_st_biases+0x2b8>)
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	7adb      	ldrb	r3, [r3, #11]
 80023a4:	f063 031f 	orn	r3, r3, #31
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 80023ae:	e002      	b.n	80023b6 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 80023b0:	2318      	movs	r3, #24
 80023b2:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 80023b6:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <get_st_biases+0x2b8>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	7818      	ldrb	r0, [r3, #0]
 80023bc:	4b32      	ldr	r3, [pc, #200]	@ (8002488 <get_st_biases+0x2b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	79d9      	ldrb	r1, [r3, #7]
 80023c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023c6:	2201      	movs	r2, #1
 80023c8:	f7fe fcec 	bl	8000da4 <i2c_write>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <get_st_biases+0x208>
        return -1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	e269      	b.n	80028ac <get_st_biases+0x6dc>
    if (hw_test)
 80023d8:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <get_st_biases+0x216>
        delay_ms(200);
 80023e0:	20c8      	movs	r0, #200	@ 0xc8
 80023e2:	f003 fddf 	bl	8005fa4 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 80023e6:	2340      	movs	r3, #64	@ 0x40
 80023e8:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80023ec:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <get_st_biases+0x2b8>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	7818      	ldrb	r0, [r3, #0]
 80023f2:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <get_st_biases+0x2b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	7919      	ldrb	r1, [r3, #4]
 80023f8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023fc:	2201      	movs	r2, #1
 80023fe:	f7fe fcd1 	bl	8000da4 <i2c_write>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <get_st_biases+0x23e>
        return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	e24e      	b.n	80028ac <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800240e:	2378      	movs	r3, #120	@ 0x78
 8002410:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002414:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <get_st_biases+0x2b8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	7818      	ldrb	r0, [r3, #0]
 800241a:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <get_st_biases+0x2b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	7959      	ldrb	r1, [r3, #5]
 8002420:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002424:	2201      	movs	r2, #1
 8002426:	f7fe fcbd 	bl	8000da4 <i2c_write>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <get_st_biases+0x266>
        return -1;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	e23a      	b.n	80028ac <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 8002436:	2332      	movs	r3, #50	@ 0x32
 8002438:	4618      	mov	r0, r3
 800243a:	f003 fdb3 	bl	8005fa4 <HAL_Delay>
    data[0] = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002444:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <get_st_biases+0x2b8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	7818      	ldrb	r0, [r3, #0]
 800244a:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <get_st_biases+0x2b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	7959      	ldrb	r1, [r3, #5]
 8002450:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002454:	2201      	movs	r2, #1
 8002456:	f7fe fca5 	bl	8000da4 <i2c_write>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <get_st_biases+0x296>
        return -1;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
 8002464:	e222      	b.n	80028ac <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <get_st_biases+0x2b8>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	7818      	ldrb	r0, [r3, #0]
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <get_st_biases+0x2b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	7b19      	ldrb	r1, [r3, #12]
 8002472:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002476:	2202      	movs	r2, #2
 8002478:	f7fe fcb6 	bl	8000de8 <i2c_read>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <get_st_biases+0x2bc>
        return -1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e211      	b.n	80028ac <get_st_biases+0x6dc>
 8002488:	20000000 	.word	0x20000000

    fifo_count = (data[0] << 8) | data[1];
 800248c:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21a      	sxth	r2, r3
 8002494:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 80024a2:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <get_st_biases+0x34c>)
 80024a8:	fba3 2302 	umull	r2, r3, r3, r2
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 80024b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024b8:	f103 0108 	add.w	r1, r3, #8
 80024bc:	2300      	movs	r3, #0
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024c4:	1d1a      	adds	r2, r3, #4
 80024c6:	680b      	ldr	r3, [r1, #0]
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024d0:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 80024d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024d6:	f103 0108 	add.w	r1, r3, #8
 80024da:	2300      	movs	r3, #0
 80024dc:	600b      	str	r3, [r1, #0]
 80024de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	680b      	ldr	r3, [r1, #0]
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ee:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80024f6:	e0a0      	b.n	800263a <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <get_st_biases+0x350>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	7818      	ldrb	r0, [r3, #0]
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <get_st_biases+0x350>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	7b59      	ldrb	r1, [r3, #13]
 8002504:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002508:	220c      	movs	r2, #12
 800250a:	f7fe fc6d 	bl	8000de8 <i2c_read>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <get_st_biases+0x354>
            return -1;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
 8002518:	e1c8      	b.n	80028ac <get_st_biases+0x6dc>
 800251a:	bf00      	nop
 800251c:	aaaaaaab 	.word	0xaaaaaaab
 8002520:	20000000 	.word	0x20000000
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8002524:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	b21a      	sxth	r2, r3
 800252c:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002530:	b21b      	sxth	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	b21b      	sxth	r3, r3
 8002536:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800253a:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	b21a      	sxth	r2, r3
 8002542:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002546:	b21b      	sxth	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	b21b      	sxth	r3, r3
 800254c:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8002550:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	b21a      	sxth	r2, r3
 8002558:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b21b      	sxth	r3, r3
 8002562:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 8002566:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002570:	441a      	add	r2, r3
 8002572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002576:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8002578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800257c:	3304      	adds	r3, #4
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002584:	4618      	mov	r0, r3
 8002586:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	180b      	adds	r3, r1, r0
 800258e:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8002590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002594:	3308      	adds	r3, #8
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 800259c:	4618      	mov	r0, r3
 800259e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025a2:	f103 0208 	add.w	r2, r3, #8
 80025a6:	180b      	adds	r3, r1, r0
 80025a8:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 80025aa:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 80025c0:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	b21a      	sxth	r2, r3
 80025c8:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	4313      	orrs	r3, r2
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 80025d6:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	b21a      	sxth	r2, r3
 80025de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 80025ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 80025f6:	441a      	add	r2, r3
 80025f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025fc:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 80025fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002602:	3304      	adds	r3, #4
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 800260a:	4618      	mov	r0, r3
 800260c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002610:	1d1a      	adds	r2, r3, #4
 8002612:	180b      	adds	r3, r1, r0
 8002614:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8002616:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800261a:	3308      	adds	r3, #8
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002622:	4618      	mov	r0, r3
 8002624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002628:	f103 0208 	add.w	r2, r3, #8
 800262c:	180b      	adds	r3, r1, r0
 800262e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8002630:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002634:	3301      	adds	r3, #1
 8002636:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800263a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800263e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002642:	429a      	cmp	r2, r3
 8002644:	f4ff af58 	bcc.w	80024f8 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8002648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	17da      	asrs	r2, r3, #31
 8002650:	461c      	mov	r4, r3
 8002652:	4615      	mov	r5, r2
 8002654:	1423      	asrs	r3, r4, #16
 8002656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800265a:	0423      	lsls	r3, r4, #16
 800265c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002660:	2283      	movs	r2, #131	@ 0x83
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800266c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002670:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002674:	f7fe f9ce 	bl	8000a14 <__aeabi_ldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800268a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800268e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002692:	f7fe f9bf 	bl	8000a14 <__aeabi_ldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800269e:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 80026a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026a4:	3304      	adds	r3, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	17da      	asrs	r2, r3, #31
 80026aa:	4698      	mov	r8, r3
 80026ac:	4691      	mov	r9, r2
 80026ae:	ea4f 4328 	mov.w	r3, r8, asr #16
 80026b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80026b6:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80026ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026be:	2283      	movs	r2, #131	@ 0x83
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80026c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026ca:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80026ce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80026d2:	f7fe f99f 	bl	8000a14 <__aeabi_ldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80026e2:	2200      	movs	r2, #0
 80026e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80026ec:	f7fe f992 	bl	8000a14 <__aeabi_ldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026fc:	1d1a      	adds	r2, r3, #4
 80026fe:	4603      	mov	r3, r0
 8002700:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8002702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002706:	3308      	adds	r3, #8
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	17da      	asrs	r2, r3, #31
 800270c:	469a      	mov	sl, r3
 800270e:	4693      	mov	fp, r2
 8002710:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002714:	677b      	str	r3, [r7, #116]	@ 0x74
 8002716:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800271a:	673b      	str	r3, [r7, #112]	@ 0x70
 800271c:	2283      	movs	r2, #131	@ 0x83
 800271e:	2300      	movs	r3, #0
 8002720:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002722:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002724:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002728:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800272c:	f7fe f972 	bl	8000a14 <__aeabi_ldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800273c:	2200      	movs	r2, #0
 800273e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002740:	667a      	str	r2, [r7, #100]	@ 0x64
 8002742:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002746:	f7fe f965 	bl	8000a14 <__aeabi_ldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002756:	f103 0208 	add.w	r2, r3, #8
 800275a:	4603      	mov	r3, r0
 800275c:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800275e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	17da      	asrs	r2, r3, #31
 8002766:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002768:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800276a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800276e:	460b      	mov	r3, r1
 8002770:	141b      	asrs	r3, r3, #16
 8002772:	657b      	str	r3, [r7, #84]	@ 0x54
 8002774:	460b      	mov	r3, r1
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	653b      	str	r3, [r7, #80]	@ 0x50
 800277a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800277e:	2300      	movs	r3, #0
 8002780:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002784:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002788:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800278c:	f7fe f942 	bl	8000a14 <__aeabi_ldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800279c:	2200      	movs	r2, #0
 800279e:	643b      	str	r3, [r7, #64]	@ 0x40
 80027a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80027a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027a6:	f7fe f935 	bl	8000a14 <__aeabi_ldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027b2:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80027b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027b8:	3304      	adds	r3, #4
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	17da      	asrs	r2, r3, #31
 80027be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80027c6:	460b      	mov	r3, r1
 80027c8:	141b      	asrs	r3, r3, #16
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80027cc:	460b      	mov	r3, r1
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027d6:	2300      	movs	r3, #0
 80027d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80027e4:	f7fe f916 	bl	8000a14 <__aeabi_ldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80027f4:	2200      	movs	r2, #0
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80027fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027fe:	f7fe f909 	bl	8000a14 <__aeabi_ldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800280e:	3304      	adds	r3, #4
 8002810:	4602      	mov	r2, r0
 8002812:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8002814:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002818:	3308      	adds	r3, #8
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	17da      	asrs	r2, r3, #31
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	61fa      	str	r2, [r7, #28]
 8002822:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002826:	460b      	mov	r3, r1
 8002828:	141b      	asrs	r3, r3, #16
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	460b      	mov	r3, r1
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002836:	2300      	movs	r3, #0
 8002838:	60ba      	str	r2, [r7, #8]
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002840:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002844:	f7fe f8e6 	bl	8000a14 <__aeabi_ldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002854:	2200      	movs	r2, #0
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800285e:	f7fe f8d9 	bl	8000a14 <__aeabi_ldivmod>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800286e:	3308      	adds	r3, #8
 8002870:	4602      	mov	r2, r0
 8002872:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8002874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002878:	3308      	adds	r3, #8
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	dd0a      	ble.n	8002896 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 8002880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002884:	3308      	adds	r3, #8
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800288c:	3308      	adds	r3, #8
 800288e:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e009      	b.n	80028aa <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 8002896:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800289a:	3308      	adds	r3, #8
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028a2:	3308      	adds	r3, #8
 80028a4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 80028a8:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	37e0      	adds	r7, #224	@ 0xe0
 80028b0:	46bd      	mov	sp, r7
 80028b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b6:	bf00      	nop

080028b8 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	@ 0x38
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 80028c2:	2302      	movs	r3, #2
 80028c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 80028c8:	4b68      	ldr	r3, [pc, #416]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 80028ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f000 f9ee 	bl	8002cb4 <mpu_set_dmp_state>
        dmp_was_on = 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80028de:	e002      	b.n	80028e6 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fd80 	bl	80013f0 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 80028f0:	f107 030f 	add.w	r3, r7, #15
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fe03 	bl	8001500 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 80028fa:	f107 0308 	add.w	r3, r7, #8
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fea0 	bl	8001644 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002904:	f107 030a 	add.w	r3, r7, #10
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe ff27 	bl	800175c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800290e:	4b57      	ldr	r3, [pc, #348]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 8002910:	7a9b      	ldrb	r3, [r3, #10]
 8002912:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8002916:	f107 030e 	add.w	r3, r7, #14
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f814 	bl	8001948 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8002920:	2300      	movs	r3, #0
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
 8002924:	e00a      	b.n	800293c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8002926:	2200      	movs	r2, #0
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fc50 	bl	80021d0 <get_st_biases>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8002936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002938:	3301      	adds	r3, #1
 800293a:	637b      	str	r3, [r7, #52]	@ 0x34
 800293c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002942:	429a      	cmp	r2, r3
 8002944:	dbef      	blt.n	8002926 <mpu_run_self_test+0x6e>
 8002946:	e000      	b.n	800294a <mpu_run_self_test+0x92>
            break;
 8002948:	bf00      	nop
    if (ii == tries) {
 800294a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800294e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002950:	429a      	cmp	r2, r3
 8002952:	d102      	bne.n	800295a <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002958:	e045      	b.n	80029e6 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
 800295e:	e00d      	b.n	800297c <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002960:	f107 0110 	add.w	r1, r7, #16
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	2201      	movs	r2, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fc30 	bl	80021d0 <get_st_biases>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8002976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002978:	3301      	adds	r3, #1
 800297a:	637b      	str	r3, [r7, #52]	@ 0x34
 800297c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002980:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002982:	429a      	cmp	r2, r3
 8002984:	dbec      	blt.n	8002960 <mpu_run_self_test+0xa8>
 8002986:	e000      	b.n	800298a <mpu_run_self_test+0xd2>
            break;
 8002988:	bf00      	nop
    if (ii == tries) {
 800298a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800298e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002990:	429a      	cmp	r2, r3
 8002992:	d102      	bne.n	800299a <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002998:	e025      	b.n	80029e6 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4619      	mov	r1, r3
 80029a0:	6838      	ldr	r0, [r7, #0]
 80029a2:	f7ff fad1 	bl	8001f48 <accel_self_test>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fb4c 	bl	8002050 <gyro_self_test>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 80029c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <mpu_run_self_test+0x11a>
        result |= 0x01;
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 80029d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <mpu_run_self_test+0x12c>
        result |= 0x02;
 80029da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029e2:	e000      	b.n	80029e6 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 80029e4:	bf00      	nop
#if defined MPU6050
    /* For now, this function will return a "pass" result for all three sensors
     * for compatibility with current test applications.
     */
    get_st_biases(gyro, accel, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fbf0 	bl	80021d0 <get_st_biases>
    result = 0x7;
 80029f0:	2307      	movs	r3, #7
 80029f2:	633b      	str	r3, [r7, #48]	@ 0x30
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 80029f6:	22ff      	movs	r2, #255	@ 0xff
 80029f8:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 80029fc:	22ff      	movs	r2, #255	@ 0xff
 80029fe:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 8002a02:	22ff      	movs	r2, #255	@ 0xff
 8002a04:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8002a06:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 8002a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a0c:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8002a0e:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 8002a10:	22ff      	movs	r2, #255	@ 0xff
 8002a12:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8002a14:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 8002a16:	22ff      	movs	r2, #255	@ 0xff
 8002a18:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <mpu_run_self_test+0x1b4>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fd18 	bl	8001458 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fda2 	bl	8001574 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8002a30:	893b      	ldrh	r3, [r7, #8]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fe44 	bl	80016c0 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8002a38:	897b      	ldrh	r3, [r7, #10]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fea8 	bl	8001790 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8002a40:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe ffe3 	bl	8001a10 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8002a4a:	7bbb      	ldrb	r3, [r7, #14]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe ff8d 	bl	800196c <mpu_configure_fifo>

    if (dmp_was_on)
 8002a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <mpu_run_self_test+0x1a8>
        mpu_set_dmp_state(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f000 f92a 	bl	8002cb4 <mpu_set_dmp_state>

    return result;
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3738      	adds	r7, #56	@ 0x38
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000

08002a70 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	603a      	str	r2, [r7, #0]
 8002a7a:	80fb      	strh	r3, [r7, #6]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <mpu_write_mem+0x1c>
        return -1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e03d      	b.n	8002b08 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8002a8c:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <mpu_write_mem+0xa0>)
 8002a8e:	7a9b      	ldrb	r3, [r3, #10]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <mpu_write_mem+0x2a>
        return -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
 8002a98:	e036      	b.n	8002b08 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002aaa:	7b7b      	ldrb	r3, [r7, #13]
 8002aac:	461a      	mov	r2, r3
 8002aae:	88bb      	ldrh	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a17      	ldr	r2, [pc, #92]	@ (8002b10 <mpu_write_mem+0xa0>)
 8002ab4:	6852      	ldr	r2, [r2, #4]
 8002ab6:	8952      	ldrh	r2, [r2, #10]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	dd02      	ble.n	8002ac2 <mpu_write_mem+0x52>
        return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	e022      	b.n	8002b08 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8002ac2:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <mpu_write_mem+0xa0>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	7818      	ldrb	r0, [r3, #0]
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <mpu_write_mem+0xa0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	7ed9      	ldrb	r1, [r3, #27]
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f7fe f966 	bl	8000da4 <i2c_write>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <mpu_write_mem+0x74>
        return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e011      	b.n	8002b08 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <mpu_write_mem+0xa0>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	7818      	ldrb	r0, [r3, #0]
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <mpu_write_mem+0xa0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	7e19      	ldrb	r1, [r3, #24]
 8002af0:	88bb      	ldrh	r3, [r7, #4]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f7fe f955 	bl	8000da4 <i2c_write>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <mpu_write_mem+0x96>
        return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	e000      	b.n	8002b08 <mpu_write_mem+0x98>
    return 0;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000000 	.word	0x20000000

08002b14 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	603a      	str	r2, [r7, #0]
 8002b1e:	80fb      	strh	r3, [r7, #6]
 8002b20:	460b      	mov	r3, r1
 8002b22:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <mpu_read_mem+0x1c>
        return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e03d      	b.n	8002bac <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <mpu_read_mem+0xa0>)
 8002b32:	7a9b      	ldrb	r3, [r3, #10]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <mpu_read_mem+0x2a>
        return -1;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3c:	e036      	b.n	8002bac <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002b4e:	7b7b      	ldrb	r3, [r7, #13]
 8002b50:	461a      	mov	r2, r3
 8002b52:	88bb      	ldrh	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <mpu_read_mem+0xa0>)
 8002b58:	6852      	ldr	r2, [r2, #4]
 8002b5a:	8952      	ldrh	r2, [r2, #10]
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	dd02      	ble.n	8002b66 <mpu_read_mem+0x52>
        return -1;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
 8002b64:	e022      	b.n	8002bac <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <mpu_read_mem+0xa0>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	7818      	ldrb	r0, [r3, #0]
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <mpu_read_mem+0xa0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	7ed9      	ldrb	r1, [r3, #27]
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	2202      	movs	r2, #2
 8002b78:	f7fe f914 	bl	8000da4 <i2c_write>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <mpu_read_mem+0x74>
        return -1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	e011      	b.n	8002bac <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8002b88:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <mpu_read_mem+0xa0>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	7818      	ldrb	r0, [r3, #0]
 8002b8e:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <mpu_read_mem+0xa0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	7e19      	ldrb	r1, [r3, #24]
 8002b94:	88bb      	ldrh	r3, [r7, #4]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f7fe f925 	bl	8000de8 <i2c_read>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <mpu_read_mem+0x96>
        return -1;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba8:	e000      	b.n	8002bac <mpu_read_mem+0x98>
    return 0;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	81fb      	strh	r3, [r7, #14]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	81bb      	strh	r3, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8002bd0:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <mpu_load_firmware+0xf8>)
 8002bd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e062      	b.n	8002ca6 <mpu_load_firmware+0xee>

    if (!firmware)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <mpu_load_firmware+0x34>
        return -1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e05c      	b.n	8002ca6 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002bf0:	e034      	b.n	8002c5c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	bfa8      	it	ge
 8002bfc:	2310      	movge	r3, #16
 8002bfe:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8002c00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	441a      	add	r2, r3
 8002c06:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002c08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff30 	bl	8002a70 <mpu_write_mem>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <mpu_load_firmware+0x64>
            return -1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1a:	e044      	b.n	8002ca6 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8002c1c:	f107 0214 	add.w	r2, r7, #20
 8002c20:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002c22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff75 	bl	8002b14 <mpu_read_mem>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <mpu_load_firmware+0x7e>
            return -1;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
 8002c34:	e037      	b.n	8002ca6 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8002c36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c3e:	f107 0114 	add.w	r1, r7, #20
 8002c42:	4618      	mov	r0, r3
 8002c44:	f007 fbc0 	bl	800a3c8 <memcmp>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <mpu_load_firmware+0x9c>
            return -2;
 8002c4e:	f06f 0301 	mvn.w	r3, #1
 8002c52:	e028      	b.n	8002ca6 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8002c54:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002c56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c58:	4413      	add	r3, r2
 8002c5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002c5c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d3c6      	bcc.n	8002bf2 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8002c64:	89bb      	ldrh	r3, [r7, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8002c6e:	89bb      	ldrh	r3, [r7, #12]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8002c74:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <mpu_load_firmware+0xf8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	7818      	ldrb	r0, [r3, #0]
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <mpu_load_firmware+0xf8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	7f59      	ldrb	r1, [r3, #29]
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	2202      	movs	r2, #2
 8002c86:	f7fe f88d 	bl	8000da4 <i2c_write>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <mpu_load_firmware+0xde>
        return -1;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	e007      	b.n	8002ca6 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <mpu_load_firmware+0xf8>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <mpu_load_firmware+0xf8>)
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3728      	adds	r7, #40	@ 0x28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8002cbe:	4b26      	ldr	r3, [pc, #152]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cc4:	79fa      	ldrb	r2, [r7, #7]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d101      	bne.n	8002cce <mpu_set_dmp_state+0x1a>
        return 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e040      	b.n	8002d50 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d027      	beq.n	8002d24 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8002cd4:	4b20      	ldr	r3, [pc, #128]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <mpu_set_dmp_state+0x30>
            return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e035      	b.n	8002d50 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fe f8a1 	bl	8000e2c <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7fe ff94 	bl	8001c18 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002cf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe fd4b 	bl	8001790 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	7818      	ldrb	r0, [r3, #0]
 8002d04:	f107 030f 	add.w	r3, r7, #15
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2123      	movs	r1, #35	@ 0x23
 8002d0c:	f7fe f84a 	bl	8000da4 <i2c_write>
        st.chip_cfg.dmp_on = 1;
 8002d10:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7fe f887 	bl	8000e2c <set_int_enable>
        mpu_reset_fifo();
 8002d1e:	f7fe fa63 	bl	80011e8 <mpu_reset_fifo>
 8002d22:	e014      	b.n	8002d4e <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fe f881 	bl	8000e2c <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002d2c:	7c1b      	ldrb	r3, [r3, #16]
 8002d2e:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002d30:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	7818      	ldrb	r0, [r3, #0]
 8002d36:	f107 030f 	add.w	r3, r7, #15
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2123      	movs	r1, #35	@ 0x23
 8002d3e:	f7fe f831 	bl	8000da4 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <mpu_set_dmp_state+0xa4>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 8002d4a:	f7fe fa4d 	bl	80011e8 <mpu_reset_fifo>
    }
    return 0;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000000 	.word	0x20000000

08002d5c <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8002d60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d64:	23c8      	movs	r3, #200	@ 0xc8
 8002d66:	4904      	ldr	r1, [pc, #16]	@ (8002d78 <dmp_load_motion_driver_firmware+0x1c>)
 8002d68:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8002d6c:	f7ff ff24 	bl	8002bb8 <mpu_load_firmware>
 8002d70:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	0800aa38 	.word	0x0800aa38

08002d7c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8002d86:	4a6e      	ldr	r2, [pc, #440]	@ (8002f40 <dmp_set_orientation+0x1c4>)
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	8019      	strh	r1, [r3, #0]
 8002d92:	3302      	adds	r3, #2
 8002d94:	0c12      	lsrs	r2, r2, #16
 8002d96:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8002d98:	4a6a      	ldr	r2, [pc, #424]	@ (8002f44 <dmp_set_orientation+0x1c8>)
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	4611      	mov	r1, r2
 8002da2:	8019      	strh	r1, [r3, #0]
 8002da4:	3302      	adds	r3, #2
 8002da6:	0c12      	lsrs	r2, r2, #16
 8002da8:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8002daa:	4a67      	ldr	r2, [pc, #412]	@ (8002f48 <dmp_set_orientation+0x1cc>)
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	4611      	mov	r1, r2
 8002db4:	8019      	strh	r1, [r3, #0]
 8002db6:	3302      	adds	r3, #2
 8002db8:	0c12      	lsrs	r2, r2, #16
 8002dba:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8002dbc:	4a63      	ldr	r2, [pc, #396]	@ (8002f4c <dmp_set_orientation+0x1d0>)
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	8019      	strh	r1, [r3, #0]
 8002dc8:	3302      	adds	r3, #2
 8002dca:	0c12      	lsrs	r2, r2, #16
 8002dcc:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	3320      	adds	r3, #32
 8002dd6:	443b      	add	r3, r7
 8002dd8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ddc:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	08db      	lsrs	r3, r3, #3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	3320      	adds	r3, #32
 8002dea:	443b      	add	r3, r7
 8002dec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002df0:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	3320      	adds	r3, #32
 8002dfe:	443b      	add	r3, r7
 8002e00:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e04:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	3320      	adds	r3, #32
 8002e0e:	443b      	add	r3, r7
 8002e10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e14:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	3320      	adds	r3, #32
 8002e22:	443b      	add	r3, r7
 8002e24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e28:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	3320      	adds	r3, #32
 8002e36:	443b      	add	r3, r7
 8002e38:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e3c:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	461a      	mov	r2, r3
 8002e44:	2103      	movs	r1, #3
 8002e46:	f240 4026 	movw	r0, #1062	@ 0x426
 8002e4a:	f7ff fe11 	bl	8002a70 <mpu_write_mem>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <dmp_set_orientation+0xde>
        return -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	e06e      	b.n	8002f38 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2103      	movs	r1, #3
 8002e62:	f240 402a 	movw	r0, #1066	@ 0x42a
 8002e66:	f7ff fe03 	bl	8002a70 <mpu_write_mem>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <dmp_set_orientation+0xfa>
        return -1;
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
 8002e74:	e060      	b.n	8002f38 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	f107 020c 	add.w	r2, r7, #12
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4611      	mov	r1, r2
 8002e82:	8019      	strh	r1, [r3, #0]
 8002e84:	3302      	adds	r3, #2
 8002e86:	0c12      	lsrs	r2, r2, #16
 8002e88:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8002e8a:	f107 0318 	add.w	r3, r7, #24
 8002e8e:	f107 0208 	add.w	r2, r7, #8
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	8019      	strh	r1, [r3, #0]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	0c12      	lsrs	r2, r2, #16
 8002e9c:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8002ea8:	7f3b      	ldrb	r3, [r7, #28]
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8002eb2:	7e3b      	ldrb	r3, [r7, #24]
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8002ec6:	7f7b      	ldrb	r3, [r7, #29]
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8002ed0:	7e7b      	ldrb	r3, [r7, #25]
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8002ee4:	7fbb      	ldrb	r3, [r7, #30]
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8002eee:	7ebb      	ldrb	r3, [r7, #26]
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	461a      	mov	r2, r3
 8002efe:	2103      	movs	r1, #3
 8002f00:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8002f04:	f7ff fdb4 	bl	8002a70 <mpu_write_mem>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <dmp_set_orientation+0x198>
        return -1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e011      	b.n	8002f38 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2103      	movs	r1, #3
 8002f1c:	f240 4031 	movw	r0, #1073	@ 0x431
 8002f20:	f7ff fda6 	bl	8002a70 <mpu_write_mem>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <dmp_set_orientation+0x1b4>
        return -1;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e003      	b.n	8002f38 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8002f30:	4a07      	ldr	r2, [pc, #28]	@ (8002f50 <dmp_set_orientation+0x1d4>)
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	8113      	strh	r3, [r2, #8]
    return 0;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	0800a998 	.word	0x0800a998
 8002f44:	0800a99c 	.word	0x0800a99c
 8002f48:	0800a9a0 	.word	0x0800a9a0
 8002f4c:	0800a9a4 	.word	0x0800a9a4
 8002f50:	200000b4 	.word	0x200000b4

08002f54 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b08c      	sub	sp, #48	@ 0x30
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 8002f5e:	4b80      	ldr	r3, [pc, #512]	@ (8003160 <dmp_set_gyro_bias+0x20c>)
 8002f60:	891b      	ldrh	r3, [r3, #8]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 8002f70:	4b7b      	ldr	r3, [pc, #492]	@ (8003160 <dmp_set_gyro_bias+0x20c>)
 8002f72:	891b      	ldrh	r3, [r3, #8]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	425b      	negs	r3, r3
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8002f82:	4b77      	ldr	r3, [pc, #476]	@ (8003160 <dmp_set_gyro_bias+0x20c>)
 8002f84:	891b      	ldrh	r3, [r3, #8]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 8002f98:	4b71      	ldr	r3, [pc, #452]	@ (8003160 <dmp_set_gyro_bias+0x20c>)
 8002f9a:	891b      	ldrh	r3, [r3, #8]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	425b      	negs	r3, r3
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8002faa:	4b6d      	ldr	r3, [pc, #436]	@ (8003160 <dmp_set_gyro_bias+0x20c>)
 8002fac:	891b      	ldrh	r3, [r3, #8]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 8002fc0:	4b67      	ldr	r3, [pc, #412]	@ (8003160 <dmp_set_gyro_bias+0x20c>)
 8002fc2:	891b      	ldrh	r3, [r3, #8]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8002fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fce:	425b      	negs	r3, r3
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	17da      	asrs	r2, r3, #31
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	617a      	str	r2, [r7, #20]
 8002fda:	4b62      	ldr	r3, [pc, #392]	@ (8003164 <dmp_set_gyro_bias+0x210>)
 8002fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	fb03 f202 	mul.w	r2, r3, r2
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002fec:	4601      	mov	r1, r0
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4a5b      	ldr	r2, [pc, #364]	@ (8003164 <dmp_set_gyro_bias+0x210>)
 8002ff6:	6939      	ldr	r1, [r7, #16]
 8002ff8:	fba1 ab02 	umull	sl, fp, r1, r2
 8002ffc:	445b      	add	r3, fp
 8002ffe:	469b      	mov	fp, r3
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800300c:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003010:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003014:	4613      	mov	r3, r2
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	17da      	asrs	r2, r3, #31
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	4b50      	ldr	r3, [pc, #320]	@ (8003164 <dmp_set_gyro_bias+0x210>)
 8003022:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003026:	465a      	mov	r2, fp
 8003028:	fb03 f202 	mul.w	r2, r3, r2
 800302c:	2300      	movs	r3, #0
 800302e:	4651      	mov	r1, sl
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	4a4b      	ldr	r2, [pc, #300]	@ (8003164 <dmp_set_gyro_bias+0x210>)
 8003038:	4651      	mov	r1, sl
 800303a:	fba1 8902 	umull	r8, r9, r1, r2
 800303e:	444b      	add	r3, r9
 8003040:	4699      	mov	r9, r3
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800304e:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003052:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003056:	4613      	mov	r3, r2
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 800305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305c:	17da      	asrs	r2, r3, #31
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	4b40      	ldr	r3, [pc, #256]	@ (8003164 <dmp_set_gyro_bias+0x210>)
 8003064:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003068:	464a      	mov	r2, r9
 800306a:	fb03 f202 	mul.w	r2, r3, r2
 800306e:	2300      	movs	r3, #0
 8003070:	4641      	mov	r1, r8
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	4a3a      	ldr	r2, [pc, #232]	@ (8003164 <dmp_set_gyro_bias+0x210>)
 800307a:	4641      	mov	r1, r8
 800307c:	fba1 4502 	umull	r4, r5, r1, r2
 8003080:	442b      	add	r3, r5
 8003082:	461d      	mov	r5, r3
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	0fa2      	lsrs	r2, r4, #30
 800308e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003092:	17ab      	asrs	r3, r5, #30
 8003094:	4613      	mov	r3, r2
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	161b      	asrs	r3, r3, #24
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	141b      	asrs	r3, r3, #16
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	121b      	asrs	r3, r3, #8
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 80030be:	f107 0320 	add.w	r3, r7, #32
 80030c2:	461a      	mov	r2, r3
 80030c4:	2104      	movs	r1, #4
 80030c6:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 80030ca:	f7ff fcd1 	bl	8002a70 <mpu_write_mem>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <dmp_set_gyro_bias+0x186>
        return -1;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e03c      	b.n	8003154 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80030da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030dc:	161b      	asrs	r3, r3, #24
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80030e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e6:	141b      	asrs	r3, r3, #16
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80030ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f0:	121b      	asrs	r3, r3, #8
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8003100:	f107 0320 	add.w	r3, r7, #32
 8003104:	461a      	mov	r2, r3
 8003106:	2104      	movs	r1, #4
 8003108:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 800310c:	f7ff fcb0 	bl	8002a70 <mpu_write_mem>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <dmp_set_gyro_bias+0x1c8>
        return -1;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	e01b      	b.n	8003154 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311e:	161b      	asrs	r3, r3, #24
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	141b      	asrs	r3, r3, #16
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	121b      	asrs	r3, r3, #8
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8003142:	f107 0320 	add.w	r3, r7, #32
 8003146:	461a      	mov	r2, r3
 8003148:	2104      	movs	r1, #4
 800314a:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800314e:	f7ff fc8f 	bl	8002a70 <mpu_write_mem>
 8003152:	4603      	mov	r3, r0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3730      	adds	r7, #48	@ 0x30
 8003158:	46bd      	mov	sp, r7
 800315a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315e:	bf00      	nop
 8003160:	200000b4 	.word	0x200000b4
 8003164:	02cae309 	.word	0x02cae309

08003168 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b094      	sub	sp, #80	@ 0x50
 800316e:	af00      	add	r7, sp, #0
 8003170:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 8003172:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fba8 	bl	80018cc <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 800317c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800317e:	b29b      	uxth	r3, r3
 8003180:	2200      	movs	r2, #0
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	61fa      	str	r2, [r7, #28]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	69f9      	ldr	r1, [r7, #28]
 8003190:	03cb      	lsls	r3, r1, #15
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003198:	69b9      	ldr	r1, [r7, #24]
 800319a:	03ca      	lsls	r2, r1, #15
 800319c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 80031a0:	4b71      	ldr	r3, [pc, #452]	@ (8003368 <dmp_set_accel_bias+0x200>)
 80031a2:	891b      	ldrh	r3, [r3, #8]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ac:	4413      	add	r3, r2
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 80031b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003368 <dmp_set_accel_bias+0x200>)
 80031b4:	891b      	ldrh	r3, [r3, #8]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 80031be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c0:	425b      	negs	r3, r3
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80031c4:	4b68      	ldr	r3, [pc, #416]	@ (8003368 <dmp_set_accel_bias+0x200>)
 80031c6:	891b      	ldrh	r3, [r3, #8]
 80031c8:	08db      	lsrs	r3, r3, #3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	4413      	add	r3, r2
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 80031da:	4b63      	ldr	r3, [pc, #396]	@ (8003368 <dmp_set_accel_bias+0x200>)
 80031dc:	891b      	ldrh	r3, [r3, #8]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 80031e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e8:	425b      	negs	r3, r3
 80031ea:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80031ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003368 <dmp_set_accel_bias+0x200>)
 80031ee:	891b      	ldrh	r3, [r3, #8]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fc:	4413      	add	r3, r2
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 8003202:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <dmp_set_accel_bias+0x200>)
 8003204:	891b      	ldrh	r3, [r3, #8]
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 800320e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003210:	425b      	negs	r3, r3
 8003212:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8003214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003216:	17da      	asrs	r2, r3, #31
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	617a      	str	r2, [r7, #20]
 800321c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800321e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003222:	460a      	mov	r2, r1
 8003224:	fb02 f203 	mul.w	r2, r2, r3
 8003228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800322a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800322e:	4601      	mov	r1, r0
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003238:	6939      	ldr	r1, [r7, #16]
 800323a:	fba2 ab01 	umull	sl, fp, r2, r1
 800323e:	445b      	add	r3, fp
 8003240:	469b      	mov	fp, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800324e:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003252:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003256:	4613      	mov	r3, r2
 8003258:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 800325a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800325c:	17da      	asrs	r2, r3, #31
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	60fa      	str	r2, [r7, #12]
 8003262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003264:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003268:	465a      	mov	r2, fp
 800326a:	fb02 f203 	mul.w	r2, r2, r3
 800326e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003270:	4651      	mov	r1, sl
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800327a:	4651      	mov	r1, sl
 800327c:	fba2 8901 	umull	r8, r9, r2, r1
 8003280:	444b      	add	r3, r9
 8003282:	4699      	mov	r9, r3
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003290:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003294:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003298:	4613      	mov	r3, r2
 800329a:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 800329c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329e:	17da      	asrs	r2, r3, #31
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032a6:	e9d7 8900 	ldrd	r8, r9, [r7]
 80032aa:	464a      	mov	r2, r9
 80032ac:	fb02 f203 	mul.w	r2, r2, r3
 80032b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032b2:	4641      	mov	r1, r8
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032bc:	4641      	mov	r1, r8
 80032be:	fba2 4501 	umull	r4, r5, r2, r1
 80032c2:	442b      	add	r3, r5
 80032c4:	461d      	mov	r5, r3
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	0fa2      	lsrs	r2, r4, #30
 80032d0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80032d4:	17ab      	asrs	r3, r5, #30
 80032d6:	4613      	mov	r3, r2
 80032d8:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80032da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032dc:	161b      	asrs	r3, r3, #24
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 80032e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e6:	141b      	asrs	r3, r3, #16
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 80032ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f0:	121b      	asrs	r3, r3, #8
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 80032f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8003300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003302:	161b      	asrs	r3, r3, #24
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 800330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330c:	141b      	asrs	r3, r3, #16
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8003314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003316:	121b      	asrs	r3, r3, #8
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 800331e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003328:	161b      	asrs	r3, r3, #24
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003332:	141b      	asrs	r3, r3, #16
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 800333a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800333c:	121b      	asrs	r3, r3, #8
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 800334c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003350:	461a      	mov	r2, r3
 8003352:	210c      	movs	r1, #12
 8003354:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8003358:	f7ff fb8a 	bl	8002a70 <mpu_write_mem>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3750      	adds	r7, #80	@ 0x50
 8003362:	46bd      	mov	sp, r7
 8003364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003368:	200000b4 	.word	0x200000b4

0800336c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003376:	4a1f      	ldr	r2, [pc, #124]	@ (80033f4 <dmp_set_fifo_rate+0x88>)
 8003378:	f107 0310 	add.w	r3, r7, #16
 800337c:	ca07      	ldmia	r2, {r0, r1, r2}
 800337e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2bc8      	cmp	r3, #200	@ 0xc8
 8003386:	d902      	bls.n	800338e <dmp_set_fifo_rate+0x22>
        return -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	e02e      	b.n	80033ec <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	22c8      	movs	r2, #200	@ 0xc8
 8003392:	fb92 f3f3 	sdiv	r3, r2, r3
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800339c:	8bfb      	ldrh	r3, [r7, #30]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 80033a6:	8bfb      	ldrh	r3, [r7, #30]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 80033ac:	f107 0308 	add.w	r3, r7, #8
 80033b0:	461a      	mov	r2, r3
 80033b2:	2102      	movs	r1, #2
 80033b4:	f240 2016 	movw	r0, #534	@ 0x216
 80033b8:	f7ff fb5a 	bl	8002a70 <mpu_write_mem>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <dmp_set_fifo_rate+0x5c>
        return -1;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	e011      	b.n	80033ec <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80033c8:	f107 0310 	add.w	r3, r7, #16
 80033cc:	461a      	mov	r2, r3
 80033ce:	210c      	movs	r1, #12
 80033d0:	f640 20c1 	movw	r0, #2753	@ 0xac1
 80033d4:	f7ff fb4c 	bl	8002a70 <mpu_write_mem>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <dmp_set_fifo_rate+0x78>
        return -1;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	e003      	b.n	80033ec <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 80033e4:	4a04      	ldr	r2, [pc, #16]	@ (80033f8 <dmp_set_fifo_rate+0x8c>)
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	8193      	strh	r3, [r2, #12]
    return 0;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	0800a9a8 	.word	0x0800a9a8
 80033f8:	200000b4 	.word	0x200000b4

080033fc <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	460a      	mov	r2, r1
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	4613      	mov	r3, r2
 800340a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <dmp_set_tap_thresh+0x22>
 8003416:	88bb      	ldrh	r3, [r7, #4]
 8003418:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800341c:	d902      	bls.n	8003424 <dmp_set_tap_thresh+0x28>
        return -1;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	e10b      	b.n	800363c <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003424:	88bb      	ldrh	r3, [r7, #4]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800342e:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003644 <dmp_set_tap_thresh+0x248>
 8003432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003436:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800343a:	f107 030b 	add.w	r3, r7, #11
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe f85e 	bl	8001500 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003444:	7afb      	ldrb	r3, [r7, #11]
 8003446:	3b02      	subs	r3, #2
 8003448:	2b0e      	cmp	r3, #14
 800344a:	d87d      	bhi.n	8003548 <dmp_set_tap_thresh+0x14c>
 800344c:	a201      	add	r2, pc, #4	@ (adr r2, 8003454 <dmp_set_tap_thresh+0x58>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003491 	.word	0x08003491
 8003458:	08003549 	.word	0x08003549
 800345c:	080034bf 	.word	0x080034bf
 8003460:	08003549 	.word	0x08003549
 8003464:	08003549 	.word	0x08003549
 8003468:	08003549 	.word	0x08003549
 800346c:	080034ed 	.word	0x080034ed
 8003470:	08003549 	.word	0x08003549
 8003474:	08003549 	.word	0x08003549
 8003478:	08003549 	.word	0x08003549
 800347c:	08003549 	.word	0x08003549
 8003480:	08003549 	.word	0x08003549
 8003484:	08003549 	.word	0x08003549
 8003488:	08003549 	.word	0x08003549
 800348c:	0800351b 	.word	0x0800351b
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003490:	edd7 7a04 	vldr	s15, [r7, #16]
 8003494:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003648 <dmp_set_tap_thresh+0x24c>
 8003498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a0:	ee17 3a90 	vmov	r3, s15
 80034a4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 80034a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034aa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800364c <dmp_set_tap_thresh+0x250>
 80034ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b6:	ee17 3a90 	vmov	r3, s15
 80034ba:	82bb      	strh	r3, [r7, #20]
        break;
 80034bc:	e047      	b.n	800354e <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 80034be:	edd7 7a04 	vldr	s15, [r7, #16]
 80034c2:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003650 <dmp_set_tap_thresh+0x254>
 80034c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ce:	ee17 3a90 	vmov	r3, s15
 80034d2:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 80034d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80034d8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003654 <dmp_set_tap_thresh+0x258>
 80034dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	ee17 3a90 	vmov	r3, s15
 80034e8:	82bb      	strh	r3, [r7, #20]
        break;
 80034ea:	e030      	b.n	800354e <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 80034ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80034f0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003658 <dmp_set_tap_thresh+0x25c>
 80034f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fc:	ee17 3a90 	vmov	r3, s15
 8003500:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003502:	edd7 7a04 	vldr	s15, [r7, #16]
 8003506:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800365c <dmp_set_tap_thresh+0x260>
 800350a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003512:	ee17 3a90 	vmov	r3, s15
 8003516:	82bb      	strh	r3, [r7, #20]
        break;
 8003518:	e019      	b.n	800354e <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800351a:	edd7 7a04 	vldr	s15, [r7, #16]
 800351e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8003660 <dmp_set_tap_thresh+0x264>
 8003522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352a:	ee17 3a90 	vmov	r3, s15
 800352e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8003530:	edd7 7a04 	vldr	s15, [r7, #16]
 8003534:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003664 <dmp_set_tap_thresh+0x268>
 8003538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003540:	ee17 3a90 	vmov	r3, s15
 8003544:	82bb      	strh	r3, [r7, #20]
        break;
 8003546:	e002      	b.n	800354e <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	e076      	b.n	800363c <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	b29b      	uxth	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8003558:	8afb      	ldrh	r3, [r7, #22]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800355e:	8abb      	ldrh	r3, [r7, #20]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	b29b      	uxth	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8003568:	8abb      	ldrh	r3, [r7, #20]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01c      	beq.n	80035b2 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	461a      	mov	r2, r3
 800357e:	2102      	movs	r1, #2
 8003580:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 8003584:	f7ff fa74 	bl	8002a70 <mpu_write_mem>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <dmp_set_tap_thresh+0x198>
            return -1;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	e053      	b.n	800363c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	3302      	adds	r3, #2
 800359a:	461a      	mov	r2, r3
 800359c:	2102      	movs	r1, #2
 800359e:	f44f 7092 	mov.w	r0, #292	@ 0x124
 80035a2:	f7ff fa65 	bl	8002a70 <mpu_write_mem>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <dmp_set_tap_thresh+0x1b6>
            return -1;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	e044      	b.n	800363c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	461a      	mov	r2, r3
 80035c2:	2102      	movs	r1, #2
 80035c4:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 80035c8:	f7ff fa52 	bl	8002a70 <mpu_write_mem>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <dmp_set_tap_thresh+0x1dc>
            return -1;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	e031      	b.n	800363c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	3302      	adds	r3, #2
 80035de:	461a      	mov	r2, r3
 80035e0:	2102      	movs	r1, #2
 80035e2:	f44f 7094 	mov.w	r0, #296	@ 0x128
 80035e6:	f7ff fa43 	bl	8002a70 <mpu_write_mem>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <dmp_set_tap_thresh+0x1fa>
            return -1;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	e022      	b.n	800363c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01c      	beq.n	800363a <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003600:	f107 030c 	add.w	r3, r7, #12
 8003604:	461a      	mov	r2, r3
 8003606:	2102      	movs	r1, #2
 8003608:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 800360c:	f7ff fa30 	bl	8002a70 <mpu_write_mem>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <dmp_set_tap_thresh+0x220>
            return -1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e00f      	b.n	800363c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	3302      	adds	r3, #2
 8003622:	461a      	mov	r2, r3
 8003624:	2102      	movs	r1, #2
 8003626:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800362a:	f7ff fa21 	bl	8002a70 <mpu_write_mem>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <dmp_set_tap_thresh+0x23e>
            return -1;
 8003634:	f04f 33ff 	mov.w	r3, #4294967295
 8003638:	e000      	b.n	800363c <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	43480000 	.word	0x43480000
 8003648:	46800000 	.word	0x46800000
 800364c:	46400000 	.word	0x46400000
 8003650:	46000000 	.word	0x46000000
 8003654:	45c00000 	.word	0x45c00000
 8003658:	45800000 	.word	0x45800000
 800365c:	45400000 	.word	0x45400000
 8003660:	45000000 	.word	0x45000000
 8003664:	44c00000 	.word	0x44c00000

08003668 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003686:	b2db      	uxtb	r3, r3
 8003688:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	f043 030c 	orr.w	r3, r3, #12
 800369a:	b2db      	uxtb	r3, r3
 800369c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	f043 0303 	orr.w	r3, r3, #3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80036b2:	f107 030f 	add.w	r3, r7, #15
 80036b6:	461a      	mov	r2, r3
 80036b8:	2101      	movs	r1, #1
 80036ba:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 80036be:	f7ff f9d7 	bl	8002a70 <mpu_write_mem>
 80036c2:	4603      	mov	r3, r0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <dmp_set_tap_count+0x16>
        min_taps = 1;
 80036dc:	2301      	movs	r3, #1
 80036de:	71fb      	strb	r3, [r7, #7]
 80036e0:	e004      	b.n	80036ec <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d901      	bls.n	80036ec <dmp_set_tap_count+0x20>
        min_taps = 4;
 80036e8:	2304      	movs	r3, #4
 80036ea:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 80036f4:	f107 030f 	add.w	r3, r7, #15
 80036f8:	461a      	mov	r2, r3
 80036fa:	2101      	movs	r1, #1
 80036fc:	f240 104f 	movw	r0, #335	@ 0x14f
 8003700:	f7ff f9b6 	bl	8002a70 <mpu_write_mem>
 8003704:	4603      	mov	r3, r0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	4a0c      	ldr	r2, [pc, #48]	@ (8003750 <dmp_set_tap_time+0x40>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	b29b      	uxth	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003736:	f107 030c 	add.w	r3, r7, #12
 800373a:	461a      	mov	r2, r3
 800373c:	2102      	movs	r1, #2
 800373e:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8003742:	f7ff f995 	bl	8002a70 <mpu_write_mem>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	cccccccd 	.word	0xcccccccd

08003754 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <dmp_set_tap_time_multi+0x40>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800376a:	89fb      	ldrh	r3, [r7, #14]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	b29b      	uxth	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003774:	89fb      	ldrh	r3, [r7, #14]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	461a      	mov	r2, r3
 8003780:	2102      	movs	r1, #2
 8003782:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8003786:	f7ff f973 	bl	8002a70 <mpu_write_mem>
 800378a:	4603      	mov	r3, r0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	cccccccd 	.word	0xcccccccd

08003798 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <dmp_set_shake_reject_thresh+0x5c>)
 80037a8:	fb82 1203 	smull	r1, r2, r2, r3
 80037ac:	1192      	asrs	r2, r2, #6
 80037ae:	17db      	asrs	r3, r3, #31
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	161b      	asrs	r3, r3, #24
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	141b      	asrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	121b      	asrs	r3, r3, #8
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	461a      	mov	r2, r3
 80037de:	2104      	movs	r1, #4
 80037e0:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 80037e4:	f7ff f944 	bl	8002a70 <mpu_write_mem>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	10624dd3 	.word	0x10624dd3

080037f8 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	4a0c      	ldr	r2, [pc, #48]	@ (8003838 <dmp_set_shake_reject_time+0x40>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	b29b      	uxth	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800381e:	f107 030c 	add.w	r3, r7, #12
 8003822:	461a      	mov	r2, r3
 8003824:	2102      	movs	r1, #2
 8003826:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 800382a:	f7ff f921 	bl	8002a70 <mpu_write_mem>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	cccccccd 	.word	0xcccccccd

0800383c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	4a0c      	ldr	r2, [pc, #48]	@ (800387c <dmp_set_shake_reject_timeout+0x40>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	b29b      	uxth	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	461a      	mov	r2, r3
 8003868:	2102      	movs	r1, #2
 800386a:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 800386e:	f7ff f8ff 	bl	8002a70 <mpu_write_mem>
 8003872:	4603      	mov	r3, r0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	cccccccd 	.word	0xcccccccd

08003880 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800388a:	2302      	movs	r3, #2
 800388c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800388e:	23ca      	movs	r3, #202	@ 0xca
 8003890:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8003892:	23e3      	movs	r3, #227	@ 0xe3
 8003894:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8003896:	2309      	movs	r3, #9
 8003898:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	461a      	mov	r2, r3
 80038a0:	2104      	movs	r1, #4
 80038a2:	2068      	movs	r0, #104	@ 0x68
 80038a4:	f7ff f8e4 	bl	8002a70 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80038a8:	23a3      	movs	r3, #163	@ 0xa3
 80038aa:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80038b6:	23c0      	movs	r3, #192	@ 0xc0
 80038b8:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80038ba:	23c8      	movs	r3, #200	@ 0xc8
 80038bc:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80038be:	23c2      	movs	r3, #194	@ 0xc2
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	e005      	b.n	80038d0 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 80038c4:	23a3      	movs	r3, #163	@ 0xa3
 80038c6:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80038c8:	23a3      	movs	r3, #163	@ 0xa3
 80038ca:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80038cc:	23a3      	movs	r3, #163	@ 0xa3
 80038ce:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 80038da:	23c4      	movs	r3, #196	@ 0xc4
 80038dc:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 80038de:	23cc      	movs	r3, #204	@ 0xcc
 80038e0:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 80038e2:	23c6      	movs	r3, #198	@ 0xc6
 80038e4:	74bb      	strb	r3, [r7, #18]
 80038e6:	e005      	b.n	80038f4 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 80038e8:	23a3      	movs	r3, #163	@ 0xa3
 80038ea:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80038ec:	23a3      	movs	r3, #163	@ 0xa3
 80038ee:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80038f0:	23a3      	movs	r3, #163	@ 0xa3
 80038f2:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80038f4:	23a3      	movs	r3, #163	@ 0xa3
 80038f6:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 80038f8:	23a3      	movs	r3, #163	@ 0xa3
 80038fa:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 80038fc:	23a3      	movs	r3, #163	@ 0xa3
 80038fe:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	461a      	mov	r2, r3
 8003906:	210a      	movs	r1, #10
 8003908:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 800390c:	f7ff f8b0 	bl	8002a70 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800391a:	2320      	movs	r3, #32
 800391c:	733b      	strb	r3, [r7, #12]
 800391e:	e001      	b.n	8003924 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003920:	23d8      	movs	r3, #216	@ 0xd8
 8003922:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8003924:	f107 030c 	add.w	r3, r7, #12
 8003928:	461a      	mov	r2, r3
 800392a:	2101      	movs	r1, #1
 800392c:	f640 20b6 	movw	r0, #2742	@ 0xab6
 8003930:	f7ff f89e 	bl	8002a70 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800393e:	2001      	movs	r0, #1
 8003940:	f000 f8c6 	bl	8003ad0 <dmp_enable_gyro_cal>
 8003944:	e002      	b.n	800394c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8003946:	2000      	movs	r0, #0
 8003948:	f000 f8c2 	bl	8003ad0 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01d      	beq.n	8003992 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8003960:	23b2      	movs	r3, #178	@ 0xb2
 8003962:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8003964:	238b      	movs	r3, #139	@ 0x8b
 8003966:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8003968:	23b6      	movs	r3, #182	@ 0xb6
 800396a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800396c:	239b      	movs	r3, #155	@ 0x9b
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e007      	b.n	8003982 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8003972:	23b0      	movs	r3, #176	@ 0xb0
 8003974:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800397a:	23b4      	movs	r3, #180	@ 0xb4
 800397c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800397e:	2390      	movs	r3, #144	@ 0x90
 8003980:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8003982:	f107 030c 	add.w	r3, r7, #12
 8003986:	461a      	mov	r2, r3
 8003988:	2104      	movs	r1, #4
 800398a:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800398e:	f7ff f86f 	bl	8002a70 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d025      	beq.n	80039e8 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800399c:	23f8      	movs	r3, #248	@ 0xf8
 800399e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	461a      	mov	r2, r3
 80039a6:	2101      	movs	r1, #1
 80039a8:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 80039ac:	f7ff f860 	bl	8002a70 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80039b0:	21fa      	movs	r1, #250	@ 0xfa
 80039b2:	2007      	movs	r0, #7
 80039b4:	f7ff fd22 	bl	80033fc <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80039b8:	2007      	movs	r0, #7
 80039ba:	f7ff fe55 	bl	8003668 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80039be:	2001      	movs	r0, #1
 80039c0:	f7ff fe84 	bl	80036cc <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80039c4:	2064      	movs	r0, #100	@ 0x64
 80039c6:	f7ff fea3 	bl	8003710 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80039ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039ce:	f7ff fec1 	bl	8003754 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80039d2:	21c8      	movs	r1, #200	@ 0xc8
 80039d4:	483c      	ldr	r0, [pc, #240]	@ (8003ac8 <dmp_enable_feature+0x248>)
 80039d6:	f7ff fedf 	bl	8003798 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80039da:	2028      	movs	r0, #40	@ 0x28
 80039dc:	f7ff ff0c 	bl	80037f8 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80039e0:	200a      	movs	r0, #10
 80039e2:	f7ff ff2b 	bl	800383c <dmp_set_shake_reject_timeout>
 80039e6:	e009      	b.n	80039fc <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80039e8:	23d8      	movs	r3, #216	@ 0xd8
 80039ea:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	461a      	mov	r2, r3
 80039f2:	2101      	movs	r1, #1
 80039f4:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 80039f8:	f7ff f83a 	bl	8002a70 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8003a06:	23d9      	movs	r3, #217	@ 0xd9
 8003a08:	733b      	strb	r3, [r7, #12]
 8003a0a:	e001      	b.n	8003a10 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8003a0c:	23d8      	movs	r3, #216	@ 0xd8
 8003a0e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	461a      	mov	r2, r3
 8003a16:	2101      	movs	r1, #1
 8003a18:	f240 703d 	movw	r0, #1853	@ 0x73d
 8003a1c:	f7ff f828 	bl	8002a70 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f000 f880 	bl	8003b30 <dmp_enable_lp_quat>
 8003a30:	e002      	b.n	8003a38 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 f87c 	bl	8003b30 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f000 f89b 	bl	8003b7e <dmp_enable_6x_lp_quat>
 8003a48:	e002      	b.n	8003a50 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f000 f897 	bl	8003b7e <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	f043 0308 	orr.w	r3, r3, #8
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003a5a:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8003a5c:	f7fd fbc4 	bl	80011e8 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8003a70:	4b16      	ldr	r3, [pc, #88]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003a72:	7b9b      	ldrb	r3, [r3, #14]
 8003a74:	3306      	adds	r3, #6
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003a7a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8003a86:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003a88:	7b9b      	ldrb	r3, [r3, #14]
 8003a8a:	3306      	adds	r3, #6
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003a90:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	f003 0314 	and.w	r3, r3, #20
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003a9e:	7b9b      	ldrb	r3, [r3, #14]
 8003aa0:	3310      	adds	r3, #16
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003aa6:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003ab4:	7b9b      	ldrb	r3, [r3, #14]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <dmp_enable_feature+0x24c>)
 8003abc:	739a      	strb	r2, [r3, #14]

    return 0;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	02cae309 	.word	0x02cae309
 8003acc:	200000b4 	.word	0x200000b4

08003ad0 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00f      	beq.n	8003b00 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8003ae0:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <dmp_enable_gyro_cal+0x58>)
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ae8:	c303      	stmia	r3!, {r0, r1}
 8003aea:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	461a      	mov	r2, r3
 8003af2:	2109      	movs	r1, #9
 8003af4:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8003af8:	f7fe ffba 	bl	8002a70 <mpu_write_mem>
 8003afc:	4603      	mov	r3, r0
 8003afe:	e00e      	b.n	8003b1e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8003b00:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <dmp_enable_gyro_cal+0x5c>)
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b08:	c303      	stmia	r3!, {r0, r1}
 8003b0a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8003b0c:	f107 0308 	add.w	r3, r7, #8
 8003b10:	461a      	mov	r2, r3
 8003b12:	2109      	movs	r1, #9
 8003b14:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8003b18:	f7fe ffaa 	bl	8002a70 <mpu_write_mem>
 8003b1c:	4603      	mov	r3, r0
    }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	0800a9b4 	.word	0x0800a9b4
 8003b2c:	0800a9c0 	.word	0x0800a9c0

08003b30 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8003b40:	23c0      	movs	r3, #192	@ 0xc0
 8003b42:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8003b44:	23c2      	movs	r3, #194	@ 0xc2
 8003b46:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8003b48:	23c4      	movs	r3, #196	@ 0xc4
 8003b4a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8003b4c:	23c6      	movs	r3, #198	@ 0xc6
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e006      	b.n	8003b60 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	2204      	movs	r2, #4
 8003b58:	218b      	movs	r1, #139	@ 0x8b
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f006 fc44 	bl	800a3e8 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	461a      	mov	r2, r3
 8003b66:	2104      	movs	r1, #4
 8003b68:	f640 2098 	movw	r0, #2712	@ 0xa98
 8003b6c:	f7fe ff80 	bl	8002a70 <mpu_write_mem>

    return mpu_reset_fifo();
 8003b70:	f7fd fb3a 	bl	80011e8 <mpu_reset_fifo>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	4603      	mov	r3, r0
 8003b86:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8003b92:	2328      	movs	r3, #40	@ 0x28
 8003b94:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8003b96:	2330      	movs	r3, #48	@ 0x30
 8003b98:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8003b9a:	2338      	movs	r3, #56	@ 0x38
 8003b9c:	73fb      	strb	r3, [r7, #15]
 8003b9e:	e006      	b.n	8003bae <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	21a3      	movs	r1, #163	@ 0xa3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f006 fc1d 	bl	800a3e8 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8003bae:	f107 030c 	add.w	r3, r7, #12
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8003bba:	f7fe ff59 	bl	8002a70 <mpu_write_mem>

    return mpu_reset_fifo();
 8003bbe:	f7fd fb13 	bl	80011e8 <mpu_reset_fifo>
 8003bc2:	4603      	mov	r3, r0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3303      	adds	r3, #3
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bde:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3303      	adds	r3, #3
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bea:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d012      	beq.n	8003c20 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8003bfa:	7bbb      	ldrb	r3, [r7, #14]
 8003bfc:	08db      	lsrs	r3, r3, #3
 8003bfe:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8003c00:	7bbb      	ldrb	r3, [r7, #14]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8003c0c:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <decode_gesture+0x84>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8003c14:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <decode_gesture+0x84>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	7b39      	ldrb	r1, [r7, #12]
 8003c1a:	7b7a      	ldrb	r2, [r7, #13]
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3301      	adds	r3, #1
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <decode_gesture+0x84>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <decode_gesture+0x84>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	0992      	lsrs	r2, r2, #6
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	4610      	mov	r0, r2
 8003c42:	4798      	blx	r3
    }

    return 0;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200000b4 	.word	0x200000b4

08003c54 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b092      	sub	sp, #72	@ 0x48
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8003c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8003c6e:	4baf      	ldr	r3, [pc, #700]	@ (8003f2c <dmp_read_fifo+0x2d8>)
 8003c70:	7b9b      	ldrb	r3, [r3, #14]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f107 0320 	add.w	r3, r7, #32
 8003c78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fd ff4e 	bl	8001b1c <mpu_read_fifo_stream>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <dmp_read_fifo+0x38>
        return -1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	e14a      	b.n	8003f22 <dmp_read_fifo+0x2ce>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8003c8c:	4ba7      	ldr	r3, [pc, #668]	@ (8003f2c <dmp_read_fifo+0x2d8>)
 8003c8e:	895b      	ldrh	r3, [r3, #10]
 8003c90:	f003 0314 	and.w	r3, r3, #20
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 808a 	beq.w	8003dae <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c9e:	061a      	lsls	r2, r3, #24
 8003ca0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8003ca8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003cac:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003cae:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8003cb0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003cb4:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003cba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cbe:	061a      	lsls	r2, r3, #24
 8003cc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ccc:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003cce:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cd4:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003cda:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003cdc:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ce2:	061a      	lsls	r2, r3, #24
 8003ce4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003cec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cf0:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003cf2:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cf8:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003cfe:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003d00:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003d06:	061a      	lsls	r2, r3, #24
 8003d08:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003d10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d14:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d16:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003d18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d1c:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003d22:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003d24:	601a      	str	r2, [r3, #0]
        ii += 16;
 8003d26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003d2a:	3310      	adds	r3, #16
 8003d2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	141b      	asrs	r3, r3, #16
 8003d36:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	141b      	asrs	r3, r3, #16
 8003d40:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3308      	adds	r3, #8
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	141b      	asrs	r3, r3, #16
 8003d4a:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	141b      	asrs	r3, r3, #16
 8003d54:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	fb03 f202 	mul.w	r2, r3, r2
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	69b9      	ldr	r1, [r7, #24]
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003d70:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003d7a:	4413      	add	r3, r2
 8003d7c:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d84:	db03      	blt.n	8003d8e <dmp_read_fifo+0x13a>
 8003d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d88:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8003d8c:	dd07      	ble.n	8003d9e <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8003d8e:	f7fd fa2b 	bl	80011e8 <mpu_reset_fifo>
            sensors[0] = 0;
 8003d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d94:	2200      	movs	r2, #0
 8003d96:	801a      	strh	r2, [r3, #0]
            return -1;
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	e0c1      	b.n	8003f22 <dmp_read_fifo+0x2ce>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8003d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	b21a      	sxth	r2, r3
 8003daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dac:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003dae:	4b5f      	ldr	r3, [pc, #380]	@ (8003f2c <dmp_read_fifo+0x2d8>)
 8003db0:	895b      	ldrh	r3, [r3, #10]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04c      	beq.n	8003e54 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003dba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dbe:	3348      	adds	r3, #72	@ 0x48
 8003dc0:	443b      	add	r3, r7
 8003dc2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	b21a      	sxth	r2, r3
 8003dca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dce:	3301      	adds	r3, #1
 8003dd0:	3348      	adds	r3, #72	@ 0x48
 8003dd2:	443b      	add	r3, r7
 8003dd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b21a      	sxth	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8003de2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003de6:	3302      	adds	r3, #2
 8003de8:	3348      	adds	r3, #72	@ 0x48
 8003dea:	443b      	add	r3, r7
 8003dec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	b219      	sxth	r1, r3
 8003df4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003df8:	3303      	adds	r3, #3
 8003dfa:	3348      	adds	r3, #72	@ 0x48
 8003dfc:	443b      	add	r3, r7
 8003dfe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e02:	b21a      	sxth	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3302      	adds	r3, #2
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	b212      	sxth	r2, r2
 8003e0c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8003e0e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e12:	3304      	adds	r3, #4
 8003e14:	3348      	adds	r3, #72	@ 0x48
 8003e16:	443b      	add	r3, r7
 8003e18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	b219      	sxth	r1, r3
 8003e20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e24:	3305      	adds	r3, #5
 8003e26:	3348      	adds	r3, #72	@ 0x48
 8003e28:	443b      	add	r3, r7
 8003e2a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e2e:	b21a      	sxth	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3304      	adds	r3, #4
 8003e34:	430a      	orrs	r2, r1
 8003e36:	b212      	sxth	r2, r2
 8003e38:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8003e3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e3e:	3306      	adds	r3, #6
 8003e40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8003e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	b21a      	sxth	r2, r3
 8003e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e52:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003e54:	4b35      	ldr	r3, [pc, #212]	@ (8003f2c <dmp_read_fifo+0x2d8>)
 8003e56:	895b      	ldrh	r3, [r3, #10]
 8003e58:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d04c      	beq.n	8003efa <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003e60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e64:	3348      	adds	r3, #72	@ 0x48
 8003e66:	443b      	add	r3, r7
 8003e68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	b21a      	sxth	r2, r3
 8003e70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e74:	3301      	adds	r3, #1
 8003e76:	3348      	adds	r3, #72	@ 0x48
 8003e78:	443b      	add	r3, r7
 8003e7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e7e:	b21b      	sxth	r3, r3
 8003e80:	4313      	orrs	r3, r2
 8003e82:	b21a      	sxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8003e88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	3348      	adds	r3, #72	@ 0x48
 8003e90:	443b      	add	r3, r7
 8003e92:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	b219      	sxth	r1, r3
 8003e9a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e9e:	3303      	adds	r3, #3
 8003ea0:	3348      	adds	r3, #72	@ 0x48
 8003ea2:	443b      	add	r3, r7
 8003ea4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3302      	adds	r3, #2
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	b212      	sxth	r2, r2
 8003eb2:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8003eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003eb8:	3304      	adds	r3, #4
 8003eba:	3348      	adds	r3, #72	@ 0x48
 8003ebc:	443b      	add	r3, r7
 8003ebe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	b219      	sxth	r1, r3
 8003ec6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003eca:	3305      	adds	r3, #5
 8003ecc:	3348      	adds	r3, #72	@ 0x48
 8003ece:	443b      	add	r3, r7
 8003ed0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ed4:	b21a      	sxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	430a      	orrs	r2, r1
 8003edc:	b212      	sxth	r2, r2
 8003ede:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8003ee0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ee4:	3306      	adds	r3, #6
 8003ee6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8003eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003ef4:	b21a      	sxth	r2, r3
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef8:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003efa:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <dmp_read_fifo+0x2d8>)
 8003efc:	895b      	ldrh	r3, [r3, #10]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8003f06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f0a:	f107 0220 	add.w	r2, r7, #32
 8003f0e:	4413      	add	r3, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fe5b 	bl	8003bcc <decode_gesture>

    get_ms(timestamp);
 8003f16:	f002 f839 	bl	8005f8c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	601a      	str	r2, [r3, #0]
    return 0;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3748      	adds	r7, #72	@ 0x48
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200000b4 	.word	0x200000b4

08003f30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f34:	f3bf 8f4f 	dsb	sy
}
 8003f38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f3a:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <__NVIC_SystemReset+0x24>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f42:	4904      	ldr	r1, [pc, #16]	@ (8003f54 <__NVIC_SystemReset+0x24>)
 8003f44:	4b04      	ldr	r3, [pc, #16]	@ (8003f58 <__NVIC_SystemReset+0x28>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f4a:	f3bf 8f4f 	dsb	sy
}
 8003f4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f50:	bf00      	nop
 8003f52:	e7fd      	b.n	8003f50 <__NVIC_SystemReset+0x20>
 8003f54:	e000ed00 	.word	0xe000ed00
 8003f58:	05fa0004 	.word	0x05fa0004

08003f5c <inv_row_2_scale>:
float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
float dcm[3][3];
float gravity[3];
static signed char gyro_orientation[9] = { -1, 0, 0, 0, -1, 0, 0, 0, 1 };

static unsigned short inv_row_2_scale(const signed char *row) {
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  unsigned short b;

  if (row[0] > 0)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f993 3000 	ldrsb.w	r3, [r3]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	dd02      	ble.n	8003f74 <inv_row_2_scale+0x18>
    b = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	81fb      	strh	r3, [r7, #14]
 8003f72:	e02d      	b.n	8003fd0 <inv_row_2_scale+0x74>
  else if (row[0] < 0)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f993 3000 	ldrsb.w	r3, [r3]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da02      	bge.n	8003f84 <inv_row_2_scale+0x28>
    b = 4;
 8003f7e:	2304      	movs	r3, #4
 8003f80:	81fb      	strh	r3, [r7, #14]
 8003f82:	e025      	b.n	8003fd0 <inv_row_2_scale+0x74>
  else if (row[1] > 0)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3301      	adds	r3, #1
 8003f88:	f993 3000 	ldrsb.w	r3, [r3]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	dd02      	ble.n	8003f96 <inv_row_2_scale+0x3a>
    b = 1;
 8003f90:	2301      	movs	r3, #1
 8003f92:	81fb      	strh	r3, [r7, #14]
 8003f94:	e01c      	b.n	8003fd0 <inv_row_2_scale+0x74>
  else if (row[1] < 0)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da02      	bge.n	8003fa8 <inv_row_2_scale+0x4c>
    b = 5;
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	81fb      	strh	r3, [r7, #14]
 8003fa6:	e013      	b.n	8003fd0 <inv_row_2_scale+0x74>
  else if (row[2] > 0)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3302      	adds	r3, #2
 8003fac:	f993 3000 	ldrsb.w	r3, [r3]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dd02      	ble.n	8003fba <inv_row_2_scale+0x5e>
    b = 2;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	81fb      	strh	r3, [r7, #14]
 8003fb8:	e00a      	b.n	8003fd0 <inv_row_2_scale+0x74>
  else if (row[2] < 0)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da02      	bge.n	8003fcc <inv_row_2_scale+0x70>
    b = 6;
 8003fc6:	2306      	movs	r3, #6
 8003fc8:	81fb      	strh	r3, [r7, #14]
 8003fca:	e001      	b.n	8003fd0 <inv_row_2_scale+0x74>
  else
    b = 7;      // error
 8003fcc:	2307      	movs	r3, #7
 8003fce:	81fb      	strh	r3, [r7, #14]
  return b;
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <inv_orientation_matrix_to_scalar>:

static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx) {
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  unsigned short scalar;
  scalar = inv_row_2_scale(mtx);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ffb8 	bl	8003f5c <inv_row_2_scale>
 8003fec:	4603      	mov	r3, r0
 8003fee:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 3) << 3;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3303      	adds	r3, #3
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ffb1 	bl	8003f5c <inv_row_2_scale>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	b21a      	sxth	r2, r3
 8004000:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004004:	4313      	orrs	r3, r2
 8004006:	b21b      	sxth	r3, r3
 8004008:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 6) << 6;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3306      	adds	r3, #6
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ffa4 	bl	8003f5c <inv_row_2_scale>
 8004014:	4603      	mov	r3, r0
 8004016:	019b      	lsls	r3, r3, #6
 8004018:	b21a      	sxth	r2, r3
 800401a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800401e:	4313      	orrs	r3, r2
 8004020:	b21b      	sxth	r3, r3
 8004022:	81fb      	strh	r3, [r7, #14]

  return scalar;
 8004024:	89fb      	ldrh	r3, [r7, #14]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <run_self_test>:

static void run_self_test(void) {
 800402e:	b580      	push	{r7, lr}
 8004030:	b08a      	sub	sp, #40	@ 0x28
 8004032:	af00      	add	r7, sp, #0
  int result;
  long gyro[3], accel[3];

  result = mpu_run_self_test(gyro, accel);
 8004034:	f107 020c 	add.w	r2, r7, #12
 8004038:	f107 0318 	add.w	r3, r7, #24
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fc3a 	bl	80028b8 <mpu_run_self_test>
 8004044:	6278      	str	r0, [r7, #36]	@ 0x24
  if (result == 0x7) {
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	2b07      	cmp	r3, #7
 800404a:	d14b      	bne.n	80040e4 <run_self_test+0xb6>
    /* Test passed. We can trust the gyro data here, so let's push it down
     * to the DMP.
     */
    float sens;
    unsigned short accel_sens;
    mpu_get_gyro_sens(&sens);
 800404c:	f107 0308 	add.w	r3, r7, #8
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fc03 	bl	800185c <mpu_get_gyro_sens>
    gyro[0] = (long) (gyro[0] * sens);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004060:	edd7 7a02 	vldr	s15, [r7, #8]
 8004064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	61bb      	str	r3, [r7, #24]
    gyro[1] = (long) (gyro[1] * sens);
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800407c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004088:	ee17 3a90 	vmov	r3, s15
 800408c:	61fb      	str	r3, [r7, #28]
    gyro[2] = (long) (gyro[2] * sens);
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004098:	edd7 7a02 	vldr	s15, [r7, #8]
 800409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a4:	ee17 3a90 	vmov	r3, s15
 80040a8:	623b      	str	r3, [r7, #32]
    dmp_set_gyro_bias(gyro);
 80040aa:	f107 0318 	add.w	r3, r7, #24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe ff50 	bl	8002f54 <dmp_set_gyro_bias>
    mpu_get_accel_sens(&accel_sens);
 80040b4:	1dbb      	adds	r3, r7, #6
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fc08 	bl	80018cc <mpu_get_accel_sens>
    accel[0] *= accel_sens;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	60fb      	str	r3, [r7, #12]
    accel[1] *= accel_sens;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	613b      	str	r3, [r7, #16]
    accel[2] *= accel_sens;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
    dmp_set_accel_bias(accel);
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f842 	bl	8003168 <dmp_set_accel_bias>
    log_i("setting bias succesfully ......\r\n");
  }
}
 80040e4:	bf00      	nop
 80040e6:	3728      	adds	r7, #40	@ 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <MPU6050_getDeviceID>:

/**************************实现函数********************************************
 *函数原型:		uint8_t MPU6050_getDeviceID(void)
 *功　　能:	    读取  MPU6050 WHO_AM_I 标识	 将返回 0x68
 *******************************************************************************/
uint8_t MPU6050_getDeviceID(void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  memset(buffer,0,sizeof(buffer));
 80040f0:	220e      	movs	r2, #14
 80040f2:	2100      	movs	r1, #0
 80040f4:	4806      	ldr	r0, [pc, #24]	@ (8004110 <MPU6050_getDeviceID+0x24>)
 80040f6:	f006 f977 	bl	800a3e8 <memset>
  i2c_read(devAddr, MPU6050_RA_WHO_AM_I, 1, buffer);
 80040fa:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <MPU6050_getDeviceID+0x24>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	2175      	movs	r1, #117	@ 0x75
 8004100:	2068      	movs	r0, #104	@ 0x68
 8004102:	f7fc fe71 	bl	8000de8 <i2c_read>
  return buffer[0];
 8004106:	4b02      	ldr	r3, [pc, #8]	@ (8004110 <MPU6050_getDeviceID+0x24>)
 8004108:	781b      	ldrb	r3, [r3, #0]
}
 800410a:	4618      	mov	r0, r3
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200000f8 	.word	0x200000f8

08004114 <DMP_Init>:
 函数功能：MPU6050内置DMP的初始化
 入口参数：无
 返回  值：无
 作    者：平衡小车之家
 **************************************************************************/
void DMP_Init(void) {
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  if (MPU6050_getDeviceID() != 0x68)
 8004118:	f7ff ffe8 	bl	80040ec <MPU6050_getDeviceID>
 800411c:	4603      	mov	r3, r0
 800411e:	2b68      	cmp	r3, #104	@ 0x68
 8004120:	d001      	beq.n	8004126 <DMP_Init+0x12>
    NVIC_SystemReset();
 8004122:	f7ff ff05 	bl	8003f30 <__NVIC_SystemReset>
  if (!mpu_init(NULL)) {
 8004126:	2000      	movs	r0, #0
 8004128:	f7fc feda 	bl	8000ee0 <mpu_init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11d      	bne.n	800416e <DMP_Init+0x5a>
    if (!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8004132:	2078      	movs	r0, #120	@ 0x78
 8004134:	f7fd fc6c 	bl	8001a10 <mpu_set_sensors>
      log_i("mpu_set_sensor complete ......\r\n");
    if (!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8004138:	2078      	movs	r0, #120	@ 0x78
 800413a:	f7fd fc17 	bl	800196c <mpu_configure_fifo>
      log_i("mpu_configure_fifo complete ......\r\n");
    if (!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 800413e:	20c8      	movs	r0, #200	@ 0xc8
 8004140:	f7fd fb26 	bl	8001790 <mpu_set_sample_rate>
      log_i("mpu_set_sample_rate complete ......\r\n");
    if (!dmp_load_motion_driver_firmware())
 8004144:	f7fe fe0a 	bl	8002d5c <dmp_load_motion_driver_firmware>
      log_i("dmp_load_motion_driver_firmware complete ......\r\n");
    if (!dmp_set_orientation(
 8004148:	480a      	ldr	r0, [pc, #40]	@ (8004174 <DMP_Init+0x60>)
 800414a:	f7ff ff48 	bl	8003fde <inv_orientation_matrix_to_scalar>
 800414e:	4603      	mov	r3, r0
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe fe13 	bl	8002d7c <dmp_set_orientation>
        inv_orientation_matrix_to_scalar(gyro_orientation)))
      log_i("dmp_set_orientation complete ......\r\n");
    if (!dmp_enable_feature(
 8004156:	f240 1073 	movw	r0, #371	@ 0x173
 800415a:	f7ff fb91 	bl	8003880 <dmp_enable_feature>
        DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL
            | DMP_FEATURE_SEND_CAL_GYRO |
            DMP_FEATURE_GYRO_CAL))
      log_i("dmp_enable_feature complete ......\r\n");
    if (!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 800415e:	20c8      	movs	r0, #200	@ 0xc8
 8004160:	f7ff f904 	bl	800336c <dmp_set_fifo_rate>
      log_i("dmp_set_fifo_rate complete ......\r\n");
    run_self_test();
 8004164:	f7ff ff63 	bl	800402e <run_self_test>
    if (!mpu_set_dmp_state(1))
 8004168:	2001      	movs	r0, #1
 800416a:	f7fe fda3 	bl	8002cb4 <mpu_set_dmp_state>
      log_i("mpu_set_dmp_state complete ......\r\n");
  }
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000030 	.word	0x20000030

08004178 <Read_DMP>:
 入口参数：无
 返回  值：无
 作    者：平衡小车之家
 **************************************************************************/
void Read_DMP(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	@ 0x28
 800417c:	af02      	add	r7, sp, #8
  unsigned long sensor_timestamp;
  unsigned char more;
  long quat[4];

  dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 800417e:	f107 0118 	add.w	r1, r7, #24
 8004182:	1d3a      	adds	r2, r7, #4
 8004184:	f107 0317 	add.w	r3, r7, #23
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	4b97      	ldr	r3, [pc, #604]	@ (80043e8 <Read_DMP+0x270>)
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	460b      	mov	r3, r1
 8004190:	4996      	ldr	r1, [pc, #600]	@ (80043ec <Read_DMP+0x274>)
 8004192:	4897      	ldr	r0, [pc, #604]	@ (80043f0 <Read_DMP+0x278>)
 8004194:	f7ff fd5e 	bl	8003c54 <dmp_read_fifo>

  if (sensors & INV_WXYZ_QUAT)
 8004198:	4b93      	ldr	r3, [pc, #588]	@ (80043e8 <Read_DMP+0x270>)
 800419a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8115 	beq.w	80043d4 <Read_DMP+0x25c>
  {
    q0 = quat[0] / q30;   // w
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041b4:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 80043f4 <Read_DMP+0x27c>
 80041b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041bc:	4b8e      	ldr	r3, [pc, #568]	@ (80043f8 <Read_DMP+0x280>)
 80041be:	edc3 7a00 	vstr	s15, [r3]
    q1 = quat[1] / q30;   // x
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041cc:	eddf 6a89 	vldr	s13, [pc, #548]	@ 80043f4 <Read_DMP+0x27c>
 80041d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041d4:	4b89      	ldr	r3, [pc, #548]	@ (80043fc <Read_DMP+0x284>)
 80041d6:	edc3 7a00 	vstr	s15, [r3]
    q2 = quat[2] / q30;   // y
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e4:	eddf 6a83 	vldr	s13, [pc, #524]	@ 80043f4 <Read_DMP+0x27c>
 80041e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ec:	4b84      	ldr	r3, [pc, #528]	@ (8004400 <Read_DMP+0x288>)
 80041ee:	edc3 7a00 	vstr	s15, [r3]
    q3 = quat[3] / q30;   // z
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041fc:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80043f4 <Read_DMP+0x27c>
 8004200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004204:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <Read_DMP+0x28c>)
 8004206:	edc3 7a00 	vstr	s15, [r3]

    float s = -1.0; // The minus sign is added to match the graph printed on the board.
 800420a:	4b7f      	ldr	r3, [pc, #508]	@ (8004408 <Read_DMP+0x290>)
 800420c:	61fb      	str	r3, [r7, #28]
    // Rotation X - Y - Z (R = Rz * Ry * Rx)
    // The quaternion is q = qz*qy*qx operator
    // https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
	phi   = s*atan2f(q0 * q1 +  q2 * q3, 0.5 - (q1 * q1 + q2 * q2));
 800420e:	4b7a      	ldr	r3, [pc, #488]	@ (80043f8 <Read_DMP+0x280>)
 8004210:	ed93 7a00 	vldr	s14, [r3]
 8004214:	4b79      	ldr	r3, [pc, #484]	@ (80043fc <Read_DMP+0x284>)
 8004216:	edd3 7a00 	vldr	s15, [r3]
 800421a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800421e:	4b78      	ldr	r3, [pc, #480]	@ (8004400 <Read_DMP+0x288>)
 8004220:	edd3 6a00 	vldr	s13, [r3]
 8004224:	4b77      	ldr	r3, [pc, #476]	@ (8004404 <Read_DMP+0x28c>)
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800422e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004232:	4b72      	ldr	r3, [pc, #456]	@ (80043fc <Read_DMP+0x284>)
 8004234:	ed93 7a00 	vldr	s14, [r3]
 8004238:	4b70      	ldr	r3, [pc, #448]	@ (80043fc <Read_DMP+0x284>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004242:	4b6f      	ldr	r3, [pc, #444]	@ (8004400 <Read_DMP+0x288>)
 8004244:	edd3 6a00 	vldr	s13, [r3]
 8004248:	4b6d      	ldr	r3, [pc, #436]	@ (8004400 <Read_DMP+0x288>)
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004256:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800425a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800425e:	eef0 0a67 	vmov.f32	s1, s15
 8004262:	eeb0 0a46 	vmov.f32	s0, s12
 8004266:	f006 f91d 	bl	800a4a4 <atan2f>
 800426a:	eeb0 7a40 	vmov.f32	s14, s0
 800426e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	4b65      	ldr	r3, [pc, #404]	@ (800440c <Read_DMP+0x294>)
 8004278:	edc3 7a00 	vstr	s15, [r3]
	theta = s*asinf(2  * (q0 * q2 - q3 * q1 )); //
 800427c:	4b5e      	ldr	r3, [pc, #376]	@ (80043f8 <Read_DMP+0x280>)
 800427e:	ed93 7a00 	vldr	s14, [r3]
 8004282:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <Read_DMP+0x288>)
 8004284:	edd3 7a00 	vldr	s15, [r3]
 8004288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800428c:	4b5d      	ldr	r3, [pc, #372]	@ (8004404 <Read_DMP+0x28c>)
 800428e:	edd3 6a00 	vldr	s13, [r3]
 8004292:	4b5a      	ldr	r3, [pc, #360]	@ (80043fc <Read_DMP+0x284>)
 8004294:	edd3 7a00 	vldr	s15, [r3]
 8004298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800429c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042a4:	eeb0 0a67 	vmov.f32	s0, s15
 80042a8:	f006 f8d0 	bl	800a44c <asinf>
 80042ac:	eeb0 7a40 	vmov.f32	s14, s0
 80042b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80042b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b8:	4b55      	ldr	r3, [pc, #340]	@ (8004410 <Read_DMP+0x298>)
 80042ba:	edc3 7a00 	vstr	s15, [r3]
	psi   = s*atan2f(q0 * q3 + q1* q2, 0.5 - (q2 * q2 + q3 * q3)   );
 80042be:	4b4e      	ldr	r3, [pc, #312]	@ (80043f8 <Read_DMP+0x280>)
 80042c0:	ed93 7a00 	vldr	s14, [r3]
 80042c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004404 <Read_DMP+0x28c>)
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ce:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <Read_DMP+0x284>)
 80042d0:	edd3 6a00 	vldr	s13, [r3]
 80042d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <Read_DMP+0x288>)
 80042d6:	edd3 7a00 	vldr	s15, [r3]
 80042da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042de:	ee37 6a27 	vadd.f32	s12, s14, s15
 80042e2:	4b47      	ldr	r3, [pc, #284]	@ (8004400 <Read_DMP+0x288>)
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	4b45      	ldr	r3, [pc, #276]	@ (8004400 <Read_DMP+0x288>)
 80042ea:	edd3 7a00 	vldr	s15, [r3]
 80042ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f2:	4b44      	ldr	r3, [pc, #272]	@ (8004404 <Read_DMP+0x28c>)
 80042f4:	edd3 6a00 	vldr	s13, [r3]
 80042f8:	4b42      	ldr	r3, [pc, #264]	@ (8004404 <Read_DMP+0x28c>)
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004306:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800430a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800430e:	eef0 0a67 	vmov.f32	s1, s15
 8004312:	eeb0 0a46 	vmov.f32	s0, s12
 8004316:	f006 f8c5 	bl	800a4a4 <atan2f>
 800431a:	eeb0 7a40 	vmov.f32	s14, s0
 800431e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	4b3b      	ldr	r3, [pc, #236]	@ (8004414 <Read_DMP+0x29c>)
 8004328:	edc3 7a00 	vstr	s15, [r3]

    // angle in degrees:
    roll  = rad2deg(phi);
 800432c:	4b37      	ldr	r3, [pc, #220]	@ (800440c <Read_DMP+0x294>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fc f8b5 	bl	80004a0 <__aeabi_f2d>
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	4b37      	ldr	r3, [pc, #220]	@ (8004418 <Read_DMP+0x2a0>)
 800433c:	f7fc f908 	bl	8000550 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	a325      	add	r3, pc, #148	@ (adr r3, 80043e0 <Read_DMP+0x268>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fc fa29 	bl	80007a4 <__aeabi_ddiv>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f7fc fb0b 	bl	8000974 <__aeabi_d2f>
 800435e:	4603      	mov	r3, r0
 8004360:	4a2e      	ldr	r2, [pc, #184]	@ (800441c <Read_DMP+0x2a4>)
 8004362:	6013      	str	r3, [r2, #0]
    pitch = rad2deg(theta);
 8004364:	4b2a      	ldr	r3, [pc, #168]	@ (8004410 <Read_DMP+0x298>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc f899 	bl	80004a0 <__aeabi_f2d>
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	4b29      	ldr	r3, [pc, #164]	@ (8004418 <Read_DMP+0x2a0>)
 8004374:	f7fc f8ec 	bl	8000550 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	a317      	add	r3, pc, #92	@ (adr r3, 80043e0 <Read_DMP+0x268>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f7fc fa0d 	bl	80007a4 <__aeabi_ddiv>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	f7fc faef 	bl	8000974 <__aeabi_d2f>
 8004396:	4603      	mov	r3, r0
 8004398:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <Read_DMP+0x2a8>)
 800439a:	6013      	str	r3, [r2, #0]
    yaw   = rad2deg(psi);
 800439c:	4b1d      	ldr	r3, [pc, #116]	@ (8004414 <Read_DMP+0x29c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc f87d 	bl	80004a0 <__aeabi_f2d>
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <Read_DMP+0x2a0>)
 80043ac:	f7fc f8d0 	bl	8000550 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	a309      	add	r3, pc, #36	@ (adr r3, 80043e0 <Read_DMP+0x268>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fc f9f1 	bl	80007a4 <__aeabi_ddiv>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fc fad3 	bl	8000974 <__aeabi_d2f>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <Read_DMP+0x2ac>)
 80043d2:	6013      	str	r3, [r2, #0]
  }
}
 80043d4:	bf00      	nop
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	f3af 8000 	nop.w
 80043e0:	54442d18 	.word	0x54442d18
 80043e4:	400921fb 	.word	0x400921fb
 80043e8:	200000d2 	.word	0x200000d2
 80043ec:	200000cc 	.word	0x200000cc
 80043f0:	200000c4 	.word	0x200000c4
 80043f4:	4e800000 	.word	0x4e800000
 80043f8:	2000002c 	.word	0x2000002c
 80043fc:	200000ec 	.word	0x200000ec
 8004400:	200000f0 	.word	0x200000f0
 8004404:	200000f4 	.word	0x200000f4
 8004408:	bf800000 	.word	0xbf800000
 800440c:	200000d4 	.word	0x200000d4
 8004410:	200000d8 	.word	0x200000d8
 8004414:	200000dc 	.word	0x200000dc
 8004418:	40668000 	.word	0x40668000
 800441c:	200000e4 	.word	0x200000e4
 8004420:	200000e0 	.word	0x200000e0
 8004424:	200000e8 	.word	0x200000e8

08004428 <Calubration_DMP>:
 Function: Wait to active the DMP mode and set up.
 Entry parameters: none
 Return value: none
 **************************************************************************/
void Calubration_DMP(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
  float avg_gyro_x, avg_gyro_y, avg_gyro_z;

  do
  {
	  avg_gyro_x=avg_gyro_y=avg_gyro_z=0;
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	60fb      	str	r3, [r7, #12]
	  for (uint32_t i =0; i<100 ;i++)
 800443c:	2300      	movs	r3, #0
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	e04c      	b.n	80044dc <Calubration_DMP+0xb4>
	  {
		  Read_DMP();
 8004442:	f7ff fe99 	bl	8004178 <Read_DMP>
		  avg_gyro_x += abs((float)gyro[0]);
 8004446:	4b44      	ldr	r3, [pc, #272]	@ (8004558 <Calubration_DMP+0x130>)
 8004448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004458:	ee17 3a90 	vmov	r3, s15
 800445c:	2b00      	cmp	r3, #0
 800445e:	bfb8      	it	lt
 8004460:	425b      	neglt	r3, r3
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800446a:	ed97 7a03 	vldr	s14, [r7, #12]
 800446e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004472:	edc7 7a03 	vstr	s15, [r7, #12]
		  avg_gyro_y += abs((float)gyro[1]);
 8004476:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <Calubration_DMP+0x130>)
 8004478:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800447c:	ee07 3a90 	vmov	s15, r3
 8004480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004488:	ee17 3a90 	vmov	r3, s15
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfb8      	it	lt
 8004490:	425b      	neglt	r3, r3
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800449a:	ed97 7a02 	vldr	s14, [r7, #8]
 800449e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a2:	edc7 7a02 	vstr	s15, [r7, #8]
		  avg_gyro_z += abs((float)gyro[2]);
 80044a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004558 <Calubration_DMP+0x130>)
 80044a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044b8:	ee17 3a90 	vmov	r3, s15
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bfb8      	it	lt
 80044c0:	425b      	neglt	r3, r3
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80044ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d2:	edc7 7a01 	vstr	s15, [r7, #4]
	  for (uint32_t i =0; i<100 ;i++)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b63      	cmp	r3, #99	@ 0x63
 80044e0:	d9af      	bls.n	8004442 <Calubration_DMP+0x1a>
	  }
	  avg_gyro_x/=100;
 80044e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80044e6:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800455c <Calubration_DMP+0x134>
 80044ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ee:	edc7 7a03 	vstr	s15, [r7, #12]
	  avg_gyro_y/=100;
 80044f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80044f6:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800455c <Calubration_DMP+0x134>
 80044fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044fe:	edc7 7a02 	vstr	s15, [r7, #8]
	  avg_gyro_z/=100;
 8004502:	ed97 7a01 	vldr	s14, [r7, #4]
 8004506:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800455c <Calubration_DMP+0x134>
 800450a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800450e:	edc7 7a01 	vstr	s15, [r7, #4]

  } while(avg_gyro_x>5 || avg_gyro_y>5 || avg_gyro_z>5);
 8004512:	edd7 7a03 	vldr	s15, [r7, #12]
 8004516:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800451a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	dc84      	bgt.n	800442e <Calubration_DMP+0x6>
 8004524:	edd7 7a02 	vldr	s15, [r7, #8]
 8004528:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800452c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004534:	f73f af7b 	bgt.w	800442e <Calubration_DMP+0x6>
 8004538:	edd7 7a01 	vldr	s15, [r7, #4]
 800453c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	f73f af71 	bgt.w	800442e <Calubration_DMP+0x6>
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200000c4 	.word	0x200000c4
 800455c:	42c80000 	.word	0x42c80000

08004560 <DMP_get_gyro_offsets>:


void DMP_get_gyro_offsets(float* gx_offset, float* gy_offset, float* gz_offset)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
	  *gx_offset = 0.0;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
	  *gy_offset = 0.0;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
	  *gz_offset = 0.0;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
	  for(uint32_t i=0 ; i<100; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e031      	b.n	80045ee <DMP_get_gyro_offsets+0x8e>
	  {
		  Read_DMP();
 800458a:	f7ff fdf5 	bl	8004178 <Read_DMP>
		  *gx_offset = *gx_offset + (float)gyro[0];
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	ed93 7a00 	vldr	s14, [r3]
 8004594:	4b28      	ldr	r3, [pc, #160]	@ (8004638 <DMP_get_gyro_offsets+0xd8>)
 8004596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	edc3 7a00 	vstr	s15, [r3]
		  *gy_offset = *gy_offset + (float)gyro[1];
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	ed93 7a00 	vldr	s14, [r3]
 80045b2:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <DMP_get_gyro_offsets+0xd8>)
 80045b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045b8:	ee07 3a90 	vmov	s15, r3
 80045bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	edc3 7a00 	vstr	s15, [r3]
		  *gz_offset = *gz_offset + (float)gyro[2];
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	ed93 7a00 	vldr	s14, [r3]
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <DMP_get_gyro_offsets+0xd8>)
 80045d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	edc3 7a00 	vstr	s15, [r3]
	  for(uint32_t i=0 ; i<100; i++)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	3301      	adds	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b63      	cmp	r3, #99	@ 0x63
 80045f2:	d9ca      	bls.n	800458a <DMP_get_gyro_offsets+0x2a>
	  }

	  *gx_offset=*gx_offset/100;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	ed93 7a00 	vldr	s14, [r3]
 80045fa:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800463c <DMP_get_gyro_offsets+0xdc>
 80045fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	edc3 7a00 	vstr	s15, [r3]
	  *gy_offset=*gy_offset/100;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	ed93 7a00 	vldr	s14, [r3]
 800460e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800463c <DMP_get_gyro_offsets+0xdc>
 8004612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	edc3 7a00 	vstr	s15, [r3]
	  *gz_offset=*gz_offset/100;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	ed93 7a00 	vldr	s14, [r3]
 8004622:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800463c <DMP_get_gyro_offsets+0xdc>
 8004626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	edc3 7a00 	vstr	s15, [r3]

	  return;
 8004630:	bf00      	nop
}
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200000c4 	.word	0x200000c4
 800463c:	42c80000 	.word	0x42c80000

08004640 <initializePID>:
				   float T,
				   float min_integral_limit,
				   float max_integral_limit,
				   float min_output_limit,
				   float max_output_limit)
{
 8004640:	b480      	push	{r7}
 8004642:	b08b      	sub	sp, #44	@ 0x2c
 8004644:	af00      	add	r7, sp, #0
 8004646:	6278      	str	r0, [r7, #36]	@ 0x24
 8004648:	ed87 0a08 	vstr	s0, [r7, #32]
 800464c:	edc7 0a07 	vstr	s1, [r7, #28]
 8004650:	ed87 1a06 	vstr	s2, [r7, #24]
 8004654:	edc7 1a05 	vstr	s3, [r7, #20]
 8004658:	ed87 2a04 	vstr	s4, [r7, #16]
 800465c:	edc7 2a03 	vstr	s5, [r7, #12]
 8004660:	ed87 3a02 	vstr	s6, [r7, #8]
 8004664:	edc7 3a01 	vstr	s7, [r7, #4]
    pid->Kp = Kp;
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	609a      	str	r2, [r3, #8]
    pid->T = T;
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	60da      	str	r2, [r3, #12]

    pid->tau = 1e-8f;
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	4a12      	ldr	r2, [pc, #72]	@ (80046cc <initializePID+0x8c>)
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->prev_setpoint = 0.0f;
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	615a      	str	r2, [r3, #20]

    pid->prev_error      = 0.0f;
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
    pid->prev_derivative = 0.0f;
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	61da      	str	r2, [r3, #28]
    pid->integral        = 0.0f;
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	619a      	str	r2, [r3, #24]

    pid->min_integral_limit = min_integral_limit;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	621a      	str	r2, [r3, #32]
    pid->max_integral_limit = max_integral_limit;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->min_output_limit = min_output_limit;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->max_output_limit = max_output_limit;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80046be:	bf00      	nop
 80046c0:	372c      	adds	r7, #44	@ 0x2c
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	322bcc77 	.word	0x322bcc77

080046d0 <updatePID>:
// Update the PID controller
float updatePID(PIDController *pid,
		        float setpoint,
				float measurement,
				float measurement_dot)
{
 80046d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046d4:	b08a      	sub	sp, #40	@ 0x28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	ed87 0a02 	vstr	s0, [r7, #8]
 80046de:	edc7 0a01 	vstr	s1, [r7, #4]
 80046e2:	ed87 1a00 	vstr	s2, [r7]
	float error = setpoint - measurement;
 80046e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80046ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // Proportional term
    float P = pid->Kp * error;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	edd3 7a00 	vldr	s15, [r3]
 80046fc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004704:	edc7 7a08 	vstr	s15, [r7, #32]
    // Integral term
    pid->integral = pid->integral + 0.5 * pid->T  * (error + pid->prev_error);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fb fec7 	bl	80004a0 <__aeabi_f2d>
 8004712:	4604      	mov	r4, r0
 8004714:	460d      	mov	r5, r1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb fec0 	bl	80004a0 <__aeabi_f2d>
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	4b6d      	ldr	r3, [pc, #436]	@ (80048dc <updatePID+0x20c>)
 8004726:	f7fb ff13 	bl	8000550 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4690      	mov	r8, r2
 8004730:	4699      	mov	r9, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	ed93 7a04 	vldr	s14, [r3, #16]
 8004738:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800473c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004740:	ee17 0a90 	vmov	r0, s15
 8004744:	f7fb feac 	bl	80004a0 <__aeabi_f2d>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4640      	mov	r0, r8
 800474e:	4649      	mov	r1, r9
 8004750:	f7fb fefe 	bl	8000550 <__aeabi_dmul>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4620      	mov	r0, r4
 800475a:	4629      	mov	r1, r5
 800475c:	f7fb fd42 	bl	80001e4 <__adddf3>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	f7fc f904 	bl	8000974 <__aeabi_d2f>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	619a      	str	r2, [r3, #24]
    // constrain integral output
    float I = CLIP(pid->Ki * pid->integral, pid->min_integral_limit, pid->max_integral_limit);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	ed93 7a01 	vldr	s14, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	edd3 7a06 	vldr	s15, [r3, #24]
 800477e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	edd3 7a08 	vldr	s15, [r3, #32]
 8004788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004790:	d503      	bpl.n	800479a <updatePID+0xca>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	edd3 7a08 	vldr	s15, [r3, #32]
 8004798:	e01b      	b.n	80047d2 <updatePID+0x102>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	ed93 7a01 	vldr	s14, [r3, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80047a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80047b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b8:	dd03      	ble.n	80047c2 <updatePID+0xf2>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80047c0:	e007      	b.n	80047d2 <updatePID+0x102>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
    // Derivative term
    float filter = 2*(pid->tau - pid->T) / 2*(pid->tau + pid->T);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	edd3 7a03 	vldr	s15, [r3, #12]
 80047e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80047ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a06 	vstr	s15, [r7, #24]
    float D = 2 * pid->Kd * (((setpoint - pid->prev_setpoint) / pid->T) - measurement_dot) + filter*pid->prev_derivative;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004810:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	edd3 7a05 	vldr	s15, [r3, #20]
 800481a:	edd7 6a02 	vldr	s13, [r7, #8]
 800481e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	edd3 7a03 	vldr	s15, [r3, #12]
 8004828:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800482c:	edd7 7a00 	vldr	s15, [r7]
 8004830:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	edd3 6a07 	vldr	s13, [r3, #28]
 800483e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484a:	edc7 7a05 	vstr	s15, [r7, #20]
    // Compute the control output, constrain output
    float output = CLIP(P + I + D, pid->min_output_limit, pid->max_output_limit);
 800484e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004852:	edd7 7a07 	vldr	s15, [r7, #28]
 8004856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800485a:	edd7 7a05 	vldr	s15, [r7, #20]
 800485e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	d503      	bpl.n	800487a <updatePID+0x1aa>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004878:	e01f      	b.n	80048ba <updatePID+0x1ea>
 800487a:	ed97 7a08 	vldr	s14, [r7, #32]
 800487e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004886:	edd7 7a05 	vldr	s15, [r7, #20]
 800488a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	dd03      	ble.n	80048a6 <updatePID+0x1d6>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80048a4:	e009      	b.n	80048ba <updatePID+0x1ea>
 80048a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80048aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80048ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80048b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ba:	edc7 7a04 	vstr	s15, [r7, #16]
    // Save the current error for the next iteration, e[k-1]
    pid->prev_error = error;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c2:	611a      	str	r2, [r3, #16]
    // Save the current error for the next iteration,  D[k-1]
    pid->prev_derivative = D;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	61da      	str	r2, [r3, #28]

    return output;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	ee07 3a90 	vmov	s15, r3
}
 80048d0:	eeb0 0a67 	vmov.f32	s0, s15
 80048d4:	3728      	adds	r7, #40	@ 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048dc:	3fe00000 	.word	0x3fe00000

080048e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048e0:	b5b0      	push	{r4, r5, r7, lr}
 80048e2:	b0ae      	sub	sp, #184	@ 0xb8
 80048e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048e6:	f001 faeb 	bl	8005ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048ea:	f000 fce3 	bl	80052b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048ee:	f000 fed3 	bl	8005698 <MX_GPIO_Init>
  MX_I2C1_Init();
 80048f2:	f000 fd49 	bl	8005388 <MX_I2C1_Init>
  MX_TIM3_Init();
 80048f6:	f000 fe0b 	bl	8005510 <MX_TIM3_Init>
  MX_TIM1_Init();
 80048fa:	f000 fd73 	bl	80053e4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80048fe:	f000 fea1 	bl	8005644 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, rx_buffer, TRANSMITED_BYTES);
 8004902:	220c      	movs	r2, #12
 8004904:	49d6      	ldr	r1, [pc, #856]	@ (8004c60 <main+0x380>)
 8004906:	48d7      	ldr	r0, [pc, #860]	@ (8004c64 <main+0x384>)
 8004908:	f004 fe44 	bl	8009594 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004912:	48d5      	ldr	r0, [pc, #852]	@ (8004c68 <main+0x388>)
 8004914:	f001 fe92 	bl	800663c <HAL_GPIO_WritePin>

  if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK) // Throttle ---> radio ch3
 8004918:	2100      	movs	r1, #0
 800491a:	48d4      	ldr	r0, [pc, #848]	@ (8004c6c <main+0x38c>)
 800491c:	f003 fcd6 	bl	80082cc <HAL_TIM_IC_Start_IT>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <main+0x4a>
  {
	 Error_Handler();
 8004926:	f001 f891 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK) //Yaw ---> radio ch4
 800492a:	2104      	movs	r1, #4
 800492c:	48cf      	ldr	r0, [pc, #828]	@ (8004c6c <main+0x38c>)
 800492e:	f003 fccd 	bl	80082cc <HAL_TIM_IC_Start_IT>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <main+0x5c>
  {
     Error_Handler();
 8004938:	f001 f888 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK) // Pitch --> radio ch2
 800493c:	2108      	movs	r1, #8
 800493e:	48cb      	ldr	r0, [pc, #812]	@ (8004c6c <main+0x38c>)
 8004940:	f003 fcc4 	bl	80082cc <HAL_TIM_IC_Start_IT>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <main+0x6e>
  {
  	 Error_Handler();
 800494a:	f001 f87f 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK) // Roll ---> radio ch1
 800494e:	210c      	movs	r1, #12
 8004950:	48c6      	ldr	r0, [pc, #792]	@ (8004c6c <main+0x38c>)
 8004952:	f003 fcbb 	bl	80082cc <HAL_TIM_IC_Start_IT>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <main+0x80>
  {
  	 Error_Handler();
 800495c:	f001 f876 	bl	8005a4c <Error_Handler>
	  usWidth_ch1=usWidth_ch2=usWidth_ch3=usWidth_ch4=0;
	  HAL_Delay(250);
  }*/

  /*Initialize PWM motors and servos */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  			/* Motor 1 */
 8004960:	2100      	movs	r1, #0
 8004962:	48c3      	ldr	r0, [pc, #780]	@ (8004c70 <main+0x390>)
 8004964:	f003 fba8 	bl	80080b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  			/* Motor 2 */
 8004968:	2104      	movs	r1, #4
 800496a:	48c1      	ldr	r0, [pc, #772]	@ (8004c70 <main+0x390>)
 800496c:	f003 fba4 	bl	80080b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); 		 	/* Motor 3 */
 8004970:	2108      	movs	r1, #8
 8004972:	48bf      	ldr	r0, [pc, #764]	@ (8004c70 <main+0x390>)
 8004974:	f003 fba0 	bl	80080b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);  			/* Motor 4 */
 8004978:	210c      	movs	r1, #12
 800497a:	48bd      	ldr	r0, [pc, #756]	@ (8004c70 <main+0x390>)
 800497c:	f003 fb9c 	bl	80080b8 <HAL_TIM_PWM_Start>
  HAL_Delay(150);
 8004980:	2096      	movs	r0, #150	@ 0x96
 8004982:	f001 fb0f 	bl	8005fa4 <HAL_Delay>
 /*turn off motors and center servos */
  htim3.Instance->CCR1 = (uint32_t)SERVO_PITCH_CENTER;  /*  Channel 1 Motor 1 */
 8004986:	4bba      	ldr	r3, [pc, #744]	@ (8004c70 <main+0x390>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f240 620e 	movw	r2, #1550	@ 0x60e
 800498e:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2 = (uint32_t)SERVO_ROLL_CENTER;   /*  Channel 2 Motor 2 */
 8004990:	4bb7      	ldr	r3, [pc, #732]	@ (8004c70 <main+0x390>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 8004998:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3 = (uint32_t)DUTY_CYCLE_TURNOFF;  /*  Channel 3 Motor 3 */
 800499a:	4bb5      	ldr	r3, [pc, #724]	@ (8004c70 <main+0x390>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4 = (uint32_t)DUTY_CYCLE_TURNOFF;  /*  Channel 4 Motor 4 */
 80049a4:	4bb2      	ldr	r3, [pc, #712]	@ (8004c70 <main+0x390>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DMP MPU initialize */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80049ae:	2201      	movs	r2, #1
 80049b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049b4:	48ac      	ldr	r0, [pc, #688]	@ (8004c68 <main+0x388>)
 80049b6:	f001 fe41 	bl	800663c <HAL_GPIO_WritePin>
  HAL_Delay(150);
 80049ba:	2096      	movs	r0, #150	@ 0x96
 80049bc:	f001 faf2 	bl	8005fa4 <HAL_Delay>

  do{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80049c0:	2200      	movs	r2, #0
 80049c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049c6:	48a8      	ldr	r0, [pc, #672]	@ (8004c68 <main+0x388>)
 80049c8:	f001 fe38 	bl	800663c <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 80049cc:	2096      	movs	r0, #150	@ 0x96
 80049ce:	f001 fae9 	bl	8005fa4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80049d2:	2201      	movs	r2, #1
 80049d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049d8:	48a3      	ldr	r0, [pc, #652]	@ (8004c68 <main+0x388>)
 80049da:	f001 fe2f 	bl	800663c <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 80049de:	2096      	movs	r0, #150	@ 0x96
 80049e0:	f001 fae0 	bl	8005fa4 <HAL_Delay>

  } while(MPU6050_getDeviceID() != 0x68);
 80049e4:	f7ff fb82 	bl	80040ec <MPU6050_getDeviceID>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b68      	cmp	r3, #104	@ 0x68
 80049ec:	d1e8      	bne.n	80049c0 <main+0xe0>

  DMP_Init();
 80049ee:	f7ff fb91 	bl	8004114 <DMP_Init>
  // Wait 10s for calibration, don't move the IMU!
  Calubration_DMP();
 80049f2:	f7ff fd19 	bl	8004428 <Calubration_DMP>
  float gx_offset, gy_offset, gz_offset;
  DMP_get_gyro_offsets(&gx_offset, &gy_offset, &gz_offset);
 80049f6:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80049fa:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80049fe:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fdac 	bl	8004560 <DMP_get_gyro_offsets>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PIDController pid_roll, pid_pitch, pid_yaw;
  /* PID ROLL */
  initializePID(&pid_roll,
 8004a08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004a0c:	eddf 3a99 	vldr	s7, [pc, #612]	@ 8004c74 <main+0x394>
 8004a10:	ed9f 3a99 	vldr	s6, [pc, #612]	@ 8004c78 <main+0x398>
 8004a14:	eddf 2a99 	vldr	s5, [pc, #612]	@ 8004c7c <main+0x39c>
 8004a18:	ed9f 2a99 	vldr	s4, [pc, #612]	@ 8004c80 <main+0x3a0>
 8004a1c:	eddf 1a99 	vldr	s3, [pc, #612]	@ 8004c84 <main+0x3a4>
 8004a20:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8004c88 <main+0x3a8>
 8004a24:	eddf 0a99 	vldr	s1, [pc, #612]	@ 8004c8c <main+0x3ac>
 8004a28:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8004c90 <main+0x3b0>
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fe07 	bl	8004640 <initializePID>
				  PID_LIM_MIN_INT_ROLL,
				  PID_LIM_MAX_INT_ROLL,
				  PID_LIM_MIN_ROLL,
				  PID_LIM_MAX_ROLL);
  /* PID PITCH */
  initializePID(&pid_pitch,
 8004a32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a36:	eddf 3a8f 	vldr	s7, [pc, #572]	@ 8004c74 <main+0x394>
 8004a3a:	ed9f 3a8f 	vldr	s6, [pc, #572]	@ 8004c78 <main+0x398>
 8004a3e:	eddf 2a8f 	vldr	s5, [pc, #572]	@ 8004c7c <main+0x39c>
 8004a42:	ed9f 2a8f 	vldr	s4, [pc, #572]	@ 8004c80 <main+0x3a0>
 8004a46:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8004c84 <main+0x3a4>
 8004a4a:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 8004c88 <main+0x3a8>
 8004a4e:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8004c8c <main+0x3ac>
 8004a52:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 8004c90 <main+0x3b0>
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fdf2 	bl	8004640 <initializePID>
  				  PID_LIM_MIN_INT_PITCH,
  				  PID_LIM_MAX_INT_PITCH,
  				  PID_LIM_MIN_PITCH,
  				  PID_LIM_MAX_PITCH);
  /* PID YAW */
  initializePID(&pid_yaw,
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	eddf 3a85 	vldr	s7, [pc, #532]	@ 8004c74 <main+0x394>
 8004a62:	ed9f 3a85 	vldr	s6, [pc, #532]	@ 8004c78 <main+0x398>
 8004a66:	eddf 2a8b 	vldr	s5, [pc, #556]	@ 8004c94 <main+0x3b4>
 8004a6a:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 8004c98 <main+0x3b8>
 8004a6e:	eddf 1a85 	vldr	s3, [pc, #532]	@ 8004c84 <main+0x3a4>
 8004a72:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8004c8c <main+0x3ac>
 8004a76:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8004c8c <main+0x3ac>
 8004a7a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fdde 	bl	8004640 <initializePID>

  float yaw_offset, roll_offset, pitch_offset;

  do
  {
	  Read_DMP();
 8004a84:	f7ff fb78 	bl	8004178 <Read_DMP>
	  yaw_offset   = yaw;
 8004a88:	4b84      	ldr	r3, [pc, #528]	@ (8004c9c <main+0x3bc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	  roll_offset  = roll;
 8004a90:	4b83      	ldr	r3, [pc, #524]	@ (8004ca0 <main+0x3c0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	  pitch_offset = pitch;
 8004a98:	4b82      	ldr	r3, [pc, #520]	@ (8004ca4 <main+0x3c4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  }
  while (usWidth_ch1 > 1100); // throttle upper 1050 don't start!
 8004aa0:	4b81      	ldr	r3, [pc, #516]	@ (8004ca8 <main+0x3c8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f240 424c 	movw	r2, #1100	@ 0x44c
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d8eb      	bhi.n	8004a84 <main+0x1a4>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop_timer = HAL_GetTick();
 8004aac:	f001 fa6e 	bl	8005f8c <HAL_GetTick>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8004cac <main+0x3cc>)
 8004ab4:	6013      	str	r3, [r2, #0]
	Read_DMP();
 8004ab6:	f7ff fb5f 	bl	8004178 <Read_DMP>
	// get angle rates degrees / seconds with an exponential filter
	rate_roll  = GYRO_SING*((1-ALPHA)*rate_roll  + ALPHA*((((float)gyro[0]) - gx_offset) / LSB_Sensitivity));
 8004aba:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb0 <main+0x3d0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fb fcee 	bl	80004a0 <__aeabi_f2d>
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	f7fb fd40 	bl	8000550 <__aeabi_dmul>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	4b76      	ldr	r3, [pc, #472]	@ (8004cb4 <main+0x3d4>)
 8004ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ae6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aee:	ee17 0a90 	vmov	r0, s15
 8004af2:	f7fb fcd5 	bl	80004a0 <__aeabi_f2d>
 8004af6:	a358      	add	r3, pc, #352	@ (adr r3, 8004c58 <main+0x378>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fe52 	bl	80007a4 <__aeabi_ddiv>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4620      	mov	r0, r4
 8004b06:	4629      	mov	r1, r5
 8004b08:	f7fb fb6c 	bl	80001e4 <__adddf3>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7fb ff2e 	bl	8000974 <__aeabi_d2f>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef1 7a67 	vneg.f32	s15, s15
 8004b22:	4b63      	ldr	r3, [pc, #396]	@ (8004cb0 <main+0x3d0>)
 8004b24:	edc3 7a00 	vstr	s15, [r3]
	rate_pitch = GYRO_SING*((1-ALPHA)*rate_pitch + ALPHA*((((float)gyro[1]) - gy_offset) / LSB_Sensitivity));
 8004b28:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <main+0x3d8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fb fcb7 	bl	80004a0 <__aeabi_f2d>
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	f7fb fd09 	bl	8000550 <__aeabi_dmul>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4614      	mov	r4, r2
 8004b44:	461d      	mov	r5, r3
 8004b46:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb4 <main+0x3d4>)
 8004b48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b54:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b5c:	ee17 0a90 	vmov	r0, s15
 8004b60:	f7fb fc9e 	bl	80004a0 <__aeabi_f2d>
 8004b64:	a33c      	add	r3, pc, #240	@ (adr r3, 8004c58 <main+0x378>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f7fb fe1b 	bl	80007a4 <__aeabi_ddiv>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb fb35 	bl	80001e4 <__adddf3>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f7fb fef7 	bl	8000974 <__aeabi_d2f>
 8004b86:	4603      	mov	r3, r0
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef1 7a67 	vneg.f32	s15, s15
 8004b90:	4b49      	ldr	r3, [pc, #292]	@ (8004cb8 <main+0x3d8>)
 8004b92:	edc3 7a00 	vstr	s15, [r3]
	rate_yaw   = GYRO_SING*((1-ALPHA)*rate_yaw   + ALPHA*((((float)gyro[2]) - gz_offset) / LSB_Sensitivity));
 8004b96:	4b49      	ldr	r3, [pc, #292]	@ (8004cbc <main+0x3dc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fb fc80 	bl	80004a0 <__aeabi_f2d>
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f7fb fcd2 	bl	8000550 <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	461d      	mov	r5, r3
 8004bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8004cb4 <main+0x3d4>)
 8004bb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bc2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bca:	ee17 0a90 	vmov	r0, s15
 8004bce:	f7fb fc67 	bl	80004a0 <__aeabi_f2d>
 8004bd2:	a321      	add	r3, pc, #132	@ (adr r3, 8004c58 <main+0x378>)
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f7fb fde4 	bl	80007a4 <__aeabi_ddiv>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4620      	mov	r0, r4
 8004be2:	4629      	mov	r1, r5
 8004be4:	f7fb fafe 	bl	80001e4 <__adddf3>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f7fb fec0 	bl	8000974 <__aeabi_d2f>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef1 7a67 	vneg.f32	s15, s15
 8004bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004cbc <main+0x3dc>)
 8004c00:	edc3 7a00 	vstr	s15, [r3]
	yaw -= yaw_offset;
 8004c04:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <main+0x3bc>)
 8004c06:	ed93 7a00 	vldr	s14, [r3]
 8004c0a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8004c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c12:	4b22      	ldr	r3, [pc, #136]	@ (8004c9c <main+0x3bc>)
 8004c14:	edc3 7a00 	vstr	s15, [r3]
	roll -=roll_offset;
 8004c18:	4b21      	ldr	r3, [pc, #132]	@ (8004ca0 <main+0x3c0>)
 8004c1a:	ed93 7a00 	vldr	s14, [r3]
 8004c1e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <main+0x3c0>)
 8004c28:	edc3 7a00 	vstr	s15, [r3]
	pitch-=pitch_offset;
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <main+0x3c4>)
 8004c2e:	ed93 7a00 	vldr	s14, [r3]
 8004c32:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca4 <main+0x3c4>)
 8004c3c:	edc3 7a00 	vstr	s15, [r3]
	//TODO only for debug:
	gyro_roll  +=rate_roll*SAMPLE_TIME_S;
 8004c40:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <main+0x3d0>)
 8004c42:	edd3 7a00 	vldr	s15, [r3]
 8004c46:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8004c84 <main+0x3a4>
 8004c4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc0 <main+0x3e0>)
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	e036      	b.n	8004cc4 <main+0x3e4>
 8004c56:	bf00      	nop
 8004c58:	66666666 	.word	0x66666666
 8004c5c:	40306666 	.word	0x40306666
 8004c60:	200002c4 	.word	0x200002c4
 8004c64:	200001ec 	.word	0x200001ec
 8004c68:	40020400 	.word	0x40020400
 8004c6c:	2000015c 	.word	0x2000015c
 8004c70:	200001a4 	.word	0x200001a4
 8004c74:	43c80000 	.word	0x43c80000
 8004c78:	c3c80000 	.word	0xc3c80000
 8004c7c:	42480000 	.word	0x42480000
 8004c80:	c2480000 	.word	0xc2480000
 8004c84:	3ba3d70a 	.word	0x3ba3d70a
 8004c88:	3db851eb 	.word	0x3db851eb
 8004c8c:	00000000 	.word	0x00000000
 8004c90:	412ccccd 	.word	0x412ccccd
 8004c94:	42c80000 	.word	0x42c80000
 8004c98:	c2c80000 	.word	0xc2c80000
 8004c9c:	200000e8 	.word	0x200000e8
 8004ca0:	200000e4 	.word	0x200000e4
 8004ca4:	200000e0 	.word	0x200000e0
 8004ca8:	20000244 	.word	0x20000244
 8004cac:	20000240 	.word	0x20000240
 8004cb0:	200002b0 	.word	0x200002b0
 8004cb4:	200000c4 	.word	0x200000c4
 8004cb8:	200002b4 	.word	0x200002b4
 8004cbc:	200002b8 	.word	0x200002b8
 8004cc0:	20000234 	.word	0x20000234
 8004cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ec0 <main+0x5e0>)
 8004cca:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch +=rate_pitch*SAMPLE_TIME_S;
 8004cce:	4b7d      	ldr	r3, [pc, #500]	@ (8004ec4 <main+0x5e4>)
 8004cd0:	edd3 7a00 	vldr	s15, [r3]
 8004cd4:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8004ec8 <main+0x5e8>
 8004cd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8004ecc <main+0x5ec>)
 8004cde:	edd3 7a00 	vldr	s15, [r3]
 8004ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce6:	4b79      	ldr	r3, [pc, #484]	@ (8004ecc <main+0x5ec>)
 8004ce8:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw   +=rate_yaw*SAMPLE_TIME_S;
 8004cec:	4b78      	ldr	r3, [pc, #480]	@ (8004ed0 <main+0x5f0>)
 8004cee:	edd3 7a00 	vldr	s15, [r3]
 8004cf2:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004ec8 <main+0x5e8>
 8004cf6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cfa:	4b76      	ldr	r3, [pc, #472]	@ (8004ed4 <main+0x5f4>)
 8004cfc:	edd3 7a00 	vldr	s15, [r3]
 8004d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d04:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <main+0x5f4>)
 8004d06:	edc3 7a00 	vstr	s15, [r3]

	throttle_radio = usWidth_ch1;
 8004d0a:	4b73      	ldr	r3, [pc, #460]	@ (8004ed8 <main+0x5f8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	4b71      	ldr	r3, [pc, #452]	@ (8004edc <main+0x5fc>)
 8004d18:	edc3 7a00 	vstr	s15, [r3]
	//setpoints
	setpoint_yaw   = RADIO_MIDDLE_FREQ - (float)usWidth_ch2;
 8004d1c:	4b70      	ldr	r3, [pc, #448]	@ (8004ee0 <main+0x600>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d28:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8004ee4 <main+0x604>
 8004d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d30:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <main+0x608>)
 8004d32:	edc3 7a00 	vstr	s15, [r3]
	if (abs(setpoint_yaw)< RADIO_DEAD_BAND){
 8004d36:	4b6c      	ldr	r3, [pc, #432]	@ (8004ee8 <main+0x608>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d40:	ee17 3a90 	vmov	r3, s15
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfb8      	it	lt
 8004d48:	425b      	neglt	r3, r3
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d52:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8004d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5e:	d504      	bpl.n	8004d6a <main+0x48a>
		setpoint_yaw=0.0;
 8004d60:	4b61      	ldr	r3, [pc, #388]	@ (8004ee8 <main+0x608>)
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e02d      	b.n	8004dc6 <main+0x4e6>
	}else{
		setpoint_yaw = MAP(setpoint_yaw, -500.0, +500.0,-20.0,20.0);
 8004d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ee8 <main+0x608>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fb fb96 	bl	80004a0 <__aeabi_f2d>
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	4b5c      	ldr	r3, [pc, #368]	@ (8004eec <main+0x60c>)
 8004d7a:	f7fb fa33 	bl	80001e4 <__adddf3>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	4b59      	ldr	r3, [pc, #356]	@ (8004ef0 <main+0x610>)
 8004d8c:	f7fb fbe0 	bl	8000550 <__aeabi_dmul>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	4b55      	ldr	r3, [pc, #340]	@ (8004ef4 <main+0x614>)
 8004d9e:	f7fb fd01 	bl	80007a4 <__aeabi_ddiv>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	4b52      	ldr	r3, [pc, #328]	@ (8004ef8 <main+0x618>)
 8004db0:	f7fb fa16 	bl	80001e0 <__aeabi_dsub>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f7fb fdda 	bl	8000974 <__aeabi_d2f>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a49      	ldr	r2, [pc, #292]	@ (8004ee8 <main+0x608>)
 8004dc4:	6013      	str	r3, [r2, #0]
	}

	setpoint_roll  = RADIO_MIDDLE_FREQ - (float)usWidth_ch3;
 8004dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8004efc <main+0x61c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8004ee4 <main+0x604>
 8004dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dda:	4b49      	ldr	r3, [pc, #292]	@ (8004f00 <main+0x620>)
 8004ddc:	edc3 7a00 	vstr	s15, [r3]
	if (abs(setpoint_roll)< RADIO_DEAD_BAND){
 8004de0:	4b47      	ldr	r3, [pc, #284]	@ (8004f00 <main+0x620>)
 8004de2:	edd3 7a00 	vldr	s15, [r3]
 8004de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dea:	ee17 3a90 	vmov	r3, s15
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfb8      	it	lt
 8004df2:	425b      	neglt	r3, r3
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dfc:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8004e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e08:	d504      	bpl.n	8004e14 <main+0x534>
		setpoint_roll=0.0;
 8004e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f00 <main+0x620>)
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e02d      	b.n	8004e70 <main+0x590>
	} else{
		setpoint_roll = MAP(setpoint_roll, -500.0, +500.0,-20.0,20.0);
 8004e14:	4b3a      	ldr	r3, [pc, #232]	@ (8004f00 <main+0x620>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fb fb41 	bl	80004a0 <__aeabi_f2d>
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	4b32      	ldr	r3, [pc, #200]	@ (8004eec <main+0x60c>)
 8004e24:	f7fb f9de 	bl	80001e4 <__adddf3>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef0 <main+0x610>)
 8004e36:	f7fb fb8b 	bl	8000550 <__aeabi_dmul>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef4 <main+0x614>)
 8004e48:	f7fb fcac 	bl	80007a4 <__aeabi_ddiv>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	4b27      	ldr	r3, [pc, #156]	@ (8004ef8 <main+0x618>)
 8004e5a:	f7fb f9c1 	bl	80001e0 <__aeabi_dsub>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	f7fb fd85 	bl	8000974 <__aeabi_d2f>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4a24      	ldr	r2, [pc, #144]	@ (8004f00 <main+0x620>)
 8004e6e:	6013      	str	r3, [r2, #0]
	}

	setpoint_pitch = RADIO_MIDDLE_FREQ - (float)usWidth_ch4;
 8004e70:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <main+0x624>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	ee07 3a90 	vmov	s15, r3
 8004e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004ee4 <main+0x604>
 8004e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e84:	4b20      	ldr	r3, [pc, #128]	@ (8004f08 <main+0x628>)
 8004e86:	edc3 7a00 	vstr	s15, [r3]
	if (abs(setpoint_pitch)< RADIO_DEAD_BAND){
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <main+0x628>)
 8004e8c:	edd3 7a00 	vldr	s15, [r3]
 8004e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e94:	ee17 3a90 	vmov	r3, s15
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bfb8      	it	lt
 8004e9c:	425b      	neglt	r3, r3
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8004eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb2:	d52b      	bpl.n	8004f0c <main+0x62c>
		setpoint_pitch=0.0;
 8004eb4:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <main+0x628>)
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e054      	b.n	8004f68 <main+0x688>
 8004ebe:	bf00      	nop
 8004ec0:	20000234 	.word	0x20000234
 8004ec4:	200002b4 	.word	0x200002b4
 8004ec8:	3ba3d70a 	.word	0x3ba3d70a
 8004ecc:	20000238 	.word	0x20000238
 8004ed0:	200002b8 	.word	0x200002b8
 8004ed4:	2000023c 	.word	0x2000023c
 8004ed8:	20000244 	.word	0x20000244
 8004edc:	200002bc 	.word	0x200002bc
 8004ee0:	20000258 	.word	0x20000258
 8004ee4:	44bb8000 	.word	0x44bb8000
 8004ee8:	2000029c 	.word	0x2000029c
 8004eec:	407f4000 	.word	0x407f4000
 8004ef0:	40440000 	.word	0x40440000
 8004ef4:	408f4000 	.word	0x408f4000
 8004ef8:	40340000 	.word	0x40340000
 8004efc:	2000026c 	.word	0x2000026c
 8004f00:	20000294 	.word	0x20000294
 8004f04:	20000280 	.word	0x20000280
 8004f08:	20000298 	.word	0x20000298
	} else{
		setpoint_pitch = MAP(setpoint_pitch, -500.0, +500.0,+20.0,-20.0);
 8004f0c:	4bb3      	ldr	r3, [pc, #716]	@ (80051dc <main+0x8fc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb fac5 	bl	80004a0 <__aeabi_f2d>
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	4bb1      	ldr	r3, [pc, #708]	@ (80051e0 <main+0x900>)
 8004f1c:	f7fb f962 	bl	80001e4 <__adddf3>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	4bad      	ldr	r3, [pc, #692]	@ (80051e4 <main+0x904>)
 8004f2e:	f7fb fb0f 	bl	8000550 <__aeabi_dmul>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	4baa      	ldr	r3, [pc, #680]	@ (80051e8 <main+0x908>)
 8004f40:	f7fb fc30 	bl	80007a4 <__aeabi_ddiv>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	4ba6      	ldr	r3, [pc, #664]	@ (80051ec <main+0x90c>)
 8004f52:	f7fb f947 	bl	80001e4 <__adddf3>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f7fb fd09 	bl	8000974 <__aeabi_d2f>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4a9d      	ldr	r2, [pc, #628]	@ (80051dc <main+0x8fc>)
 8004f66:	6013      	str	r3, [r2, #0]
	}
	// Feedback loop control
	pid_yaw_output   = updatePID(&pid_yaw, setpoint_yaw, yaw, rate_yaw);
 8004f68:	4ba1      	ldr	r3, [pc, #644]	@ (80051f0 <main+0x910>)
 8004f6a:	edd3 7a00 	vldr	s15, [r3]
 8004f6e:	4ba1      	ldr	r3, [pc, #644]	@ (80051f4 <main+0x914>)
 8004f70:	ed93 7a00 	vldr	s14, [r3]
 8004f74:	4ba0      	ldr	r3, [pc, #640]	@ (80051f8 <main+0x918>)
 8004f76:	edd3 6a00 	vldr	s13, [r3]
 8004f7a:	1d3b      	adds	r3, r7, #4
 8004f7c:	eeb0 1a66 	vmov.f32	s2, s13
 8004f80:	eef0 0a47 	vmov.f32	s1, s14
 8004f84:	eeb0 0a67 	vmov.f32	s0, s15
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fba1 	bl	80046d0 <updatePID>
 8004f8e:	eef0 7a40 	vmov.f32	s15, s0
 8004f92:	4b9a      	ldr	r3, [pc, #616]	@ (80051fc <main+0x91c>)
 8004f94:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_output = updatePID(&pid_pitch, setpoint_pitch, pitch, rate_pitch);
 8004f98:	4b90      	ldr	r3, [pc, #576]	@ (80051dc <main+0x8fc>)
 8004f9a:	edd3 7a00 	vldr	s15, [r3]
 8004f9e:	4b98      	ldr	r3, [pc, #608]	@ (8005200 <main+0x920>)
 8004fa0:	ed93 7a00 	vldr	s14, [r3]
 8004fa4:	4b97      	ldr	r3, [pc, #604]	@ (8005204 <main+0x924>)
 8004fa6:	edd3 6a00 	vldr	s13, [r3]
 8004faa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004fae:	eeb0 1a66 	vmov.f32	s2, s13
 8004fb2:	eef0 0a47 	vmov.f32	s1, s14
 8004fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fb88 	bl	80046d0 <updatePID>
 8004fc0:	eef0 7a40 	vmov.f32	s15, s0
 8004fc4:	4b90      	ldr	r3, [pc, #576]	@ (8005208 <main+0x928>)
 8004fc6:	edc3 7a00 	vstr	s15, [r3]
	pid_roll_output  = updatePID(&pid_roll, setpoint_roll, roll, rate_roll);
 8004fca:	4b90      	ldr	r3, [pc, #576]	@ (800520c <main+0x92c>)
 8004fcc:	edd3 7a00 	vldr	s15, [r3]
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8005210 <main+0x930>)
 8004fd2:	ed93 7a00 	vldr	s14, [r3]
 8004fd6:	4b8f      	ldr	r3, [pc, #572]	@ (8005214 <main+0x934>)
 8004fd8:	edd3 6a00 	vldr	s13, [r3]
 8004fdc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004fe0:	eeb0 1a66 	vmov.f32	s2, s13
 8004fe4:	eef0 0a47 	vmov.f32	s1, s14
 8004fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fb6f 	bl	80046d0 <updatePID>
 8004ff2:	eef0 7a40 	vmov.f32	s15, s0
 8004ff6:	4b88      	ldr	r3, [pc, #544]	@ (8005218 <main+0x938>)
 8004ff8:	edc3 7a00 	vstr	s15, [r3]
	/* set PWM Duty cycle */
	if (turn_on == 0 && usWidth_ch1 < 1080 && usWidth_ch2 > 1850) turn_on = 1;
 8004ffc:	4b87      	ldr	r3, [pc, #540]	@ (800521c <main+0x93c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10d      	bne.n	8005020 <main+0x740>
 8005004:	4b86      	ldr	r3, [pc, #536]	@ (8005220 <main+0x940>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f5b3 6f87 	cmp.w	r3, #1080	@ 0x438
 800500c:	d208      	bcs.n	8005020 <main+0x740>
 800500e:	4b85      	ldr	r3, [pc, #532]	@ (8005224 <main+0x944>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f240 723a 	movw	r2, #1850	@ 0x73a
 8005016:	4293      	cmp	r3, r2
 8005018:	d902      	bls.n	8005020 <main+0x740>
 800501a:	4b80      	ldr	r3, [pc, #512]	@ (800521c <main+0x93c>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
	if (turn_on == 1 && usWidth_ch1 < 1080 && usWidth_ch2 < 1050) turn_on = 0;
 8005020:	4b7e      	ldr	r3, [pc, #504]	@ (800521c <main+0x93c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10d      	bne.n	8005044 <main+0x764>
 8005028:	4b7d      	ldr	r3, [pc, #500]	@ (8005220 <main+0x940>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f5b3 6f87 	cmp.w	r3, #1080	@ 0x438
 8005030:	d208      	bcs.n	8005044 <main+0x764>
 8005032:	4b7c      	ldr	r3, [pc, #496]	@ (8005224 <main+0x944>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f240 4219 	movw	r2, #1049	@ 0x419
 800503a:	4293      	cmp	r3, r2
 800503c:	d802      	bhi.n	8005044 <main+0x764>
 800503e:	4b77      	ldr	r3, [pc, #476]	@ (800521c <main+0x93c>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
	if(turn_on)
 8005044:	4b75      	ldr	r3, [pc, #468]	@ (800521c <main+0x93c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80fd 	beq.w	8005248 <main+0x968>
	{
		htim3.Instance->CCR1 = (uint32_t)CLIP(SERVO_ROLL_CENTER + pid_roll_output,   SERVO_ROLL_MIN,  SERVO_ROLL_MAX);       /* Channel 1 serve roll  */
 800504e:	4b72      	ldr	r3, [pc, #456]	@ (8005218 <main+0x938>)
 8005050:	edd3 7a00 	vldr	s15, [r3]
 8005054:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005228 <main+0x948>
 8005058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800505c:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800522c <main+0x94c>
 8005060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005068:	d502      	bpl.n	8005070 <main+0x790>
 800506a:	f240 434c 	movw	r3, #1100	@ 0x44c
 800506e:	e01b      	b.n	80050a8 <main+0x7c8>
 8005070:	4b69      	ldr	r3, [pc, #420]	@ (8005218 <main+0x938>)
 8005072:	edd3 7a00 	vldr	s15, [r3]
 8005076:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005228 <main+0x948>
 800507a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800507e:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005230 <main+0x950>
 8005082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508a:	dd02      	ble.n	8005092 <main+0x7b2>
 800508c:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8005090:	e00a      	b.n	80050a8 <main+0x7c8>
 8005092:	4b61      	ldr	r3, [pc, #388]	@ (8005218 <main+0x938>)
 8005094:	edd3 7a00 	vldr	s15, [r3]
 8005098:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8005228 <main+0x948>
 800509c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a4:	ee17 3a90 	vmov	r3, s15
 80050a8:	4a62      	ldr	r2, [pc, #392]	@ (8005234 <main+0x954>)
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	6353      	str	r3, [r2, #52]	@ 0x34
		htim3.Instance->CCR2 = (uint32_t)CLIP(SERVO_PITCH_CENTER + pid_pitch_output, SERVO_PITCH_MIN, SERVO_PITCH_MAX);      /* Channel 2 serve pitch */
 80050ae:	4b56      	ldr	r3, [pc, #344]	@ (8005208 <main+0x928>)
 80050b0:	edd3 7a00 	vldr	s15, [r3]
 80050b4:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8005238 <main+0x958>
 80050b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050bc:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800522c <main+0x94c>
 80050c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	d502      	bpl.n	80050d0 <main+0x7f0>
 80050ca:	f240 434c 	movw	r3, #1100	@ 0x44c
 80050ce:	e01b      	b.n	8005108 <main+0x828>
 80050d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005208 <main+0x928>)
 80050d2:	edd3 7a00 	vldr	s15, [r3]
 80050d6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005238 <main+0x958>
 80050da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050de:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005230 <main+0x950>
 80050e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ea:	dd02      	ble.n	80050f2 <main+0x812>
 80050ec:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80050f0:	e00a      	b.n	8005108 <main+0x828>
 80050f2:	4b45      	ldr	r3, [pc, #276]	@ (8005208 <main+0x928>)
 80050f4:	edd3 7a00 	vldr	s15, [r3]
 80050f8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005238 <main+0x958>
 80050fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005104:	ee17 3a90 	vmov	r3, s15
 8005108:	4a4a      	ldr	r2, [pc, #296]	@ (8005234 <main+0x954>)
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	6393      	str	r3, [r2, #56]	@ 0x38
		htim3.Instance->CCR3 = (uint32_t)CLIP(throttle_radio + pid_yaw_output, DUTY_CYCLE_MOTOR_MIN, DUTY_CYCLE_MOTOR_MAX);  /* Channel 3 motor CW    */
 800510e:	4b4b      	ldr	r3, [pc, #300]	@ (800523c <main+0x95c>)
 8005110:	ed93 7a00 	vldr	s14, [r3]
 8005114:	4b39      	ldr	r3, [pc, #228]	@ (80051fc <main+0x91c>)
 8005116:	edd3 7a00 	vldr	s15, [r3]
 800511a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800511e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8005240 <main+0x960>
 8005122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512a:	d502      	bpl.n	8005132 <main+0x852>
 800512c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8005130:	e01d      	b.n	800516e <main+0x88e>
 8005132:	4b42      	ldr	r3, [pc, #264]	@ (800523c <main+0x95c>)
 8005134:	ed93 7a00 	vldr	s14, [r3]
 8005138:	4b30      	ldr	r3, [pc, #192]	@ (80051fc <main+0x91c>)
 800513a:	edd3 7a00 	vldr	s15, [r3]
 800513e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005142:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8005244 <main+0x964>
 8005146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514e:	dd02      	ble.n	8005156 <main+0x876>
 8005150:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005154:	e00b      	b.n	800516e <main+0x88e>
 8005156:	4b39      	ldr	r3, [pc, #228]	@ (800523c <main+0x95c>)
 8005158:	ed93 7a00 	vldr	s14, [r3]
 800515c:	4b27      	ldr	r3, [pc, #156]	@ (80051fc <main+0x91c>)
 800515e:	edd3 7a00 	vldr	s15, [r3]
 8005162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516a:	ee17 3a90 	vmov	r3, s15
 800516e:	4a31      	ldr	r2, [pc, #196]	@ (8005234 <main+0x954>)
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	63d3      	str	r3, [r2, #60]	@ 0x3c
		htim3.Instance->CCR4 = (uint32_t)CLIP(throttle_radio - pid_yaw_output, DUTY_CYCLE_MOTOR_MIN, DUTY_CYCLE_MOTOR_MAX);  /* Channel 4 motor CCW   */
 8005174:	4b31      	ldr	r3, [pc, #196]	@ (800523c <main+0x95c>)
 8005176:	ed93 7a00 	vldr	s14, [r3]
 800517a:	4b20      	ldr	r3, [pc, #128]	@ (80051fc <main+0x91c>)
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005184:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8005240 <main+0x960>
 8005188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800518c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005190:	d502      	bpl.n	8005198 <main+0x8b8>
 8005192:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8005196:	e01d      	b.n	80051d4 <main+0x8f4>
 8005198:	4b28      	ldr	r3, [pc, #160]	@ (800523c <main+0x95c>)
 800519a:	ed93 7a00 	vldr	s14, [r3]
 800519e:	4b17      	ldr	r3, [pc, #92]	@ (80051fc <main+0x91c>)
 80051a0:	edd3 7a00 	vldr	s15, [r3]
 80051a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005244 <main+0x964>
 80051ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	dd02      	ble.n	80051bc <main+0x8dc>
 80051b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80051ba:	e00b      	b.n	80051d4 <main+0x8f4>
 80051bc:	4b1f      	ldr	r3, [pc, #124]	@ (800523c <main+0x95c>)
 80051be:	ed93 7a00 	vldr	s14, [r3]
 80051c2:	4b0e      	ldr	r3, [pc, #56]	@ (80051fc <main+0x91c>)
 80051c4:	edd3 7a00 	vldr	s15, [r3]
 80051c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d0:	ee17 3a90 	vmov	r3, s15
 80051d4:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <main+0x954>)
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80051da:	e049      	b.n	8005270 <main+0x990>
 80051dc:	20000298 	.word	0x20000298
 80051e0:	407f4000 	.word	0x407f4000
 80051e4:	c0440000 	.word	0xc0440000
 80051e8:	408f4000 	.word	0x408f4000
 80051ec:	40340000 	.word	0x40340000
 80051f0:	2000029c 	.word	0x2000029c
 80051f4:	200000e8 	.word	0x200000e8
 80051f8:	200002b8 	.word	0x200002b8
 80051fc:	200002ac 	.word	0x200002ac
 8005200:	200000e0 	.word	0x200000e0
 8005204:	200002b4 	.word	0x200002b4
 8005208:	200002a8 	.word	0x200002a8
 800520c:	20000294 	.word	0x20000294
 8005210:	200000e4 	.word	0x200000e4
 8005214:	200002b0 	.word	0x200002b0
 8005218:	200002a4 	.word	0x200002a4
 800521c:	200002c0 	.word	0x200002c0
 8005220:	20000244 	.word	0x20000244
 8005224:	20000258 	.word	0x20000258
 8005228:	44bf4000 	.word	0x44bf4000
 800522c:	44898000 	.word	0x44898000
 8005230:	44e10000 	.word	0x44e10000
 8005234:	200001a4 	.word	0x200001a4
 8005238:	44c1c000 	.word	0x44c1c000
 800523c:	200002bc 	.word	0x200002bc
 8005240:	44960000 	.word	0x44960000
 8005244:	44fa0000 	.word	0x44fa0000
	}
	else
	{
		htim3.Instance->CCR1 = (uint32_t)SERVO_PITCH_CENTER; 	/*  Channel 1 servo Pitch */
 8005248:	4b17      	ldr	r3, [pc, #92]	@ (80052a8 <main+0x9c8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f240 620e 	movw	r2, #1550	@ 0x60e
 8005250:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance->CCR2 = (uint32_t)SERVO_ROLL_CENTER;	    /*  Channel 2 servo Roll  */
 8005252:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <main+0x9c8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 800525a:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR3 = (uint32_t)DUTY_CYCLE_TURNOFF;	/*  Channel 3 motor CW    */
 800525c:	4b12      	ldr	r3, [pc, #72]	@ (80052a8 <main+0x9c8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005264:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim3.Instance->CCR4 = (uint32_t)DUTY_CYCLE_TURNOFF;    /*  Channel 4 motor CCW   */
 8005266:	4b10      	ldr	r3, [pc, #64]	@ (80052a8 <main+0x9c8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800526e:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	measure_time = HAL_GetTick() - loop_timer;
 8005270:	f000 fe8c 	bl	8005f8c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <main+0x9cc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	4a0c      	ldr	r2, [pc, #48]	@ (80052b0 <main+0x9d0>)
 800527e:	6013      	str	r3, [r2, #0]
	while (HAL_GetTick() - loop_timer < sec2milliseconds(SAMPLE_TIME_S));
 8005280:	bf00      	nop
 8005282:	f000 fe83 	bl	8005f8c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	4b08      	ldr	r3, [pc, #32]	@ (80052ac <main+0x9cc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800529a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a2:	d4ee      	bmi.n	8005282 <main+0x9a2>
	loop_timer = HAL_GetTick();
 80052a4:	e402      	b.n	8004aac <main+0x1cc>
 80052a6:	bf00      	nop
 80052a8:	200001a4 	.word	0x200001a4
 80052ac:	20000240 	.word	0x20000240
 80052b0:	200002a0 	.word	0x200002a0

080052b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b094      	sub	sp, #80	@ 0x50
 80052b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052ba:	f107 0320 	add.w	r3, r7, #32
 80052be:	2230      	movs	r2, #48	@ 0x30
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f005 f890 	bl	800a3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052c8:	f107 030c 	add.w	r3, r7, #12
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80052d8:	2300      	movs	r3, #0
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	4b28      	ldr	r3, [pc, #160]	@ (8005380 <SystemClock_Config+0xcc>)
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	4a27      	ldr	r2, [pc, #156]	@ (8005380 <SystemClock_Config+0xcc>)
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80052e8:	4b25      	ldr	r3, [pc, #148]	@ (8005380 <SystemClock_Config+0xcc>)
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80052f4:	2300      	movs	r3, #0
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	4b22      	ldr	r3, [pc, #136]	@ (8005384 <SystemClock_Config+0xd0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005300:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <SystemClock_Config+0xd0>)
 8005302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b1e      	ldr	r3, [pc, #120]	@ (8005384 <SystemClock_Config+0xd0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005314:	2302      	movs	r3, #2
 8005316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005318:	2301      	movs	r3, #1
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800531c:	2310      	movs	r3, #16
 800531e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005320:	2302      	movs	r3, #2
 8005322:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005324:	2300      	movs	r3, #0
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005328:	2308      	movs	r3, #8
 800532a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800532c:	2354      	movs	r3, #84	@ 0x54
 800532e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005330:	2302      	movs	r3, #2
 8005332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005334:	2304      	movs	r3, #4
 8005336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005338:	f107 0320 	add.w	r3, r7, #32
 800533c:	4618      	mov	r0, r3
 800533e:	f002 f9bb 	bl	80076b8 <HAL_RCC_OscConfig>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005348:	f000 fb80 	bl	8005a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800534c:	230f      	movs	r3, #15
 800534e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005350:	2302      	movs	r3, #2
 8005352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800535c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f002 fc1d 	bl	8007ba8 <HAL_RCC_ClockConfig>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005374:	f000 fb6a 	bl	8005a4c <Error_Handler>
  }
}
 8005378:	bf00      	nop
 800537a:	3750      	adds	r7, #80	@ 0x50
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	40007000 	.word	0x40007000

08005388 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800538c:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <MX_I2C1_Init+0x50>)
 800538e:	4a13      	ldr	r2, [pc, #76]	@ (80053dc <MX_I2C1_Init+0x54>)
 8005390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005392:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <MX_I2C1_Init+0x50>)
 8005394:	4a12      	ldr	r2, [pc, #72]	@ (80053e0 <MX_I2C1_Init+0x58>)
 8005396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005398:	4b0f      	ldr	r3, [pc, #60]	@ (80053d8 <MX_I2C1_Init+0x50>)
 800539a:	2200      	movs	r2, #0
 800539c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800539e:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <MX_I2C1_Init+0x50>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <MX_I2C1_Init+0x50>)
 80053a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <MX_I2C1_Init+0x50>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80053b2:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <MX_I2C1_Init+0x50>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053b8:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <MX_I2C1_Init+0x50>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <MX_I2C1_Init+0x50>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053c4:	4804      	ldr	r0, [pc, #16]	@ (80053d8 <MX_I2C1_Init+0x50>)
 80053c6:	f001 f953 	bl	8006670 <HAL_I2C_Init>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80053d0:	f000 fb3c 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000108 	.word	0x20000108
 80053dc:	40005400 	.word	0x40005400
 80053e0:	00061a80 	.word	0x00061a80

080053e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	@ 0x28
 80053e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053ea:	f107 0318 	add.w	r3, r7, #24
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	609a      	str	r2, [r3, #8]
 80053f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005402:	463b      	mov	r3, r7
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800540e:	4b3e      	ldr	r3, [pc, #248]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005410:	4a3e      	ldr	r2, [pc, #248]	@ (800550c <MX_TIM1_Init+0x128>)
 8005412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005414:	4b3c      	ldr	r3, [pc, #240]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005416:	2253      	movs	r2, #83	@ 0x53
 8005418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800541a:	4b3b      	ldr	r3, [pc, #236]	@ (8005508 <MX_TIM1_Init+0x124>)
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8005420:	4b39      	ldr	r3, [pc, #228]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005422:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005428:	4b37      	ldr	r3, [pc, #220]	@ (8005508 <MX_TIM1_Init+0x124>)
 800542a:	2200      	movs	r2, #0
 800542c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800542e:	4b36      	ldr	r3, [pc, #216]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005430:	2200      	movs	r2, #0
 8005432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005434:	4b34      	ldr	r3, [pc, #208]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005436:	2280      	movs	r2, #128	@ 0x80
 8005438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800543a:	4833      	ldr	r0, [pc, #204]	@ (8005508 <MX_TIM1_Init+0x124>)
 800543c:	f002 fd94 	bl	8007f68 <HAL_TIM_Base_Init>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8005446:	f000 fb01 	bl	8005a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800544a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800544e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005450:	f107 0318 	add.w	r3, r7, #24
 8005454:	4619      	mov	r1, r3
 8005456:	482c      	ldr	r0, [pc, #176]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005458:	f003 faa0 	bl	800899c <HAL_TIM_ConfigClockSource>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8005462:	f000 faf3 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8005466:	4828      	ldr	r0, [pc, #160]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005468:	f002 fed6 	bl	8008218 <HAL_TIM_IC_Init>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8005472:	f000 faeb 	bl	8005a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800547e:	f107 0310 	add.w	r3, r7, #16
 8005482:	4619      	mov	r1, r3
 8005484:	4820      	ldr	r0, [pc, #128]	@ (8005508 <MX_TIM1_Init+0x124>)
 8005486:	f003 ffb3 	bl	80093f0 <HAL_TIMEx_MasterConfigSynchronization>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8005490:	f000 fadc 	bl	8005a4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8005494:	230a      	movs	r3, #10
 8005496:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005498:	2301      	movs	r3, #1
 800549a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800549c:	2300      	movs	r3, #0
 800549e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80054a4:	463b      	mov	r3, r7
 80054a6:	2200      	movs	r2, #0
 80054a8:	4619      	mov	r1, r3
 80054aa:	4817      	ldr	r0, [pc, #92]	@ (8005508 <MX_TIM1_Init+0x124>)
 80054ac:	f003 f918 	bl	80086e0 <HAL_TIM_IC_ConfigChannel>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80054b6:	f000 fac9 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80054ba:	463b      	mov	r3, r7
 80054bc:	2204      	movs	r2, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4811      	ldr	r0, [pc, #68]	@ (8005508 <MX_TIM1_Init+0x124>)
 80054c2:	f003 f90d 	bl	80086e0 <HAL_TIM_IC_ConfigChannel>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80054cc:	f000 fabe 	bl	8005a4c <Error_Handler>
  }
  sConfigIC.ICFilter = 1;
 80054d0:	2301      	movs	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80054d4:	463b      	mov	r3, r7
 80054d6:	2208      	movs	r2, #8
 80054d8:	4619      	mov	r1, r3
 80054da:	480b      	ldr	r0, [pc, #44]	@ (8005508 <MX_TIM1_Init+0x124>)
 80054dc:	f003 f900 	bl	80086e0 <HAL_TIM_IC_ConfigChannel>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80054e6:	f000 fab1 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80054ea:	463b      	mov	r3, r7
 80054ec:	220c      	movs	r2, #12
 80054ee:	4619      	mov	r1, r3
 80054f0:	4805      	ldr	r0, [pc, #20]	@ (8005508 <MX_TIM1_Init+0x124>)
 80054f2:	f003 f8f5 	bl	80086e0 <HAL_TIM_IC_ConfigChannel>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80054fc:	f000 faa6 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005500:	bf00      	nop
 8005502:	3728      	adds	r7, #40	@ 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	2000015c 	.word	0x2000015c
 800550c:	40010000 	.word	0x40010000

08005510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08e      	sub	sp, #56	@ 0x38
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005516:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	609a      	str	r2, [r3, #8]
 8005522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005524:	f107 0320 	add.w	r3, r7, #32
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	611a      	str	r2, [r3, #16]
 800553c:	615a      	str	r2, [r3, #20]
 800553e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005540:	4b3e      	ldr	r3, [pc, #248]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005542:	4a3f      	ldr	r2, [pc, #252]	@ (8005640 <MX_TIM3_Init+0x130>)
 8005544:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8005546:	4b3d      	ldr	r3, [pc, #244]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005548:	2253      	movs	r2, #83	@ 0x53
 800554a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800554c:	4b3b      	ldr	r3, [pc, #236]	@ (800563c <MX_TIM3_Init+0x12c>)
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999 ;
 8005552:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005554:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8005558:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800555a:	4b38      	ldr	r3, [pc, #224]	@ (800563c <MX_TIM3_Init+0x12c>)
 800555c:	2200      	movs	r2, #0
 800555e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005560:	4b36      	ldr	r3, [pc, #216]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005562:	2280      	movs	r2, #128	@ 0x80
 8005564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005566:	4835      	ldr	r0, [pc, #212]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005568:	f002 fcfe 	bl	8007f68 <HAL_TIM_Base_Init>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005572:	f000 fa6b 	bl	8005a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800557a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800557c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005580:	4619      	mov	r1, r3
 8005582:	482e      	ldr	r0, [pc, #184]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005584:	f003 fa0a 	bl	800899c <HAL_TIM_ConfigClockSource>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800558e:	f000 fa5d 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005592:	482a      	ldr	r0, [pc, #168]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005594:	f002 fd37 	bl	8008006 <HAL_TIM_PWM_Init>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800559e:	f000 fa55 	bl	8005a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055a2:	2300      	movs	r3, #0
 80055a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80055aa:	f107 0320 	add.w	r3, r7, #32
 80055ae:	4619      	mov	r1, r3
 80055b0:	4822      	ldr	r0, [pc, #136]	@ (800563c <MX_TIM3_Init+0x12c>)
 80055b2:	f003 ff1d 	bl	80093f0 <HAL_TIMEx_MasterConfigSynchronization>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80055bc:	f000 fa46 	bl	8005a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055c0:	2360      	movs	r3, #96	@ 0x60
 80055c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80055c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055d2:	1d3b      	adds	r3, r7, #4
 80055d4:	2200      	movs	r2, #0
 80055d6:	4619      	mov	r1, r3
 80055d8:	4818      	ldr	r0, [pc, #96]	@ (800563c <MX_TIM3_Init+0x12c>)
 80055da:	f003 f91d 	bl	8008818 <HAL_TIM_PWM_ConfigChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80055e4:	f000 fa32 	bl	8005a4c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	2204      	movs	r2, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4812      	ldr	r0, [pc, #72]	@ (800563c <MX_TIM3_Init+0x12c>)
 80055f4:	f003 f910 	bl	8008818 <HAL_TIM_PWM_ConfigChannel>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80055fe:	f000 fa25 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005602:	1d3b      	adds	r3, r7, #4
 8005604:	2208      	movs	r2, #8
 8005606:	4619      	mov	r1, r3
 8005608:	480c      	ldr	r0, [pc, #48]	@ (800563c <MX_TIM3_Init+0x12c>)
 800560a:	f003 f905 	bl	8008818 <HAL_TIM_PWM_ConfigChannel>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8005614:	f000 fa1a 	bl	8005a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	220c      	movs	r2, #12
 800561c:	4619      	mov	r1, r3
 800561e:	4807      	ldr	r0, [pc, #28]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005620:	f003 f8fa 	bl	8008818 <HAL_TIM_PWM_ConfigChannel>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 800562a:	f000 fa0f 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800562e:	4803      	ldr	r0, [pc, #12]	@ (800563c <MX_TIM3_Init+0x12c>)
 8005630:	f000 fae8 	bl	8005c04 <HAL_TIM_MspPostInit>

}
 8005634:	bf00      	nop
 8005636:	3738      	adds	r7, #56	@ 0x38
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	200001a4 	.word	0x200001a4
 8005640:	40000400 	.word	0x40000400

08005644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005648:	4b11      	ldr	r3, [pc, #68]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 800564a:	4a12      	ldr	r2, [pc, #72]	@ (8005694 <MX_USART2_UART_Init+0x50>)
 800564c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 8005650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005656:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 8005658:	2200      	movs	r2, #0
 800565a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800565c:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 800565e:	2200      	movs	r2, #0
 8005660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005662:	4b0b      	ldr	r3, [pc, #44]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 8005664:	2200      	movs	r2, #0
 8005666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005668:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 800566a:	220c      	movs	r2, #12
 800566c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800566e:	4b08      	ldr	r3, [pc, #32]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 8005670:	2200      	movs	r2, #0
 8005672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005674:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 8005676:	2200      	movs	r2, #0
 8005678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800567a:	4805      	ldr	r0, [pc, #20]	@ (8005690 <MX_USART2_UART_Init+0x4c>)
 800567c:	f003 ff3a 	bl	80094f4 <HAL_UART_Init>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005686:	f000 f9e1 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200001ec 	.word	0x200001ec
 8005694:	40004400 	.word	0x40004400

08005698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <MX_GPIO_Init+0x80>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	4a18      	ldr	r2, [pc, #96]	@ (8005718 <MX_GPIO_Init+0x80>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80056be:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <MX_GPIO_Init+0x80>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	4b12      	ldr	r3, [pc, #72]	@ (8005718 <MX_GPIO_Init+0x80>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d2:	4a11      	ldr	r2, [pc, #68]	@ (8005718 <MX_GPIO_Init+0x80>)
 80056d4:	f043 0302 	orr.w	r3, r3, #2
 80056d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80056da:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <MX_GPIO_Init+0x80>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80056e6:	2200      	movs	r2, #0
 80056e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056ec:	480b      	ldr	r0, [pc, #44]	@ (800571c <MX_GPIO_Init+0x84>)
 80056ee:	f000 ffa5 	bl	800663c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80056f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056f8:	2301      	movs	r3, #1
 80056fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005704:	f107 030c 	add.w	r3, r7, #12
 8005708:	4619      	mov	r1, r3
 800570a:	4804      	ldr	r0, [pc, #16]	@ (800571c <MX_GPIO_Init+0x84>)
 800570c:	f000 fe12 	bl	8006334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005710:	bf00      	nop
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40023800 	.word	0x40023800
 800571c:	40020400 	.word	0x40020400

08005720 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7f1b      	ldrb	r3, [r3, #28]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d150      	bne.n	80057d2 <HAL_TIM_IC_CaptureCallback+0xb2>
	{
		if (is_first_captured_ch1==0) // if the first value is not captured
 8005730:	4b91      	ldr	r3, [pc, #580]	@ (8005978 <HAL_TIM_IC_CaptureCallback+0x258>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1_ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8005738:	2100      	movs	r1, #0
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f003 f9f6 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 8005740:	4603      	mov	r3, r0
 8005742:	4a8e      	ldr	r2, [pc, #568]	@ (800597c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8005744:	6013      	str	r3, [r2, #0]
			is_first_captured_ch1 = 1;  // set the first captured as true
 8005746:	4b8c      	ldr	r3, [pc, #560]	@ (8005978 <HAL_TIM_IC_CaptureCallback+0x258>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e041      	b.n	80057d2 <HAL_TIM_IC_CaptureCallback+0xb2>
		}

		else   // if the first is already captured
		{
			IC_Val2_ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f003 f9eb 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 8005756:	4603      	mov	r3, r0
 8005758:	4a89      	ldr	r2, [pc, #548]	@ (8005980 <HAL_TIM_IC_CaptureCallback+0x260>)
 800575a:	6013      	str	r3, [r2, #0]

			if (IC_Val2_ch1 > IC_Val1_ch1)
 800575c:	4b88      	ldr	r3, [pc, #544]	@ (8005980 <HAL_TIM_IC_CaptureCallback+0x260>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4b86      	ldr	r3, [pc, #536]	@ (800597c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d907      	bls.n	8005778 <HAL_TIM_IC_CaptureCallback+0x58>
			{
				difference_ch1 = IC_Val2_ch1-IC_Val1_ch1;
 8005768:	4b85      	ldr	r3, [pc, #532]	@ (8005980 <HAL_TIM_IC_CaptureCallback+0x260>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b83      	ldr	r3, [pc, #524]	@ (800597c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	4a84      	ldr	r2, [pc, #528]	@ (8005984 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e00f      	b.n	8005798 <HAL_TIM_IC_CaptureCallback+0x78>
			}

			else if (IC_Val1_ch1 > IC_Val2_ch1)
 8005778:	4b80      	ldr	r3, [pc, #512]	@ (800597c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b80      	ldr	r3, [pc, #512]	@ (8005980 <HAL_TIM_IC_CaptureCallback+0x260>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d909      	bls.n	8005798 <HAL_TIM_IC_CaptureCallback+0x78>
			{
				difference_ch1 = IC_Val2_ch1 - (IC_Val1_ch1 - AUTORELOAD);
 8005784:	4b7e      	ldr	r3, [pc, #504]	@ (8005980 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b7c      	ldr	r3, [pc, #496]	@ (800597c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8005792:	3320      	adds	r3, #32
 8005794:	4a7b      	ldr	r2, [pc, #492]	@ (8005984 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005796:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 8005798:	4b7b      	ldr	r3, [pc, #492]	@ (8005988 <HAL_TIM_IC_CaptureCallback+0x268>)
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
			float mFactor = 1000000/refClock;
 800579c:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 800598c <HAL_TIM_IC_CaptureCallback+0x26c>
 80057a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80057a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a8:	edc7 7a08 	vstr	s15, [r7, #32]

			usWidth_ch1 = difference_ch1*mFactor;
 80057ac:	4b75      	ldr	r3, [pc, #468]	@ (8005984 <HAL_TIM_IC_CaptureCallback+0x264>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80057bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c4:	ee17 2a90 	vmov	r2, s15
 80057c8:	4b71      	ldr	r3, [pc, #452]	@ (8005990 <HAL_TIM_IC_CaptureCallback+0x270>)
 80057ca:	601a      	str	r2, [r3, #0]
			is_first_captured_ch1 = 0; // set it back to false
 80057cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005978 <HAL_TIM_IC_CaptureCallback+0x258>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
		}
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7f1b      	ldrb	r3, [r3, #28]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d150      	bne.n	800587c <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			if (is_first_captured_ch2==0) // if the first value is not captured
 80057da:	4b6e      	ldr	r3, [pc, #440]	@ (8005994 <HAL_TIM_IC_CaptureCallback+0x274>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <HAL_TIM_IC_CaptureCallback+0xd8>
			{
				IC_Val1_ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80057e2:	2104      	movs	r1, #4
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f003 f9a1 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 80057ea:	4603      	mov	r3, r0
 80057ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005998 <HAL_TIM_IC_CaptureCallback+0x278>)
 80057ee:	6013      	str	r3, [r2, #0]
				is_first_captured_ch2 = 1;  // set the first captured as true
 80057f0:	4b68      	ldr	r3, [pc, #416]	@ (8005994 <HAL_TIM_IC_CaptureCallback+0x274>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e041      	b.n	800587c <HAL_TIM_IC_CaptureCallback+0x15c>
			}

			else   // if the first is already captured
			{
				IC_Val2_ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80057f8:	2104      	movs	r1, #4
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f003 f996 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 8005800:	4603      	mov	r3, r0
 8005802:	4a66      	ldr	r2, [pc, #408]	@ (800599c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8005804:	6013      	str	r3, [r2, #0]

				if (IC_Val2_ch2 > IC_Val1_ch2)
 8005806:	4b65      	ldr	r3, [pc, #404]	@ (800599c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b63      	ldr	r3, [pc, #396]	@ (8005998 <HAL_TIM_IC_CaptureCallback+0x278>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d907      	bls.n	8005822 <HAL_TIM_IC_CaptureCallback+0x102>
				{
					difference_ch2 = IC_Val2_ch2-IC_Val1_ch2;
 8005812:	4b62      	ldr	r3, [pc, #392]	@ (800599c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b60      	ldr	r3, [pc, #384]	@ (8005998 <HAL_TIM_IC_CaptureCallback+0x278>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	4a60      	ldr	r2, [pc, #384]	@ (80059a0 <HAL_TIM_IC_CaptureCallback+0x280>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e00f      	b.n	8005842 <HAL_TIM_IC_CaptureCallback+0x122>
				}

				else if (IC_Val1_ch2 > IC_Val2_ch2)
 8005822:	4b5d      	ldr	r3, [pc, #372]	@ (8005998 <HAL_TIM_IC_CaptureCallback+0x278>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b5d      	ldr	r3, [pc, #372]	@ (800599c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d909      	bls.n	8005842 <HAL_TIM_IC_CaptureCallback+0x122>
				{
					difference_ch2 =  IC_Val2_ch2  - (IC_Val1_ch2 - AUTORELOAD);
 800582e:	4b5b      	ldr	r3, [pc, #364]	@ (800599c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b59      	ldr	r3, [pc, #356]	@ (8005998 <HAL_TIM_IC_CaptureCallback+0x278>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800583c:	3320      	adds	r3, #32
 800583e:	4a58      	ldr	r2, [pc, #352]	@ (80059a0 <HAL_TIM_IC_CaptureCallback+0x280>)
 8005840:	6013      	str	r3, [r2, #0]
				}

				float refClock = TIMCLOCK/(PRESCALAR);
 8005842:	4b51      	ldr	r3, [pc, #324]	@ (8005988 <HAL_TIM_IC_CaptureCallback+0x268>)
 8005844:	61fb      	str	r3, [r7, #28]
				float mFactor = 1000000/refClock;
 8005846:	eddf 6a51 	vldr	s13, [pc, #324]	@ 800598c <HAL_TIM_IC_CaptureCallback+0x26c>
 800584a:	ed97 7a07 	vldr	s14, [r7, #28]
 800584e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005852:	edc7 7a06 	vstr	s15, [r7, #24]

				usWidth_ch2 = difference_ch2*mFactor;
 8005856:	4b52      	ldr	r3, [pc, #328]	@ (80059a0 <HAL_TIM_IC_CaptureCallback+0x280>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005862:	edd7 7a06 	vldr	s15, [r7, #24]
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800586e:	ee17 2a90 	vmov	r2, s15
 8005872:	4b4c      	ldr	r3, [pc, #304]	@ (80059a4 <HAL_TIM_IC_CaptureCallback+0x284>)
 8005874:	601a      	str	r2, [r3, #0]
				is_first_captured_ch2 = 0; // set it back to false
 8005876:	4b47      	ldr	r3, [pc, #284]	@ (8005994 <HAL_TIM_IC_CaptureCallback+0x274>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
			}
		}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	7f1b      	ldrb	r3, [r3, #28]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d150      	bne.n	8005926 <HAL_TIM_IC_CaptureCallback+0x206>
		{
			if (is_first_captured_ch3 ==0) // if the first value is not captured
 8005884:	4b48      	ldr	r3, [pc, #288]	@ (80059a8 <HAL_TIM_IC_CaptureCallback+0x288>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <HAL_TIM_IC_CaptureCallback+0x182>
			{
				IC_Val1_ch3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 800588c:	2108      	movs	r1, #8
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f003 f94c 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 8005894:	4603      	mov	r3, r0
 8005896:	4a45      	ldr	r2, [pc, #276]	@ (80059ac <HAL_TIM_IC_CaptureCallback+0x28c>)
 8005898:	6013      	str	r3, [r2, #0]
				is_first_captured_ch3 = 1;  // set the first captured as true
 800589a:	4b43      	ldr	r3, [pc, #268]	@ (80059a8 <HAL_TIM_IC_CaptureCallback+0x288>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e041      	b.n	8005926 <HAL_TIM_IC_CaptureCallback+0x206>
			}

			else   // if the first is already captured
			{
				IC_Val2_ch3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80058a2:	2108      	movs	r1, #8
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f003 f941 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 80058aa:	4603      	mov	r3, r0
 80058ac:	4a40      	ldr	r2, [pc, #256]	@ (80059b0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80058ae:	6013      	str	r3, [r2, #0]

				if (IC_Val2_ch3 > IC_Val1_ch3)
 80058b0:	4b3f      	ldr	r3, [pc, #252]	@ (80059b0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b3d      	ldr	r3, [pc, #244]	@ (80059ac <HAL_TIM_IC_CaptureCallback+0x28c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d907      	bls.n	80058cc <HAL_TIM_IC_CaptureCallback+0x1ac>
				{
					difference_ch3 = IC_Val2_ch3-IC_Val1_ch3;
 80058bc:	4b3c      	ldr	r3, [pc, #240]	@ (80059b0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b3a      	ldr	r3, [pc, #232]	@ (80059ac <HAL_TIM_IC_CaptureCallback+0x28c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	4a3b      	ldr	r2, [pc, #236]	@ (80059b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e00f      	b.n	80058ec <HAL_TIM_IC_CaptureCallback+0x1cc>
				}

				else if (IC_Val1_ch3 > IC_Val2_ch3)
 80058cc:	4b37      	ldr	r3, [pc, #220]	@ (80059ac <HAL_TIM_IC_CaptureCallback+0x28c>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	4b37      	ldr	r3, [pc, #220]	@ (80059b0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d909      	bls.n	80058ec <HAL_TIM_IC_CaptureCallback+0x1cc>
				{
					difference_ch3 =  IC_Val2_ch3  - (IC_Val1_ch3 - AUTORELOAD);
 80058d8:	4b35      	ldr	r3, [pc, #212]	@ (80059b0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b33      	ldr	r3, [pc, #204]	@ (80059ac <HAL_TIM_IC_CaptureCallback+0x28c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80058e6:	3320      	adds	r3, #32
 80058e8:	4a32      	ldr	r2, [pc, #200]	@ (80059b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80058ea:	6013      	str	r3, [r2, #0]
				}

				float refClock = TIMCLOCK/(PRESCALAR);
 80058ec:	4b26      	ldr	r3, [pc, #152]	@ (8005988 <HAL_TIM_IC_CaptureCallback+0x268>)
 80058ee:	617b      	str	r3, [r7, #20]
				float mFactor = 1000000/refClock;
 80058f0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800598c <HAL_TIM_IC_CaptureCallback+0x26c>
 80058f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80058f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fc:	edc7 7a04 	vstr	s15, [r7, #16]

				usWidth_ch3 = difference_ch3*mFactor;
 8005900:	4b2c      	ldr	r3, [pc, #176]	@ (80059b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800590c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005918:	ee17 2a90 	vmov	r2, s15
 800591c:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <HAL_TIM_IC_CaptureCallback+0x298>)
 800591e:	601a      	str	r2, [r3, #0]
				is_first_captured_ch3 = 0; // set it back to false
 8005920:	4b21      	ldr	r3, [pc, #132]	@ (80059a8 <HAL_TIM_IC_CaptureCallback+0x288>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
			}
		}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	7f1b      	ldrb	r3, [r3, #28]
 800592a:	2b08      	cmp	r3, #8
 800592c:	d17b      	bne.n	8005a26 <HAL_TIM_IC_CaptureCallback+0x306>
	{
		if (is_first_captured_ch4 ==0) // if the first value is not captured
 800592e:	4b23      	ldr	r3, [pc, #140]	@ (80059bc <HAL_TIM_IC_CaptureCallback+0x29c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <HAL_TIM_IC_CaptureCallback+0x22c>
		{
			IC_Val1_ch4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8005936:	210c      	movs	r1, #12
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f003 f8f7 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 800593e:	4603      	mov	r3, r0
 8005940:	4a1f      	ldr	r2, [pc, #124]	@ (80059c0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8005942:	6013      	str	r3, [r2, #0]
			is_first_captured_ch4 = 1;  // set the first captured as true
 8005944:	4b1d      	ldr	r3, [pc, #116]	@ (80059bc <HAL_TIM_IC_CaptureCallback+0x29c>)
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]

			usWidth_ch4 = difference_ch4*mFactor;
			is_first_captured_ch4 = 0; // set it back to false
		}
	}
}
 800594a:	e06c      	b.n	8005a26 <HAL_TIM_IC_CaptureCallback+0x306>
			IC_Val2_ch4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 800594c:	210c      	movs	r1, #12
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f003 f8ec 	bl	8008b2c <HAL_TIM_ReadCapturedValue>
 8005954:	4603      	mov	r3, r0
 8005956:	4a1b      	ldr	r2, [pc, #108]	@ (80059c4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005958:	6013      	str	r3, [r2, #0]
			if (IC_Val2_ch4 > IC_Val1_ch4)
 800595a:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b18      	ldr	r3, [pc, #96]	@ (80059c0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d932      	bls.n	80059cc <HAL_TIM_IC_CaptureCallback+0x2ac>
				difference_ch4 = IC_Val2_ch4-IC_Val1_ch4;
 8005966:	4b17      	ldr	r3, [pc, #92]	@ (80059c4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e03a      	b.n	80059ec <HAL_TIM_IC_CaptureCallback+0x2cc>
 8005976:	bf00      	nop
 8005978:	20000254 	.word	0x20000254
 800597c:	20000248 	.word	0x20000248
 8005980:	2000024c 	.word	0x2000024c
 8005984:	20000250 	.word	0x20000250
 8005988:	49771500 	.word	0x49771500
 800598c:	49742400 	.word	0x49742400
 8005990:	20000244 	.word	0x20000244
 8005994:	20000268 	.word	0x20000268
 8005998:	2000025c 	.word	0x2000025c
 800599c:	20000260 	.word	0x20000260
 80059a0:	20000264 	.word	0x20000264
 80059a4:	20000258 	.word	0x20000258
 80059a8:	2000027c 	.word	0x2000027c
 80059ac:	20000270 	.word	0x20000270
 80059b0:	20000274 	.word	0x20000274
 80059b4:	20000278 	.word	0x20000278
 80059b8:	2000026c 	.word	0x2000026c
 80059bc:	20000290 	.word	0x20000290
 80059c0:	20000284 	.word	0x20000284
 80059c4:	20000288 	.word	0x20000288
 80059c8:	2000028c 	.word	0x2000028c
			else if (IC_Val1_ch4 > IC_Val2_ch4)
 80059cc:	4b18      	ldr	r3, [pc, #96]	@ (8005a30 <HAL_TIM_IC_CaptureCallback+0x310>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b18      	ldr	r3, [pc, #96]	@ (8005a34 <HAL_TIM_IC_CaptureCallback+0x314>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d909      	bls.n	80059ec <HAL_TIM_IC_CaptureCallback+0x2cc>
				difference_ch4 =  IC_Val2_ch4  - (IC_Val1_ch4 - AUTORELOAD);
 80059d8:	4b16      	ldr	r3, [pc, #88]	@ (8005a34 <HAL_TIM_IC_CaptureCallback+0x314>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b14      	ldr	r3, [pc, #80]	@ (8005a30 <HAL_TIM_IC_CaptureCallback+0x310>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80059e6:	3320      	adds	r3, #32
 80059e8:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <HAL_TIM_IC_CaptureCallback+0x318>)
 80059ea:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80059ec:	4b13      	ldr	r3, [pc, #76]	@ (8005a3c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80059ee:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000/refClock;
 80059f0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8005a40 <HAL_TIM_IC_CaptureCallback+0x320>
 80059f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80059f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059fc:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth_ch4 = difference_ch4*mFactor;
 8005a00:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <HAL_TIM_IC_CaptureCallback+0x318>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a18:	ee17 2a90 	vmov	r2, s15
 8005a1c:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <HAL_TIM_IC_CaptureCallback+0x324>)
 8005a1e:	601a      	str	r2, [r3, #0]
			is_first_captured_ch4 = 0; // set it back to false
 8005a20:	4b09      	ldr	r3, [pc, #36]	@ (8005a48 <HAL_TIM_IC_CaptureCallback+0x328>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
}
 8005a26:	bf00      	nop
 8005a28:	3728      	adds	r7, #40	@ 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000284 	.word	0x20000284
 8005a34:	20000288 	.word	0x20000288
 8005a38:	2000028c 	.word	0x2000028c
 8005a3c:	49771500 	.word	0x49771500
 8005a40:	49742400 	.word	0x49742400
 8005a44:	20000280 	.word	0x20000280
 8005a48:	20000290 	.word	0x20000290

08005a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a50:	b672      	cpsid	i
}
 8005a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <Error_Handler+0x8>

08005a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a5e:	2300      	movs	r3, #0
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <HAL_MspInit+0x4c>)
 8005a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a66:	4a0f      	ldr	r2, [pc, #60]	@ (8005aa4 <HAL_MspInit+0x4c>)
 8005a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <HAL_MspInit+0x4c>)
 8005a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <HAL_MspInit+0x4c>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	4a08      	ldr	r2, [pc, #32]	@ (8005aa4 <HAL_MspInit+0x4c>)
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a8a:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <HAL_MspInit+0x4c>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800

08005aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	@ 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ab0:	f107 0314 	add.w	r3, r7, #20
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	@ (8005b2c <HAL_I2C_MspInit+0x84>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d12b      	bne.n	8005b22 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	4b18      	ldr	r3, [pc, #96]	@ (8005b30 <HAL_I2C_MspInit+0x88>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	4a17      	ldr	r2, [pc, #92]	@ (8005b30 <HAL_I2C_MspInit+0x88>)
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ada:	4b15      	ldr	r3, [pc, #84]	@ (8005b30 <HAL_I2C_MspInit+0x88>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ae6:	23c0      	movs	r3, #192	@ 0xc0
 8005ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005aea:	2312      	movs	r3, #18
 8005aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005af2:	2303      	movs	r3, #3
 8005af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005af6:	2304      	movs	r3, #4
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005afa:	f107 0314 	add.w	r3, r7, #20
 8005afe:	4619      	mov	r1, r3
 8005b00:	480c      	ldr	r0, [pc, #48]	@ (8005b34 <HAL_I2C_MspInit+0x8c>)
 8005b02:	f000 fc17 	bl	8006334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_I2C_MspInit+0x88>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	4a08      	ldr	r2, [pc, #32]	@ (8005b30 <HAL_I2C_MspInit+0x88>)
 8005b10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b16:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <HAL_I2C_MspInit+0x88>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005b22:	bf00      	nop
 8005b24:	3728      	adds	r7, #40	@ 0x28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40005400 	.word	0x40005400
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40020400 	.word	0x40020400

08005b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	@ 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a27      	ldr	r2, [pc, #156]	@ (8005bf4 <HAL_TIM_Base_MspInit+0xbc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d135      	bne.n	8005bc6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	4b26      	ldr	r3, [pc, #152]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	4a25      	ldr	r2, [pc, #148]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b6a:	4b23      	ldr	r3, [pc, #140]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b86:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005b92:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8005b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4619      	mov	r1, r3
 8005bae:	4813      	ldr	r0, [pc, #76]	@ (8005bfc <HAL_TIM_Base_MspInit+0xc4>)
 8005bb0:	f000 fbc0 	bl	8006334 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	201b      	movs	r0, #27
 8005bba:	f000 faf2 	bl	80061a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005bbe:	201b      	movs	r0, #27
 8005bc0:	f000 fb0b 	bl	80061da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005bc4:	e012      	b.n	8005bec <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a0d      	ldr	r2, [pc, #52]	@ (8005c00 <HAL_TIM_Base_MspInit+0xc8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d10d      	bne.n	8005bec <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60bb      	str	r3, [r7, #8]
 8005bd4:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd8:	4a07      	ldr	r2, [pc, #28]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005bda:	f043 0302 	orr.w	r3, r3, #2
 8005bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8005be0:	4b05      	ldr	r3, [pc, #20]	@ (8005bf8 <HAL_TIM_Base_MspInit+0xc0>)
 8005be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	68bb      	ldr	r3, [r7, #8]
}
 8005bec:	bf00      	nop
 8005bee:	3728      	adds	r7, #40	@ 0x28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	40020000 	.word	0x40020000
 8005c00:	40000400 	.word	0x40000400

08005c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	@ 0x28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a21      	ldr	r2, [pc, #132]	@ (8005ca8 <HAL_TIM_MspPostInit+0xa4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d13b      	bne.n	8005c9e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	4b20      	ldr	r3, [pc, #128]	@ (8005cac <HAL_TIM_MspPostInit+0xa8>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cac <HAL_TIM_MspPostInit+0xa8>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c36:	4b1d      	ldr	r3, [pc, #116]	@ (8005cac <HAL_TIM_MspPostInit+0xa8>)
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	4b19      	ldr	r3, [pc, #100]	@ (8005cac <HAL_TIM_MspPostInit+0xa8>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4a:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <HAL_TIM_MspPostInit+0xa8>)
 8005c4c:	f043 0302 	orr.w	r3, r3, #2
 8005c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c52:	4b16      	ldr	r3, [pc, #88]	@ (8005cac <HAL_TIM_MspPostInit+0xa8>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c5e:	23c0      	movs	r3, #192	@ 0xc0
 8005c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c62:	2302      	movs	r3, #2
 8005c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c72:	f107 0314 	add.w	r3, r7, #20
 8005c76:	4619      	mov	r1, r3
 8005c78:	480d      	ldr	r0, [pc, #52]	@ (8005cb0 <HAL_TIM_MspPostInit+0xac>)
 8005c7a:	f000 fb5b 	bl	8006334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c82:	2302      	movs	r3, #2
 8005c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c92:	f107 0314 	add.w	r3, r7, #20
 8005c96:	4619      	mov	r1, r3
 8005c98:	4806      	ldr	r0, [pc, #24]	@ (8005cb4 <HAL_TIM_MspPostInit+0xb0>)
 8005c9a:	f000 fb4b 	bl	8006334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005c9e:	bf00      	nop
 8005ca0:	3728      	adds	r7, #40	@ 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40000400 	.word	0x40000400
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020400 	.word	0x40020400

08005cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	@ 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc0:	f107 0314 	add.w	r3, r7, #20
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	609a      	str	r2, [r3, #8]
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <HAL_UART_MspInit+0x94>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d133      	bne.n	8005d42 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	4b1c      	ldr	r3, [pc, #112]	@ (8005d50 <HAL_UART_MspInit+0x98>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <HAL_UART_MspInit+0x98>)
 8005ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cea:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <HAL_UART_MspInit+0x98>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4b15      	ldr	r3, [pc, #84]	@ (8005d50 <HAL_UART_MspInit+0x98>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfe:	4a14      	ldr	r2, [pc, #80]	@ (8005d50 <HAL_UART_MspInit+0x98>)
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d06:	4b12      	ldr	r3, [pc, #72]	@ (8005d50 <HAL_UART_MspInit+0x98>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d12:	230c      	movs	r3, #12
 8005d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d16:	2302      	movs	r3, #2
 8005d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d22:	2307      	movs	r3, #7
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d26:	f107 0314 	add.w	r3, r7, #20
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4809      	ldr	r0, [pc, #36]	@ (8005d54 <HAL_UART_MspInit+0x9c>)
 8005d2e:	f000 fb01 	bl	8006334 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d32:	2200      	movs	r2, #0
 8005d34:	2100      	movs	r1, #0
 8005d36:	2026      	movs	r0, #38	@ 0x26
 8005d38:	f000 fa33 	bl	80061a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d3c:	2026      	movs	r0, #38	@ 0x26
 8005d3e:	f000 fa4c 	bl	80061da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005d42:	bf00      	nop
 8005d44:	3728      	adds	r7, #40	@ 0x28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40004400 	.word	0x40004400
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40020000 	.word	0x40020000

08005d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <NMI_Handler+0x4>

08005d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <HardFault_Handler+0x4>

08005d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d6c:	bf00      	nop
 8005d6e:	e7fd      	b.n	8005d6c <MemManage_Handler+0x4>

08005d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <BusFault_Handler+0x4>

08005d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d7c:	bf00      	nop
 8005d7e:	e7fd      	b.n	8005d7c <UsageFault_Handler+0x4>

08005d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dae:	f000 f8d9 	bl	8005f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dbc:	4802      	ldr	r0, [pc, #8]	@ (8005dc8 <TIM1_CC_IRQHandler+0x10>)
 8005dbe:	f002 fb9f 	bl	8008500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005dc2:	bf00      	nop
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2000015c 	.word	0x2000015c

08005dcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005dd0:	4802      	ldr	r0, [pc, #8]	@ (8005ddc <USART2_IRQHandler+0x10>)
 8005dd2:	f003 fc05 	bl	80095e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200001ec 	.word	0x200001ec

08005de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005de4:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <SystemInit+0x20>)
 8005de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dea:	4a05      	ldr	r2, [pc, #20]	@ (8005e00 <SystemInit+0x20>)
 8005dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000ed00 	.word	0xe000ed00

08005e04 <HAL_UART_RxCpltCallback>:

extern uint8_t rx_buffer[TRANSMITED_BYTES];
extern float received_values[3];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a0d      	ldr	r2, [pc, #52]	@ (8005e48 <HAL_UART_RxCpltCallback+0x44>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d113      	bne.n	8005e3e <HAL_UART_RxCpltCallback+0x3a>
    {
        memcpy(received_values, rx_buffer, TRANSMITED_BYTES);
 8005e16:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <HAL_UART_RxCpltCallback+0x48>)
 8005e18:	4a0d      	ldr	r2, [pc, #52]	@ (8005e50 <HAL_UART_RxCpltCallback+0x4c>)
 8005e1a:	6810      	ldr	r0, [r2, #0]
 8005e1c:	6851      	ldr	r1, [r2, #4]
 8005e1e:	6892      	ldr	r2, [r2, #8]
 8005e20:	c307      	stmia	r3!, {r0, r1, r2}

        float p = received_values[0];
 8005e22:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <HAL_UART_RxCpltCallback+0x48>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	617b      	str	r3, [r7, #20]
        float i = received_values[1];
 8005e28:	4b08      	ldr	r3, [pc, #32]	@ (8005e4c <HAL_UART_RxCpltCallback+0x48>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	613b      	str	r3, [r7, #16]
        float d = received_values[2];
 8005e2e:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <HAL_UART_RxCpltCallback+0x48>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60fb      	str	r3, [r7, #12]

        HAL_UART_Receive_IT(huart, rx_buffer, TRANSMITED_BYTES);
 8005e34:	220c      	movs	r2, #12
 8005e36:	4906      	ldr	r1, [pc, #24]	@ (8005e50 <HAL_UART_RxCpltCallback+0x4c>)
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f003 fbab 	bl	8009594 <HAL_UART_Receive_IT>
    }
}
 8005e3e:	bf00      	nop
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40004400 	.word	0x40004400
 8005e4c:	200002d0 	.word	0x200002d0
 8005e50:	200002c4 	.word	0x200002c4

08005e54 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
    __NOP();
 8005e5c:	bf00      	nop
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005ea4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005e70:	f7ff ffb6 	bl	8005de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e74:	480c      	ldr	r0, [pc, #48]	@ (8005ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e76:	490d      	ldr	r1, [pc, #52]	@ (8005eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e78:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e7c:	e002      	b.n	8005e84 <LoopCopyDataInit>

08005e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e82:	3304      	adds	r3, #4

08005e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e88:	d3f9      	bcc.n	8005e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8005eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e90:	e001      	b.n	8005e96 <LoopFillZerobss>

08005e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e94:	3204      	adds	r2, #4

08005e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e98:	d3fb      	bcc.n	8005e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e9a:	f004 fab3 	bl	800a404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e9e:	f7fe fd1f 	bl	80048e0 <main>
  bx  lr    
 8005ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ea4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eac:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8005eb0:	0800b694 	.word	0x0800b694
  ldr r2, =_sbss
 8005eb4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8005eb8:	20000418 	.word	0x20000418

08005ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ebc:	e7fe      	b.n	8005ebc <ADC_IRQHandler>
	...

08005ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <HAL_Init+0x40>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f00 <HAL_Init+0x40>)
 8005eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <HAL_Init+0x40>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f00 <HAL_Init+0x40>)
 8005ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005edc:	4b08      	ldr	r3, [pc, #32]	@ (8005f00 <HAL_Init+0x40>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a07      	ldr	r2, [pc, #28]	@ (8005f00 <HAL_Init+0x40>)
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ee8:	2003      	movs	r0, #3
 8005eea:	f000 f94f 	bl	800618c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eee:	200f      	movs	r0, #15
 8005ef0:	f000 f808 	bl	8005f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ef4:	f7ff fdb0 	bl	8005a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40023c00 	.word	0x40023c00

08005f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f0c:	4b12      	ldr	r3, [pc, #72]	@ (8005f58 <HAL_InitTick+0x54>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <HAL_InitTick+0x58>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f967 	bl	80061f6 <HAL_SYSTICK_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e00e      	b.n	8005f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d80a      	bhi.n	8005f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	f000 f92f 	bl	80061a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f44:	4a06      	ldr	r2, [pc, #24]	@ (8005f60 <HAL_InitTick+0x5c>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	2000003c 	.word	0x2000003c
 8005f5c:	20000044 	.word	0x20000044
 8005f60:	20000040 	.word	0x20000040

08005f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f68:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <HAL_IncTick+0x20>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_IncTick+0x24>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4413      	add	r3, r2
 8005f74:	4a04      	ldr	r2, [pc, #16]	@ (8005f88 <HAL_IncTick+0x24>)
 8005f76:	6013      	str	r3, [r2, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000044 	.word	0x20000044
 8005f88:	200002dc 	.word	0x200002dc

08005f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f90:	4b03      	ldr	r3, [pc, #12]	@ (8005fa0 <HAL_GetTick+0x14>)
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	200002dc 	.word	0x200002dc

08005fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fac:	f7ff ffee 	bl	8005f8c <HAL_GetTick>
 8005fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d005      	beq.n	8005fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <HAL_Delay+0x44>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fca:	bf00      	nop
 8005fcc:	f7ff ffde 	bl	8005f8c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d8f7      	bhi.n	8005fcc <HAL_Delay+0x28>
  {
  }
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000044 	.word	0x20000044

08005fec <__NVIC_SetPriorityGrouping>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8006030 <__NVIC_SetPriorityGrouping+0x44>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006008:	4013      	ands	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800601c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800601e:	4a04      	ldr	r2, [pc, #16]	@ (8006030 <__NVIC_SetPriorityGrouping+0x44>)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	60d3      	str	r3, [r2, #12]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	e000ed00 	.word	0xe000ed00

08006034 <__NVIC_GetPriorityGrouping>:
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006038:	4b04      	ldr	r3, [pc, #16]	@ (800604c <__NVIC_GetPriorityGrouping+0x18>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	f003 0307 	and.w	r3, r3, #7
}
 8006042:	4618      	mov	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <__NVIC_EnableIRQ>:
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800605a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605e:	2b00      	cmp	r3, #0
 8006060:	db0b      	blt.n	800607a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	f003 021f 	and.w	r2, r3, #31
 8006068:	4907      	ldr	r1, [pc, #28]	@ (8006088 <__NVIC_EnableIRQ+0x38>)
 800606a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	2001      	movs	r0, #1
 8006072:	fa00 f202 	lsl.w	r2, r0, r2
 8006076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	e000e100 	.word	0xe000e100

0800608c <__NVIC_SetPriority>:
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	6039      	str	r1, [r7, #0]
 8006096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609c:	2b00      	cmp	r3, #0
 800609e:	db0a      	blt.n	80060b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	490c      	ldr	r1, [pc, #48]	@ (80060d8 <__NVIC_SetPriority+0x4c>)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	0112      	lsls	r2, r2, #4
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	440b      	add	r3, r1
 80060b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80060b4:	e00a      	b.n	80060cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	4908      	ldr	r1, [pc, #32]	@ (80060dc <__NVIC_SetPriority+0x50>)
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	3b04      	subs	r3, #4
 80060c4:	0112      	lsls	r2, r2, #4
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	440b      	add	r3, r1
 80060ca:	761a      	strb	r2, [r3, #24]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	e000e100 	.word	0xe000e100
 80060dc:	e000ed00 	.word	0xe000ed00

080060e0 <NVIC_EncodePriority>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	b089      	sub	sp, #36	@ 0x24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f1c3 0307 	rsb	r3, r3, #7
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	bf28      	it	cs
 80060fe:	2304      	movcs	r3, #4
 8006100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	3304      	adds	r3, #4
 8006106:	2b06      	cmp	r3, #6
 8006108:	d902      	bls.n	8006110 <NVIC_EncodePriority+0x30>
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	3b03      	subs	r3, #3
 800610e:	e000      	b.n	8006112 <NVIC_EncodePriority+0x32>
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43da      	mvns	r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	401a      	ands	r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006128:	f04f 31ff 	mov.w	r1, #4294967295
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	fa01 f303 	lsl.w	r3, r1, r3
 8006132:	43d9      	mvns	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006138:	4313      	orrs	r3, r2
}
 800613a:	4618      	mov	r0, r3
 800613c:	3724      	adds	r7, #36	@ 0x24
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3b01      	subs	r3, #1
 8006154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006158:	d301      	bcc.n	800615e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800615a:	2301      	movs	r3, #1
 800615c:	e00f      	b.n	800617e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800615e:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <SysTick_Config+0x40>)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3b01      	subs	r3, #1
 8006164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006166:	210f      	movs	r1, #15
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	f7ff ff8e 	bl	800608c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006170:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <SysTick_Config+0x40>)
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006176:	4b04      	ldr	r3, [pc, #16]	@ (8006188 <SysTick_Config+0x40>)
 8006178:	2207      	movs	r2, #7
 800617a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	e000e010 	.word	0xe000e010

0800618c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff ff29 	bl	8005fec <__NVIC_SetPriorityGrouping>
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	4603      	mov	r3, r0
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061b4:	f7ff ff3e 	bl	8006034 <__NVIC_GetPriorityGrouping>
 80061b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	6978      	ldr	r0, [r7, #20]
 80061c0:	f7ff ff8e 	bl	80060e0 <NVIC_EncodePriority>
 80061c4:	4602      	mov	r2, r0
 80061c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff ff5d 	bl	800608c <__NVIC_SetPriority>
}
 80061d2:	bf00      	nop
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4603      	mov	r3, r0
 80061e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff ff31 	bl	8006050 <__NVIC_EnableIRQ>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ffa2 	bl	8006148 <SysTick_Config>
 8006204:	4603      	mov	r3, r0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800621c:	f7ff feb6 	bl	8005f8c <HAL_GetTick>
 8006220:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d008      	beq.n	8006240 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2280      	movs	r2, #128	@ 0x80
 8006232:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e052      	b.n	80062e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0216 	bic.w	r2, r2, #22
 800624e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695a      	ldr	r2, [r3, #20]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800625e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <HAL_DMA_Abort+0x62>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0208 	bic.w	r2, r2, #8
 800627e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0201 	bic.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006290:	e013      	b.n	80062ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006292:	f7ff fe7b 	bl	8005f8c <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b05      	cmp	r3, #5
 800629e:	d90c      	bls.n	80062ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2203      	movs	r2, #3
 80062aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e015      	b.n	80062e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e4      	bne.n	8006292 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062cc:	223f      	movs	r2, #63	@ 0x3f
 80062ce:	409a      	lsls	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d004      	beq.n	800630c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2280      	movs	r2, #128	@ 0x80
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e00c      	b.n	8006326 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2205      	movs	r2, #5
 8006310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	@ 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e159      	b.n	8006604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006350:	2201      	movs	r2, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4013      	ands	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	429a      	cmp	r2, r3
 800636a:	f040 8148 	bne.w	80065fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d005      	beq.n	8006386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006382:	2b02      	cmp	r3, #2
 8006384:	d130      	bne.n	80063e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	2203      	movs	r2, #3
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063bc:	2201      	movs	r2, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4013      	ands	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f003 0201 	and.w	r2, r3, #1
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d017      	beq.n	8006424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	2203      	movs	r2, #3
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4313      	orrs	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d123      	bne.n	8006478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	08da      	lsrs	r2, r3, #3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3208      	adds	r2, #8
 8006438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	220f      	movs	r2, #15
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4313      	orrs	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	08da      	lsrs	r2, r3, #3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3208      	adds	r2, #8
 8006472:	69b9      	ldr	r1, [r7, #24]
 8006474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	2203      	movs	r2, #3
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	43db      	mvns	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 0203 	and.w	r2, r3, #3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80a2 	beq.w	80065fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	4b57      	ldr	r3, [pc, #348]	@ (800661c <HAL_GPIO_Init+0x2e8>)
 80064c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c2:	4a56      	ldr	r2, [pc, #344]	@ (800661c <HAL_GPIO_Init+0x2e8>)
 80064c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80064ca:	4b54      	ldr	r3, [pc, #336]	@ (800661c <HAL_GPIO_Init+0x2e8>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064d6:	4a52      	ldr	r2, [pc, #328]	@ (8006620 <HAL_GPIO_Init+0x2ec>)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	3302      	adds	r3, #2
 80064de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a49      	ldr	r2, [pc, #292]	@ (8006624 <HAL_GPIO_Init+0x2f0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d019      	beq.n	8006536 <HAL_GPIO_Init+0x202>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a48      	ldr	r2, [pc, #288]	@ (8006628 <HAL_GPIO_Init+0x2f4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_GPIO_Init+0x1fe>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a47      	ldr	r2, [pc, #284]	@ (800662c <HAL_GPIO_Init+0x2f8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00d      	beq.n	800652e <HAL_GPIO_Init+0x1fa>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a46      	ldr	r2, [pc, #280]	@ (8006630 <HAL_GPIO_Init+0x2fc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <HAL_GPIO_Init+0x1f6>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a45      	ldr	r2, [pc, #276]	@ (8006634 <HAL_GPIO_Init+0x300>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <HAL_GPIO_Init+0x1f2>
 8006522:	2304      	movs	r3, #4
 8006524:	e008      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006526:	2307      	movs	r3, #7
 8006528:	e006      	b.n	8006538 <HAL_GPIO_Init+0x204>
 800652a:	2303      	movs	r3, #3
 800652c:	e004      	b.n	8006538 <HAL_GPIO_Init+0x204>
 800652e:	2302      	movs	r3, #2
 8006530:	e002      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006536:	2300      	movs	r3, #0
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	f002 0203 	and.w	r2, r2, #3
 800653e:	0092      	lsls	r2, r2, #2
 8006540:	4093      	lsls	r3, r2
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006548:	4935      	ldr	r1, [pc, #212]	@ (8006620 <HAL_GPIO_Init+0x2ec>)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	089b      	lsrs	r3, r3, #2
 800654e:	3302      	adds	r3, #2
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006556:	4b38      	ldr	r3, [pc, #224]	@ (8006638 <HAL_GPIO_Init+0x304>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800657a:	4a2f      	ldr	r2, [pc, #188]	@ (8006638 <HAL_GPIO_Init+0x304>)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006580:	4b2d      	ldr	r3, [pc, #180]	@ (8006638 <HAL_GPIO_Init+0x304>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065a4:	4a24      	ldr	r2, [pc, #144]	@ (8006638 <HAL_GPIO_Init+0x304>)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065aa:	4b23      	ldr	r3, [pc, #140]	@ (8006638 <HAL_GPIO_Init+0x304>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006638 <HAL_GPIO_Init+0x304>)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065d4:	4b18      	ldr	r3, [pc, #96]	@ (8006638 <HAL_GPIO_Init+0x304>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	43db      	mvns	r3, r3
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065f8:	4a0f      	ldr	r2, [pc, #60]	@ (8006638 <HAL_GPIO_Init+0x304>)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3301      	adds	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	f67f aea2 	bls.w	8006350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	3724      	adds	r7, #36	@ 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800
 8006620:	40013800 	.word	0x40013800
 8006624:	40020000 	.word	0x40020000
 8006628:	40020400 	.word	0x40020400
 800662c:	40020800 	.word	0x40020800
 8006630:	40020c00 	.word	0x40020c00
 8006634:	40021000 	.word	0x40021000
 8006638:	40013c00 	.word	0x40013c00

0800663c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	807b      	strh	r3, [r7, #2]
 8006648:	4613      	mov	r3, r2
 800664a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800664c:	787b      	ldrb	r3, [r7, #1]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006652:	887a      	ldrh	r2, [r7, #2]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006658:	e003      	b.n	8006662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800665a:	887b      	ldrh	r3, [r7, #2]
 800665c:	041a      	lsls	r2, r3, #16
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	619a      	str	r2, [r3, #24]
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e12b      	b.n	80068da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fa06 	bl	8005aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	@ 0x24
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0201 	bic.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066d4:	f001 fc20 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 80066d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4a81      	ldr	r2, [pc, #516]	@ (80068e4 <HAL_I2C_Init+0x274>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d807      	bhi.n	80066f4 <HAL_I2C_Init+0x84>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a80      	ldr	r2, [pc, #512]	@ (80068e8 <HAL_I2C_Init+0x278>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	bf94      	ite	ls
 80066ec:	2301      	movls	r3, #1
 80066ee:	2300      	movhi	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e006      	b.n	8006702 <HAL_I2C_Init+0x92>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a7d      	ldr	r2, [pc, #500]	@ (80068ec <HAL_I2C_Init+0x27c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	bf94      	ite	ls
 80066fc:	2301      	movls	r3, #1
 80066fe:	2300      	movhi	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e0e7      	b.n	80068da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4a78      	ldr	r2, [pc, #480]	@ (80068f0 <HAL_I2C_Init+0x280>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	0c9b      	lsrs	r3, r3, #18
 8006714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a6a      	ldr	r2, [pc, #424]	@ (80068e4 <HAL_I2C_Init+0x274>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d802      	bhi.n	8006744 <HAL_I2C_Init+0xd4>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3301      	adds	r3, #1
 8006742:	e009      	b.n	8006758 <HAL_I2C_Init+0xe8>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	4a69      	ldr	r2, [pc, #420]	@ (80068f4 <HAL_I2C_Init+0x284>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	3301      	adds	r3, #1
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	430b      	orrs	r3, r1
 800675e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800676a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	495c      	ldr	r1, [pc, #368]	@ (80068e4 <HAL_I2C_Init+0x274>)
 8006774:	428b      	cmp	r3, r1
 8006776:	d819      	bhi.n	80067ac <HAL_I2C_Init+0x13c>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	1e59      	subs	r1, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	fbb1 f3f3 	udiv	r3, r1, r3
 8006786:	1c59      	adds	r1, r3, #1
 8006788:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800678c:	400b      	ands	r3, r1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_I2C_Init+0x138>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1e59      	subs	r1, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	fbb1 f3f3 	udiv	r3, r1, r3
 80067a0:	3301      	adds	r3, #1
 80067a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a6:	e051      	b.n	800684c <HAL_I2C_Init+0x1dc>
 80067a8:	2304      	movs	r3, #4
 80067aa:	e04f      	b.n	800684c <HAL_I2C_Init+0x1dc>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d111      	bne.n	80067d8 <HAL_I2C_Init+0x168>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	1e58      	subs	r0, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	440b      	add	r3, r1
 80067c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067c6:	3301      	adds	r3, #1
 80067c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e012      	b.n	80067fe <HAL_I2C_Init+0x18e>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1e58      	subs	r0, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	0099      	lsls	r1, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ee:	3301      	adds	r3, #1
 80067f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_I2C_Init+0x196>
 8006802:	2301      	movs	r3, #1
 8006804:	e022      	b.n	800684c <HAL_I2C_Init+0x1dc>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10e      	bne.n	800682c <HAL_I2C_Init+0x1bc>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1e58      	subs	r0, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6859      	ldr	r1, [r3, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	440b      	add	r3, r1
 800681c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006820:	3301      	adds	r3, #1
 8006822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800682a:	e00f      	b.n	800684c <HAL_I2C_Init+0x1dc>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	1e58      	subs	r0, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	0099      	lsls	r1, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006842:	3301      	adds	r3, #1
 8006844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006848:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	6809      	ldr	r1, [r1, #0]
 8006850:	4313      	orrs	r3, r2
 8006852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69da      	ldr	r2, [r3, #28]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800687a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6911      	ldr	r1, [r2, #16]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68d2      	ldr	r2, [r2, #12]
 8006886:	4311      	orrs	r1, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	430b      	orrs	r3, r1
 800688e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695a      	ldr	r2, [r3, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	000186a0 	.word	0x000186a0
 80068e8:	001e847f 	.word	0x001e847f
 80068ec:	003d08ff 	.word	0x003d08ff
 80068f0:	431bde83 	.word	0x431bde83
 80068f4:	10624dd3 	.word	0x10624dd3

080068f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	461a      	mov	r2, r3
 8006906:	4603      	mov	r3, r0
 8006908:	817b      	strh	r3, [r7, #10]
 800690a:	460b      	mov	r3, r1
 800690c:	813b      	strh	r3, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006912:	f7ff fb3b 	bl	8005f8c <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b20      	cmp	r3, #32
 8006922:	f040 80d9 	bne.w	8006ad8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2319      	movs	r3, #25
 800692c:	2201      	movs	r2, #1
 800692e:	496d      	ldr	r1, [pc, #436]	@ (8006ae4 <HAL_I2C_Mem_Write+0x1ec>)
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fc8b 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800693c:	2302      	movs	r3, #2
 800693e:	e0cc      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_I2C_Mem_Write+0x56>
 800694a:	2302      	movs	r3, #2
 800694c:	e0c5      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b01      	cmp	r3, #1
 8006962:	d007      	beq.n	8006974 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2221      	movs	r2, #33	@ 0x21
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2240      	movs	r2, #64	@ 0x40
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80069a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a4d      	ldr	r2, [pc, #308]	@ (8006ae8 <HAL_I2C_Mem_Write+0x1f0>)
 80069b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069b6:	88f8      	ldrh	r0, [r7, #6]
 80069b8:	893a      	ldrh	r2, [r7, #8]
 80069ba:	8979      	ldrh	r1, [r7, #10]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	4603      	mov	r3, r0
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 fac2 	bl	8006f50 <I2C_RequestMemoryWrite>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d052      	beq.n	8006a78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e081      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fd50 	bl	8007480 <I2C_WaitOnTXEFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00d      	beq.n	8006a02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d107      	bne.n	80069fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e06b      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d11b      	bne.n	8006a78 <HAL_I2C_Mem_Write+0x180>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d017      	beq.n	8006a78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1aa      	bne.n	80069d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fd43 	bl	8007510 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d107      	bne.n	8006aa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e016      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	00100002 	.word	0x00100002
 8006ae8:	ffff0000 	.word	0xffff0000

08006aec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	@ 0x30
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	4603      	mov	r3, r0
 8006afc:	817b      	strh	r3, [r7, #10]
 8006afe:	460b      	mov	r3, r1
 8006b00:	813b      	strh	r3, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b06:	f7ff fa41 	bl	8005f8c <HAL_GetTick>
 8006b0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	f040 8214 	bne.w	8006f42 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	2319      	movs	r3, #25
 8006b20:	2201      	movs	r2, #1
 8006b22:	497b      	ldr	r1, [pc, #492]	@ (8006d10 <HAL_I2C_Mem_Read+0x224>)
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fb91 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b30:	2302      	movs	r3, #2
 8006b32:	e207      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_I2C_Mem_Read+0x56>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e200      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d007      	beq.n	8006b68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2222      	movs	r2, #34	@ 0x22
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2240      	movs	r2, #64	@ 0x40
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8006d14 <HAL_I2C_Mem_Read+0x228>)
 8006ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006baa:	88f8      	ldrh	r0, [r7, #6]
 8006bac:	893a      	ldrh	r2, [r7, #8]
 8006bae:	8979      	ldrh	r1, [r7, #10]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4603      	mov	r3, r0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fa5e 	bl	800707c <I2C_RequestMemoryRead>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e1bc      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d113      	bne.n	8006bfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	623b      	str	r3, [r7, #32]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e190      	b.n	8006f1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d11b      	bne.n	8006c3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e170      	b.n	8006f1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d11b      	bne.n	8006c7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c62:	2300      	movs	r3, #0
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	e150      	b.n	8006f1c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c90:	e144      	b.n	8006f1c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	f200 80f1 	bhi.w	8006e7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d123      	bne.n	8006cec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fc79 	bl	80075a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e145      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006cea:	e117      	b.n	8006f1c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d14e      	bne.n	8006d92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4906      	ldr	r1, [pc, #24]	@ (8006d18 <HAL_I2C_Mem_Read+0x22c>)
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 faa4 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e11a      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
 8006d0e:	bf00      	nop
 8006d10:	00100002 	.word	0x00100002
 8006d14:	ffff0000 	.word	0xffff0000
 8006d18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d90:	e0c4      	b.n	8006f1c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	2200      	movs	r2, #0
 8006d9a:	496c      	ldr	r1, [pc, #432]	@ (8006f4c <HAL_I2C_Mem_Read+0x460>)
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fa55 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0cb      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df4:	2200      	movs	r2, #0
 8006df6:	4955      	ldr	r1, [pc, #340]	@ (8006f4c <HAL_I2C_Mem_Read+0x460>)
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fa27 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e09d      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e7c:	e04e      	b.n	8006f1c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fb8c 	bl	80075a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e058      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d124      	bne.n	8006f1c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d107      	bne.n	8006eea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f47f aeb6 	bne.w	8006c92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e000      	b.n	8006f44 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006f42:	2302      	movs	r3, #2
  }
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3728      	adds	r7, #40	@ 0x28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	00010004 	.word	0x00010004

08006f50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	817b      	strh	r3, [r7, #10]
 8006f62:	460b      	mov	r3, r1
 8006f64:	813b      	strh	r3, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f960 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa0:	d103      	bne.n	8006faa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e05f      	b.n	800706e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fae:	897b      	ldrh	r3, [r7, #10]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006fbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	6a3a      	ldr	r2, [r7, #32]
 8006fc2:	492d      	ldr	r1, [pc, #180]	@ (8007078 <I2C_RequestMemoryWrite+0x128>)
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f9bb 	bl	8007340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e04c      	b.n	800706e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fec:	6a39      	ldr	r1, [r7, #32]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fa46 	bl	8007480 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00d      	beq.n	8007016 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d107      	bne.n	8007012 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e02b      	b.n	800706e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d105      	bne.n	8007028 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800701c:	893b      	ldrh	r3, [r7, #8]
 800701e:	b2da      	uxtb	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	611a      	str	r2, [r3, #16]
 8007026:	e021      	b.n	800706c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007028:	893b      	ldrh	r3, [r7, #8]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	b29b      	uxth	r3, r3
 800702e:	b2da      	uxtb	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007038:	6a39      	ldr	r1, [r7, #32]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fa20 	bl	8007480 <I2C_WaitOnTXEFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00d      	beq.n	8007062 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	2b04      	cmp	r3, #4
 800704c:	d107      	bne.n	800705e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800705c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e005      	b.n	800706e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007062:	893b      	ldrh	r3, [r7, #8]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	00010002 	.word	0x00010002

0800707c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	461a      	mov	r2, r3
 800708a:	4603      	mov	r3, r0
 800708c:	817b      	strh	r3, [r7, #10]
 800708e:	460b      	mov	r3, r1
 8007090:	813b      	strh	r3, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2200      	movs	r2, #0
 80070be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f8c2 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00d      	beq.n	80070ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070dc:	d103      	bne.n	80070e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e0aa      	b.n	8007240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ea:	897b      	ldrh	r3, [r7, #10]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	4952      	ldr	r1, [pc, #328]	@ (8007248 <I2C_RequestMemoryRead+0x1cc>)
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f91d 	bl	8007340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e097      	b.n	8007240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007128:	6a39      	ldr	r1, [r7, #32]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f9a8 	bl	8007480 <I2C_WaitOnTXEFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00d      	beq.n	8007152 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713a:	2b04      	cmp	r3, #4
 800713c:	d107      	bne.n	800714e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800714c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e076      	b.n	8007240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d105      	bne.n	8007164 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007158:	893b      	ldrh	r3, [r7, #8]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	611a      	str	r2, [r3, #16]
 8007162:	e021      	b.n	80071a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007164:	893b      	ldrh	r3, [r7, #8]
 8007166:	0a1b      	lsrs	r3, r3, #8
 8007168:	b29b      	uxth	r3, r3
 800716a:	b2da      	uxtb	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007174:	6a39      	ldr	r1, [r7, #32]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f982 	bl	8007480 <I2C_WaitOnTXEFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00d      	beq.n	800719e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	2b04      	cmp	r3, #4
 8007188:	d107      	bne.n	800719a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007198:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e050      	b.n	8007240 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800719e:	893b      	ldrh	r3, [r7, #8]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071aa:	6a39      	ldr	r1, [r7, #32]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f967 	bl	8007480 <I2C_WaitOnTXEFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00d      	beq.n	80071d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d107      	bne.n	80071d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e035      	b.n	8007240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f82b 	bl	800724c <I2C_WaitOnFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00d      	beq.n	8007218 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720a:	d103      	bne.n	8007214 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007212:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e013      	b.n	8007240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007218:	897b      	ldrh	r3, [r7, #10]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f043 0301 	orr.w	r3, r3, #1
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	6a3a      	ldr	r2, [r7, #32]
 800722c:	4906      	ldr	r1, [pc, #24]	@ (8007248 <I2C_RequestMemoryRead+0x1cc>)
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f886 	bl	8007340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	00010002 	.word	0x00010002

0800724c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800725c:	e048      	b.n	80072f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d044      	beq.n	80072f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007266:	f7fe fe91 	bl	8005f8c <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d302      	bcc.n	800727c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d139      	bne.n	80072f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	0c1b      	lsrs	r3, r3, #16
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b01      	cmp	r3, #1
 8007284:	d10d      	bne.n	80072a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	43da      	mvns	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4013      	ands	r3, r2
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	bf0c      	ite	eq
 8007298:	2301      	moveq	r3, #1
 800729a:	2300      	movne	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	e00c      	b.n	80072bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	43da      	mvns	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4013      	ands	r3, r2
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf0c      	ite	eq
 80072b4:	2301      	moveq	r3, #1
 80072b6:	2300      	movne	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	461a      	mov	r2, r3
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d116      	bne.n	80072f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	f043 0220 	orr.w	r2, r3, #32
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e023      	b.n	8007338 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10d      	bne.n	8007316 <I2C_WaitOnFlagUntilTimeout+0xca>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	43da      	mvns	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	e00c      	b.n	8007330 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	43da      	mvns	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	4013      	ands	r3, r2
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	bf0c      	ite	eq
 8007328:	2301      	moveq	r3, #1
 800732a:	2300      	movne	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	429a      	cmp	r2, r3
 8007334:	d093      	beq.n	800725e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800734e:	e071      	b.n	8007434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800735e:	d123      	bne.n	80073a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800736e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007394:	f043 0204 	orr.w	r2, r3, #4
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e067      	b.n	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d041      	beq.n	8007434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b0:	f7fe fdec 	bl	8005f8c <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d136      	bne.n	8007434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10c      	bne.n	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	43da      	mvns	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4013      	ands	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bf14      	ite	ne
 80073e2:	2301      	movne	r3, #1
 80073e4:	2300      	moveq	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	e00b      	b.n	8007402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	43da      	mvns	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4013      	ands	r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bf14      	ite	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	2300      	moveq	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	f043 0220 	orr.w	r2, r3, #32
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e021      	b.n	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	0c1b      	lsrs	r3, r3, #16
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b01      	cmp	r3, #1
 800743c:	d10c      	bne.n	8007458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	43da      	mvns	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4013      	ands	r3, r2
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	e00b      	b.n	8007470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	43da      	mvns	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4013      	ands	r3, r2
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf14      	ite	ne
 800746a:	2301      	movne	r3, #1
 800746c:	2300      	moveq	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	f47f af6d 	bne.w	8007350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800748c:	e034      	b.n	80074f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f8e3 	bl	800765a <I2C_IsAcknowledgeFailed>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e034      	b.n	8007508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d028      	beq.n	80074f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a6:	f7fe fd71 	bl	8005f8c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d302      	bcc.n	80074bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d11d      	bne.n	80074f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c6:	2b80      	cmp	r3, #128	@ 0x80
 80074c8:	d016      	beq.n	80074f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e007      	b.n	8007508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007502:	2b80      	cmp	r3, #128	@ 0x80
 8007504:	d1c3      	bne.n	800748e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800751c:	e034      	b.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f89b 	bl	800765a <I2C_IsAcknowledgeFailed>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e034      	b.n	8007598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d028      	beq.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7fe fd29 	bl	8005f8c <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11d      	bne.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b04      	cmp	r3, #4
 8007558:	d016      	beq.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007574:	f043 0220 	orr.w	r2, r3, #32
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e007      	b.n	8007598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b04      	cmp	r3, #4
 8007594:	d1c3      	bne.n	800751e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075ac:	e049      	b.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b10      	cmp	r3, #16
 80075ba:	d119      	bne.n	80075f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f06f 0210 	mvn.w	r2, #16
 80075c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e030      	b.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f0:	f7fe fccc 	bl	8005f8c <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d11d      	bne.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b40      	cmp	r3, #64	@ 0x40
 8007612:	d016      	beq.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	f043 0220 	orr.w	r2, r3, #32
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e007      	b.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764c:	2b40      	cmp	r3, #64	@ 0x40
 800764e:	d1ae      	bne.n	80075ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800766c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007670:	d11b      	bne.n	80076aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800767a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007696:	f043 0204 	orr.w	r2, r3, #4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e267      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d075      	beq.n	80077c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076d6:	4b88      	ldr	r3, [pc, #544]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 030c 	and.w	r3, r3, #12
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d00c      	beq.n	80076fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076e2:	4b85      	ldr	r3, [pc, #532]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076ea:	2b08      	cmp	r3, #8
 80076ec:	d112      	bne.n	8007714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ee:	4b82      	ldr	r3, [pc, #520]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fa:	d10b      	bne.n	8007714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076fc:	4b7e      	ldr	r3, [pc, #504]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d05b      	beq.n	80077c0 <HAL_RCC_OscConfig+0x108>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d157      	bne.n	80077c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e242      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800771c:	d106      	bne.n	800772c <HAL_RCC_OscConfig+0x74>
 800771e:	4b76      	ldr	r3, [pc, #472]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a75      	ldr	r2, [pc, #468]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	e01d      	b.n	8007768 <HAL_RCC_OscConfig+0xb0>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007734:	d10c      	bne.n	8007750 <HAL_RCC_OscConfig+0x98>
 8007736:	4b70      	ldr	r3, [pc, #448]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a6f      	ldr	r2, [pc, #444]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 800773c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	4b6d      	ldr	r3, [pc, #436]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a6c      	ldr	r2, [pc, #432]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	e00b      	b.n	8007768 <HAL_RCC_OscConfig+0xb0>
 8007750:	4b69      	ldr	r3, [pc, #420]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a68      	ldr	r2, [pc, #416]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	4b66      	ldr	r3, [pc, #408]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a65      	ldr	r2, [pc, #404]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d013      	beq.n	8007798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007770:	f7fe fc0c 	bl	8005f8c <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007778:	f7fe fc08 	bl	8005f8c <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b64      	cmp	r3, #100	@ 0x64
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e207      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800778a:	4b5b      	ldr	r3, [pc, #364]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0xc0>
 8007796:	e014      	b.n	80077c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007798:	f7fe fbf8 	bl	8005f8c <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077a0:	f7fe fbf4 	bl	8005f8c <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b64      	cmp	r3, #100	@ 0x64
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e1f3      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077b2:	4b51      	ldr	r3, [pc, #324]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f0      	bne.n	80077a0 <HAL_RCC_OscConfig+0xe8>
 80077be:	e000      	b.n	80077c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d063      	beq.n	8007896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ce:	4b4a      	ldr	r3, [pc, #296]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 030c 	and.w	r3, r3, #12
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00b      	beq.n	80077f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077da:	4b47      	ldr	r3, [pc, #284]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d11c      	bne.n	8007820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077e6:	4b44      	ldr	r3, [pc, #272]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d116      	bne.n	8007820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077f2:	4b41      	ldr	r3, [pc, #260]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d005      	beq.n	800780a <HAL_RCC_OscConfig+0x152>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d001      	beq.n	800780a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e1c7      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780a:	4b3b      	ldr	r3, [pc, #236]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4937      	ldr	r1, [pc, #220]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 800781a:	4313      	orrs	r3, r2
 800781c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800781e:	e03a      	b.n	8007896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d020      	beq.n	800786a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007828:	4b34      	ldr	r3, [pc, #208]	@ (80078fc <HAL_RCC_OscConfig+0x244>)
 800782a:	2201      	movs	r2, #1
 800782c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782e:	f7fe fbad 	bl	8005f8c <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007836:	f7fe fba9 	bl	8005f8c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e1a8      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007848:	4b2b      	ldr	r3, [pc, #172]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0f0      	beq.n	8007836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007854:	4b28      	ldr	r3, [pc, #160]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	4925      	ldr	r1, [pc, #148]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 8007864:	4313      	orrs	r3, r2
 8007866:	600b      	str	r3, [r1, #0]
 8007868:	e015      	b.n	8007896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800786a:	4b24      	ldr	r3, [pc, #144]	@ (80078fc <HAL_RCC_OscConfig+0x244>)
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007870:	f7fe fb8c 	bl	8005f8c <HAL_GetTick>
 8007874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007878:	f7fe fb88 	bl	8005f8c <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b02      	cmp	r3, #2
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e187      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800788a:	4b1b      	ldr	r3, [pc, #108]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f0      	bne.n	8007878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d036      	beq.n	8007910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d016      	beq.n	80078d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078aa:	4b15      	ldr	r3, [pc, #84]	@ (8007900 <HAL_RCC_OscConfig+0x248>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b0:	f7fe fb6c 	bl	8005f8c <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078b8:	f7fe fb68 	bl	8005f8c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e167      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ca:	4b0b      	ldr	r3, [pc, #44]	@ (80078f8 <HAL_RCC_OscConfig+0x240>)
 80078cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0f0      	beq.n	80078b8 <HAL_RCC_OscConfig+0x200>
 80078d6:	e01b      	b.n	8007910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078d8:	4b09      	ldr	r3, [pc, #36]	@ (8007900 <HAL_RCC_OscConfig+0x248>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078de:	f7fe fb55 	bl	8005f8c <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078e4:	e00e      	b.n	8007904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078e6:	f7fe fb51 	bl	8005f8c <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d907      	bls.n	8007904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e150      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
 80078f8:	40023800 	.word	0x40023800
 80078fc:	42470000 	.word	0x42470000
 8007900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007904:	4b88      	ldr	r3, [pc, #544]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1ea      	bne.n	80078e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8097 	beq.w	8007a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007922:	4b81      	ldr	r3, [pc, #516]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10f      	bne.n	800794e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	4b7d      	ldr	r3, [pc, #500]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007936:	4a7c      	ldr	r2, [pc, #496]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800793c:	6413      	str	r3, [r2, #64]	@ 0x40
 800793e:	4b7a      	ldr	r3, [pc, #488]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800794a:	2301      	movs	r3, #1
 800794c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794e:	4b77      	ldr	r3, [pc, #476]	@ (8007b2c <HAL_RCC_OscConfig+0x474>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007956:	2b00      	cmp	r3, #0
 8007958:	d118      	bne.n	800798c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800795a:	4b74      	ldr	r3, [pc, #464]	@ (8007b2c <HAL_RCC_OscConfig+0x474>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a73      	ldr	r2, [pc, #460]	@ (8007b2c <HAL_RCC_OscConfig+0x474>)
 8007960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007966:	f7fe fb11 	bl	8005f8c <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800796e:	f7fe fb0d 	bl	8005f8c <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e10c      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007980:	4b6a      	ldr	r3, [pc, #424]	@ (8007b2c <HAL_RCC_OscConfig+0x474>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0f0      	beq.n	800796e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d106      	bne.n	80079a2 <HAL_RCC_OscConfig+0x2ea>
 8007994:	4b64      	ldr	r3, [pc, #400]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007998:	4a63      	ldr	r2, [pc, #396]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	6713      	str	r3, [r2, #112]	@ 0x70
 80079a0:	e01c      	b.n	80079dc <HAL_RCC_OscConfig+0x324>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d10c      	bne.n	80079c4 <HAL_RCC_OscConfig+0x30c>
 80079aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ae:	4a5e      	ldr	r2, [pc, #376]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079b0:	f043 0304 	orr.w	r3, r3, #4
 80079b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80079b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ba:	4a5b      	ldr	r2, [pc, #364]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80079c2:	e00b      	b.n	80079dc <HAL_RCC_OscConfig+0x324>
 80079c4:	4b58      	ldr	r3, [pc, #352]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c8:	4a57      	ldr	r2, [pc, #348]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079ca:	f023 0301 	bic.w	r3, r3, #1
 80079ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80079d0:	4b55      	ldr	r3, [pc, #340]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d4:	4a54      	ldr	r2, [pc, #336]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 80079d6:	f023 0304 	bic.w	r3, r3, #4
 80079da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d015      	beq.n	8007a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e4:	f7fe fad2 	bl	8005f8c <HAL_GetTick>
 80079e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ea:	e00a      	b.n	8007a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ec:	f7fe face 	bl	8005f8c <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e0cb      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a02:	4b49      	ldr	r3, [pc, #292]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0ee      	beq.n	80079ec <HAL_RCC_OscConfig+0x334>
 8007a0e:	e014      	b.n	8007a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a10:	f7fe fabc 	bl	8005f8c <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a16:	e00a      	b.n	8007a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a18:	f7fe fab8 	bl	8005f8c <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e0b5      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1ee      	bne.n	8007a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d105      	bne.n	8007a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a40:	4b39      	ldr	r3, [pc, #228]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a44:	4a38      	ldr	r2, [pc, #224]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 80a1 	beq.w	8007b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a56:	4b34      	ldr	r3, [pc, #208]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 030c 	and.w	r3, r3, #12
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d05c      	beq.n	8007b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d141      	bne.n	8007aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a6a:	4b31      	ldr	r3, [pc, #196]	@ (8007b30 <HAL_RCC_OscConfig+0x478>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a70:	f7fe fa8c 	bl	8005f8c <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a78:	f7fe fa88 	bl	8005f8c <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e087      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8a:	4b27      	ldr	r3, [pc, #156]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f0      	bne.n	8007a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	019b      	lsls	r3, r3, #6
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	061b      	lsls	r3, r3, #24
 8007aba:	491b      	ldr	r1, [pc, #108]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b30 <HAL_RCC_OscConfig+0x478>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac6:	f7fe fa61 	bl	8005f8c <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007acc:	e008      	b.n	8007ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ace:	f7fe fa5d 	bl	8005f8c <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d901      	bls.n	8007ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e05c      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae0:	4b11      	ldr	r3, [pc, #68]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0f0      	beq.n	8007ace <HAL_RCC_OscConfig+0x416>
 8007aec:	e054      	b.n	8007b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aee:	4b10      	ldr	r3, [pc, #64]	@ (8007b30 <HAL_RCC_OscConfig+0x478>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af4:	f7fe fa4a 	bl	8005f8c <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007afc:	f7fe fa46 	bl	8005f8c <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e045      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b0e:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <HAL_RCC_OscConfig+0x470>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1f0      	bne.n	8007afc <HAL_RCC_OscConfig+0x444>
 8007b1a:	e03d      	b.n	8007b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d107      	bne.n	8007b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e038      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	40007000 	.word	0x40007000
 8007b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b34:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba4 <HAL_RCC_OscConfig+0x4ec>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d028      	beq.n	8007b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d121      	bne.n	8007b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d11a      	bne.n	8007b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b64:	4013      	ands	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d111      	bne.n	8007b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d107      	bne.n	8007b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d001      	beq.n	8007b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e000      	b.n	8007b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40023800 	.word	0x40023800

08007ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e0cc      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bbc:	4b68      	ldr	r3, [pc, #416]	@ (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d90c      	bls.n	8007be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bca:	4b65      	ldr	r3, [pc, #404]	@ (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd2:	4b63      	ldr	r3, [pc, #396]	@ (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d001      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e0b8      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d020      	beq.n	8007c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bfc:	4b59      	ldr	r3, [pc, #356]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4a58      	ldr	r2, [pc, #352]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c14:	4b53      	ldr	r3, [pc, #332]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4a52      	ldr	r2, [pc, #328]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c20:	4b50      	ldr	r3, [pc, #320]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	494d      	ldr	r1, [pc, #308]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d044      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d107      	bne.n	8007c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c46:	4b47      	ldr	r3, [pc, #284]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d119      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e07f      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d003      	beq.n	8007c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d107      	bne.n	8007c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c66:	4b3f      	ldr	r3, [pc, #252]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e06f      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c76:	4b3b      	ldr	r3, [pc, #236]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e067      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c86:	4b37      	ldr	r3, [pc, #220]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f023 0203 	bic.w	r2, r3, #3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4934      	ldr	r1, [pc, #208]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c98:	f7fe f978 	bl	8005f8c <HAL_GetTick>
 8007c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c9e:	e00a      	b.n	8007cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca0:	f7fe f974 	bl	8005f8c <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e04f      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 020c 	and.w	r2, r3, #12
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d1eb      	bne.n	8007ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cc8:	4b25      	ldr	r3, [pc, #148]	@ (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d20c      	bcs.n	8007cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cd6:	4b22      	ldr	r3, [pc, #136]	@ (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cde:	4b20      	ldr	r3, [pc, #128]	@ (8007d60 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d001      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e032      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cfc:	4b19      	ldr	r3, [pc, #100]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4916      	ldr	r1, [pc, #88]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d1a:	4b12      	ldr	r3, [pc, #72]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	490e      	ldr	r1, [pc, #56]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d2e:	f000 f821 	bl	8007d74 <HAL_RCC_GetSysClockFreq>
 8007d32:	4602      	mov	r2, r0
 8007d34:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	091b      	lsrs	r3, r3, #4
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	490a      	ldr	r1, [pc, #40]	@ (8007d68 <HAL_RCC_ClockConfig+0x1c0>)
 8007d40:	5ccb      	ldrb	r3, [r1, r3]
 8007d42:	fa22 f303 	lsr.w	r3, r2, r3
 8007d46:	4a09      	ldr	r2, [pc, #36]	@ (8007d6c <HAL_RCC_ClockConfig+0x1c4>)
 8007d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d4a:	4b09      	ldr	r3, [pc, #36]	@ (8007d70 <HAL_RCC_ClockConfig+0x1c8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe f8d8 	bl	8005f04 <HAL_InitTick>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40023c00 	.word	0x40023c00
 8007d64:	40023800 	.word	0x40023800
 8007d68:	0800b630 	.word	0x0800b630
 8007d6c:	2000003c 	.word	0x2000003c
 8007d70:	20000040 	.word	0x20000040

08007d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d78:	b090      	sub	sp, #64	@ 0x40
 8007d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d80:	2300      	movs	r3, #0
 8007d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d84:	2300      	movs	r3, #0
 8007d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d8c:	4b59      	ldr	r3, [pc, #356]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f003 030c 	and.w	r3, r3, #12
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d00d      	beq.n	8007db4 <HAL_RCC_GetSysClockFreq+0x40>
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	f200 80a1 	bhi.w	8007ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_RCC_GetSysClockFreq+0x34>
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d003      	beq.n	8007dae <HAL_RCC_GetSysClockFreq+0x3a>
 8007da6:	e09b      	b.n	8007ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007da8:	4b53      	ldr	r3, [pc, #332]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007daa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007dac:	e09b      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dae:	4b53      	ldr	r3, [pc, #332]	@ (8007efc <HAL_RCC_GetSysClockFreq+0x188>)
 8007db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007db2:	e098      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007db4:	4b4f      	ldr	r3, [pc, #316]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d028      	beq.n	8007e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dca:	4b4a      	ldr	r3, [pc, #296]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	099b      	lsrs	r3, r3, #6
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	623b      	str	r3, [r7, #32]
 8007dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4b47      	ldr	r3, [pc, #284]	@ (8007efc <HAL_RCC_GetSysClockFreq+0x188>)
 8007de0:	fb03 f201 	mul.w	r2, r3, r1
 8007de4:	2300      	movs	r3, #0
 8007de6:	fb00 f303 	mul.w	r3, r0, r3
 8007dea:	4413      	add	r3, r2
 8007dec:	4a43      	ldr	r2, [pc, #268]	@ (8007efc <HAL_RCC_GetSysClockFreq+0x188>)
 8007dee:	fba0 1202 	umull	r1, r2, r0, r2
 8007df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007df4:	460a      	mov	r2, r1
 8007df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dfa:	4413      	add	r3, r2
 8007dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e00:	2200      	movs	r2, #0
 8007e02:	61bb      	str	r3, [r7, #24]
 8007e04:	61fa      	str	r2, [r7, #28]
 8007e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007e0e:	f7f8 fe51 	bl	8000ab4 <__aeabi_uldivmod>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4613      	mov	r3, r2
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e1a:	e053      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e1c:	4b35      	ldr	r3, [pc, #212]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	099b      	lsrs	r3, r3, #6
 8007e22:	2200      	movs	r2, #0
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	617a      	str	r2, [r7, #20]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e2e:	f04f 0b00 	mov.w	fp, #0
 8007e32:	4652      	mov	r2, sl
 8007e34:	465b      	mov	r3, fp
 8007e36:	f04f 0000 	mov.w	r0, #0
 8007e3a:	f04f 0100 	mov.w	r1, #0
 8007e3e:	0159      	lsls	r1, r3, #5
 8007e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e44:	0150      	lsls	r0, r2, #5
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8007e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e66:	ebb2 0408 	subs.w	r4, r2, r8
 8007e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	f04f 0300 	mov.w	r3, #0
 8007e76:	00eb      	lsls	r3, r5, #3
 8007e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e7c:	00e2      	lsls	r2, r4, #3
 8007e7e:	4614      	mov	r4, r2
 8007e80:	461d      	mov	r5, r3
 8007e82:	eb14 030a 	adds.w	r3, r4, sl
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	eb45 030b 	adc.w	r3, r5, fp
 8007e8c:	607b      	str	r3, [r7, #4]
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	028b      	lsls	r3, r1, #10
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	028a      	lsls	r2, r1, #10
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eae:	2200      	movs	r2, #0
 8007eb0:	60bb      	str	r3, [r7, #8]
 8007eb2:	60fa      	str	r2, [r7, #12]
 8007eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eb8:	f7f8 fdfc 	bl	8000ab4 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	0c1b      	lsrs	r3, r3, #16
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	3301      	adds	r3, #1
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ede:	e002      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ee0:	4b05      	ldr	r3, [pc, #20]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3740      	adds	r7, #64	@ 0x40
 8007eec:	46bd      	mov	sp, r7
 8007eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	00f42400 	.word	0x00f42400
 8007efc:	017d7840 	.word	0x017d7840

08007f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f04:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f06:	681b      	ldr	r3, [r3, #0]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	2000003c 	.word	0x2000003c

08007f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f1c:	f7ff fff0 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 8007f20:	4602      	mov	r2, r0
 8007f22:	4b05      	ldr	r3, [pc, #20]	@ (8007f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	0a9b      	lsrs	r3, r3, #10
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	4903      	ldr	r1, [pc, #12]	@ (8007f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f2e:	5ccb      	ldrb	r3, [r1, r3]
 8007f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	0800b640 	.word	0x0800b640

08007f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f44:	f7ff ffdc 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	0b5b      	lsrs	r3, r3, #13
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	4903      	ldr	r1, [pc, #12]	@ (8007f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f56:	5ccb      	ldrb	r3, [r1, r3]
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	40023800 	.word	0x40023800
 8007f64:	0800b640 	.word	0x0800b640

08007f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e041      	b.n	8007ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fd fdd2 	bl	8005b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f000 fe2c 	bl	8008c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e041      	b.n	800809c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d106      	bne.n	8008032 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f839 	bl	80080a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f000 fddd 	bl	8008c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <HAL_TIM_PWM_Start+0x24>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	bf14      	ite	ne
 80080d4:	2301      	movne	r3, #1
 80080d6:	2300      	moveq	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	e022      	b.n	8008122 <HAL_TIM_PWM_Start+0x6a>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d109      	bne.n	80080f6 <HAL_TIM_PWM_Start+0x3e>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	bf14      	ite	ne
 80080ee:	2301      	movne	r3, #1
 80080f0:	2300      	moveq	r3, #0
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	e015      	b.n	8008122 <HAL_TIM_PWM_Start+0x6a>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d109      	bne.n	8008110 <HAL_TIM_PWM_Start+0x58>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	bf14      	ite	ne
 8008108:	2301      	movne	r3, #1
 800810a:	2300      	moveq	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	e008      	b.n	8008122 <HAL_TIM_PWM_Start+0x6a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e068      	b.n	80081fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d104      	bne.n	800813a <HAL_TIM_PWM_Start+0x82>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008138:	e013      	b.n	8008162 <HAL_TIM_PWM_Start+0xaa>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b04      	cmp	r3, #4
 800813e:	d104      	bne.n	800814a <HAL_TIM_PWM_Start+0x92>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008148:	e00b      	b.n	8008162 <HAL_TIM_PWM_Start+0xaa>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d104      	bne.n	800815a <HAL_TIM_PWM_Start+0xa2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008158:	e003      	b.n	8008162 <HAL_TIM_PWM_Start+0xaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2201      	movs	r2, #1
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f001 f91a 	bl	80093a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a23      	ldr	r2, [pc, #140]	@ (8008204 <HAL_TIM_PWM_Start+0x14c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d107      	bne.n	800818a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008188:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1d      	ldr	r2, [pc, #116]	@ (8008204 <HAL_TIM_PWM_Start+0x14c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d018      	beq.n	80081c6 <HAL_TIM_PWM_Start+0x10e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819c:	d013      	beq.n	80081c6 <HAL_TIM_PWM_Start+0x10e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a19      	ldr	r2, [pc, #100]	@ (8008208 <HAL_TIM_PWM_Start+0x150>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00e      	beq.n	80081c6 <HAL_TIM_PWM_Start+0x10e>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a17      	ldr	r2, [pc, #92]	@ (800820c <HAL_TIM_PWM_Start+0x154>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d009      	beq.n	80081c6 <HAL_TIM_PWM_Start+0x10e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a16      	ldr	r2, [pc, #88]	@ (8008210 <HAL_TIM_PWM_Start+0x158>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d004      	beq.n	80081c6 <HAL_TIM_PWM_Start+0x10e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a14      	ldr	r2, [pc, #80]	@ (8008214 <HAL_TIM_PWM_Start+0x15c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d111      	bne.n	80081ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b06      	cmp	r3, #6
 80081d6:	d010      	beq.n	80081fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e8:	e007      	b.n	80081fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0201 	orr.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	40010000 	.word	0x40010000
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40014000 	.word	0x40014000

08008218 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e041      	b.n	80082ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d106      	bne.n	8008244 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f839 	bl	80082b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3304      	adds	r3, #4
 8008254:	4619      	mov	r1, r3
 8008256:	4610      	mov	r0, r2
 8008258:	f000 fcd4 	bl	8008c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
	...

080082cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <HAL_TIM_IC_Start_IT+0x1e>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	e013      	b.n	8008312 <HAL_TIM_IC_Start_IT+0x46>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d104      	bne.n	80082fa <HAL_TIM_IC_Start_IT+0x2e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	e00b      	b.n	8008312 <HAL_TIM_IC_Start_IT+0x46>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d104      	bne.n	800830a <HAL_TIM_IC_Start_IT+0x3e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008306:	b2db      	uxtb	r3, r3
 8008308:	e003      	b.n	8008312 <HAL_TIM_IC_Start_IT+0x46>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008310:	b2db      	uxtb	r3, r3
 8008312:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d104      	bne.n	8008324 <HAL_TIM_IC_Start_IT+0x58>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008320:	b2db      	uxtb	r3, r3
 8008322:	e013      	b.n	800834c <HAL_TIM_IC_Start_IT+0x80>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b04      	cmp	r3, #4
 8008328:	d104      	bne.n	8008334 <HAL_TIM_IC_Start_IT+0x68>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008330:	b2db      	uxtb	r3, r3
 8008332:	e00b      	b.n	800834c <HAL_TIM_IC_Start_IT+0x80>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b08      	cmp	r3, #8
 8008338:	d104      	bne.n	8008344 <HAL_TIM_IC_Start_IT+0x78>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008340:	b2db      	uxtb	r3, r3
 8008342:	e003      	b.n	800834c <HAL_TIM_IC_Start_IT+0x80>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800834a:	b2db      	uxtb	r3, r3
 800834c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d102      	bne.n	800835a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008354:	7b7b      	ldrb	r3, [r7, #13]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d001      	beq.n	800835e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e0c2      	b.n	80084e4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <HAL_TIM_IC_Start_IT+0xa2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800836c:	e013      	b.n	8008396 <HAL_TIM_IC_Start_IT+0xca>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b04      	cmp	r3, #4
 8008372:	d104      	bne.n	800837e <HAL_TIM_IC_Start_IT+0xb2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800837c:	e00b      	b.n	8008396 <HAL_TIM_IC_Start_IT+0xca>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b08      	cmp	r3, #8
 8008382:	d104      	bne.n	800838e <HAL_TIM_IC_Start_IT+0xc2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800838c:	e003      	b.n	8008396 <HAL_TIM_IC_Start_IT+0xca>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2202      	movs	r2, #2
 8008392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_IC_Start_IT+0xda>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083a4:	e013      	b.n	80083ce <HAL_TIM_IC_Start_IT+0x102>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_IC_Start_IT+0xea>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083b4:	e00b      	b.n	80083ce <HAL_TIM_IC_Start_IT+0x102>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_IC_Start_IT+0xfa>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083c4:	e003      	b.n	80083ce <HAL_TIM_IC_Start_IT+0x102>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2202      	movs	r2, #2
 80083ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d841      	bhi.n	8008458 <HAL_TIM_IC_Start_IT+0x18c>
 80083d4:	a201      	add	r2, pc, #4	@ (adr r2, 80083dc <HAL_TIM_IC_Start_IT+0x110>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	08008411 	.word	0x08008411
 80083e0:	08008459 	.word	0x08008459
 80083e4:	08008459 	.word	0x08008459
 80083e8:	08008459 	.word	0x08008459
 80083ec:	08008423 	.word	0x08008423
 80083f0:	08008459 	.word	0x08008459
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008459 	.word	0x08008459
 80083fc:	08008435 	.word	0x08008435
 8008400:	08008459 	.word	0x08008459
 8008404:	08008459 	.word	0x08008459
 8008408:	08008459 	.word	0x08008459
 800840c:	08008447 	.word	0x08008447
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0202 	orr.w	r2, r2, #2
 800841e:	60da      	str	r2, [r3, #12]
      break;
 8008420:	e01d      	b.n	800845e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0204 	orr.w	r2, r2, #4
 8008430:	60da      	str	r2, [r3, #12]
      break;
 8008432:	e014      	b.n	800845e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0208 	orr.w	r2, r2, #8
 8008442:	60da      	str	r2, [r3, #12]
      break;
 8008444:	e00b      	b.n	800845e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f042 0210 	orr.w	r2, r2, #16
 8008454:	60da      	str	r2, [r3, #12]
      break;
 8008456:	e002      	b.n	800845e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
      break;
 800845c:	bf00      	nop
  }

  if (status == HAL_OK)
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d13e      	bne.n	80084e2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2201      	movs	r2, #1
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 ff99 	bl	80093a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a1d      	ldr	r2, [pc, #116]	@ (80084ec <HAL_TIM_IC_Start_IT+0x220>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_TIM_IC_Start_IT+0x1e2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008484:	d013      	beq.n	80084ae <HAL_TIM_IC_Start_IT+0x1e2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a19      	ldr	r2, [pc, #100]	@ (80084f0 <HAL_TIM_IC_Start_IT+0x224>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_TIM_IC_Start_IT+0x1e2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a17      	ldr	r2, [pc, #92]	@ (80084f4 <HAL_TIM_IC_Start_IT+0x228>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_TIM_IC_Start_IT+0x1e2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a16      	ldr	r2, [pc, #88]	@ (80084f8 <HAL_TIM_IC_Start_IT+0x22c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_TIM_IC_Start_IT+0x1e2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a14      	ldr	r2, [pc, #80]	@ (80084fc <HAL_TIM_IC_Start_IT+0x230>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d111      	bne.n	80084d2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b06      	cmp	r3, #6
 80084be:	d010      	beq.n	80084e2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0201 	orr.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d0:	e007      	b.n	80084e2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f042 0201 	orr.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	40010000 	.word	0x40010000
 80084f0:	40000400 	.word	0x40000400
 80084f4:	40000800 	.word	0x40000800
 80084f8:	40000c00 	.word	0x40000c00
 80084fc:	40014000 	.word	0x40014000

08008500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d020      	beq.n	8008564 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01b      	beq.n	8008564 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f06f 0202 	mvn.w	r2, #2
 8008534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7fd f8e8 	bl	8005720 <HAL_TIM_IC_CaptureCallback>
 8008550:	e005      	b.n	800855e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fb38 	bl	8008bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb3f 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 0304 	and.w	r3, r3, #4
 800856a:	2b00      	cmp	r3, #0
 800856c:	d020      	beq.n	80085b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01b      	beq.n	80085b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0204 	mvn.w	r2, #4
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fd f8c2 	bl	8005720 <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fb12 	bl	8008bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fb19 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d020      	beq.n	80085fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01b      	beq.n	80085fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f06f 0208 	mvn.w	r2, #8
 80085cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2204      	movs	r2, #4
 80085d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fd f89c 	bl	8005720 <HAL_TIM_IC_CaptureCallback>
 80085e8:	e005      	b.n	80085f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 faec 	bl	8008bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 faf3 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b00      	cmp	r3, #0
 8008604:	d020      	beq.n	8008648 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f003 0310 	and.w	r3, r3, #16
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01b      	beq.n	8008648 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0210 	mvn.w	r2, #16
 8008618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2208      	movs	r2, #8
 800861e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7fd f876 	bl	8005720 <HAL_TIM_IC_CaptureCallback>
 8008634:	e005      	b.n	8008642 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fac6 	bl	8008bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 facd 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00c      	beq.n	800866c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0201 	mvn.w	r2, #1
 8008664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 faa4 	bl	8008bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 ff28 	bl	80094e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00c      	beq.n	80086b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa9e 	bl	8008bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0220 	mvn.w	r2, #32
 80086d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fefa 	bl	80094cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086d8:	bf00      	nop
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e088      	b.n	8008810 <HAL_TIM_IC_ConfigChannel+0x130>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d11b      	bne.n	8008744 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800871c:	f000 fc8a 	bl	8009034 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699a      	ldr	r2, [r3, #24]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 020c 	bic.w	r2, r2, #12
 800872e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6999      	ldr	r1, [r3, #24]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	619a      	str	r2, [r3, #24]
 8008742:	e060      	b.n	8008806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b04      	cmp	r3, #4
 8008748:	d11c      	bne.n	8008784 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800875a:	f000 fd02 	bl	8009162 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800876c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6999      	ldr	r1, [r3, #24]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	021a      	lsls	r2, r3, #8
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	619a      	str	r2, [r3, #24]
 8008782:	e040      	b.n	8008806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b08      	cmp	r3, #8
 8008788:	d11b      	bne.n	80087c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800879a:	f000 fd4f 	bl	800923c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69da      	ldr	r2, [r3, #28]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 020c 	bic.w	r2, r2, #12
 80087ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69d9      	ldr	r1, [r3, #28]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	61da      	str	r2, [r3, #28]
 80087c0:	e021      	b.n	8008806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b0c      	cmp	r3, #12
 80087c6:	d11c      	bne.n	8008802 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80087d8:	f000 fd6c 	bl	80092b4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69da      	ldr	r2, [r3, #28]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80087ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69d9      	ldr	r1, [r3, #28]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	021a      	lsls	r2, r3, #8
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	61da      	str	r2, [r3, #28]
 8008800:	e001      	b.n	8008806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008832:	2302      	movs	r3, #2
 8008834:	e0ae      	b.n	8008994 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b0c      	cmp	r3, #12
 8008842:	f200 809f 	bhi.w	8008984 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008846:	a201      	add	r2, pc, #4	@ (adr r2, 800884c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884c:	08008881 	.word	0x08008881
 8008850:	08008985 	.word	0x08008985
 8008854:	08008985 	.word	0x08008985
 8008858:	08008985 	.word	0x08008985
 800885c:	080088c1 	.word	0x080088c1
 8008860:	08008985 	.word	0x08008985
 8008864:	08008985 	.word	0x08008985
 8008868:	08008985 	.word	0x08008985
 800886c:	08008903 	.word	0x08008903
 8008870:	08008985 	.word	0x08008985
 8008874:	08008985 	.word	0x08008985
 8008878:	08008985 	.word	0x08008985
 800887c:	08008943 	.word	0x08008943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fa48 	bl	8008d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0208 	orr.w	r2, r2, #8
 800889a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0204 	bic.w	r2, r2, #4
 80088aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6999      	ldr	r1, [r3, #24]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	619a      	str	r2, [r3, #24]
      break;
 80088be:	e064      	b.n	800898a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fa8e 	bl	8008de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6999      	ldr	r1, [r3, #24]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	021a      	lsls	r2, r3, #8
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	619a      	str	r2, [r3, #24]
      break;
 8008900:	e043      	b.n	800898a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fad9 	bl	8008ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69da      	ldr	r2, [r3, #28]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0208 	orr.w	r2, r2, #8
 800891c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0204 	bic.w	r2, r2, #4
 800892c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69d9      	ldr	r1, [r3, #28]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	61da      	str	r2, [r3, #28]
      break;
 8008940:	e023      	b.n	800898a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fb23 	bl	8008f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800895c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800896c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69d9      	ldr	r1, [r3, #28]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	021a      	lsls	r2, r3, #8
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	61da      	str	r2, [r3, #28]
      break;
 8008982:	e002      	b.n	800898a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	75fb      	strb	r3, [r7, #23]
      break;
 8008988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_TIM_ConfigClockSource+0x1c>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e0b4      	b.n	8008b22 <HAL_TIM_ConfigClockSource+0x186>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f0:	d03e      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0xd4>
 80089f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f6:	f200 8087 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 80089fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fe:	f000 8086 	beq.w	8008b0e <HAL_TIM_ConfigClockSource+0x172>
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a06:	d87f      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 8008a08:	2b70      	cmp	r3, #112	@ 0x70
 8008a0a:	d01a      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0xa6>
 8008a0c:	2b70      	cmp	r3, #112	@ 0x70
 8008a0e:	d87b      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 8008a10:	2b60      	cmp	r3, #96	@ 0x60
 8008a12:	d050      	beq.n	8008ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8008a14:	2b60      	cmp	r3, #96	@ 0x60
 8008a16:	d877      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 8008a18:	2b50      	cmp	r3, #80	@ 0x50
 8008a1a:	d03c      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0xfa>
 8008a1c:	2b50      	cmp	r3, #80	@ 0x50
 8008a1e:	d873      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 8008a20:	2b40      	cmp	r3, #64	@ 0x40
 8008a22:	d058      	beq.n	8008ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8008a24:	2b40      	cmp	r3, #64	@ 0x40
 8008a26:	d86f      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 8008a28:	2b30      	cmp	r3, #48	@ 0x30
 8008a2a:	d064      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x15a>
 8008a2c:	2b30      	cmp	r3, #48	@ 0x30
 8008a2e:	d86b      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d060      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x15a>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	d867      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d05c      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x15a>
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d05a      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x15a>
 8008a40:	e062      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a52:	f000 fc87 	bl	8009364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	609a      	str	r2, [r3, #8]
      break;
 8008a6e:	e04f      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a80:	f000 fc70 	bl	8009364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a92:	609a      	str	r2, [r3, #8]
      break;
 8008a94:	e03c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f000 fb2e 	bl	8009104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2150      	movs	r1, #80	@ 0x50
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 fc3d 	bl	800932e <TIM_ITRx_SetConfig>
      break;
 8008ab4:	e02c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f000 fb8a 	bl	80091dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2160      	movs	r1, #96	@ 0x60
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fc2d 	bl	800932e <TIM_ITRx_SetConfig>
      break;
 8008ad4:	e01c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f000 fb0e 	bl	8009104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2140      	movs	r1, #64	@ 0x40
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fc1d 	bl	800932e <TIM_ITRx_SetConfig>
      break;
 8008af4:	e00c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4619      	mov	r1, r3
 8008b00:	4610      	mov	r0, r2
 8008b02:	f000 fc14 	bl	800932e <TIM_ITRx_SetConfig>
      break;
 8008b06:	e003      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0c:	e000      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b0c      	cmp	r3, #12
 8008b3e:	d831      	bhi.n	8008ba4 <HAL_TIM_ReadCapturedValue+0x78>
 8008b40:	a201      	add	r2, pc, #4	@ (adr r2, 8008b48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b7d 	.word	0x08008b7d
 8008b4c:	08008ba5 	.word	0x08008ba5
 8008b50:	08008ba5 	.word	0x08008ba5
 8008b54:	08008ba5 	.word	0x08008ba5
 8008b58:	08008b87 	.word	0x08008b87
 8008b5c:	08008ba5 	.word	0x08008ba5
 8008b60:	08008ba5 	.word	0x08008ba5
 8008b64:	08008ba5 	.word	0x08008ba5
 8008b68:	08008b91 	.word	0x08008b91
 8008b6c:	08008ba5 	.word	0x08008ba5
 8008b70:	08008ba5 	.word	0x08008ba5
 8008b74:	08008ba5 	.word	0x08008ba5
 8008b78:	08008b9b 	.word	0x08008b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b82:	60fb      	str	r3, [r7, #12]

      break;
 8008b84:	e00f      	b.n	8008ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	60fb      	str	r3, [r7, #12]

      break;
 8008b8e:	e00a      	b.n	8008ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b96:	60fb      	str	r3, [r7, #12]

      break;
 8008b98:	e005      	b.n	8008ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba0:	60fb      	str	r3, [r7, #12]

      break;
 8008ba2:	e000      	b.n	8008ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008ba4:	bf00      	nop
  }

  return tmpreg;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a3a      	ldr	r2, [pc, #232]	@ (8008d00 <TIM_Base_SetConfig+0xfc>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00f      	beq.n	8008c3c <TIM_Base_SetConfig+0x38>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c22:	d00b      	beq.n	8008c3c <TIM_Base_SetConfig+0x38>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a37      	ldr	r2, [pc, #220]	@ (8008d04 <TIM_Base_SetConfig+0x100>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d007      	beq.n	8008c3c <TIM_Base_SetConfig+0x38>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a36      	ldr	r2, [pc, #216]	@ (8008d08 <TIM_Base_SetConfig+0x104>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_Base_SetConfig+0x38>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a35      	ldr	r2, [pc, #212]	@ (8008d0c <TIM_Base_SetConfig+0x108>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d108      	bne.n	8008c4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a2b      	ldr	r2, [pc, #172]	@ (8008d00 <TIM_Base_SetConfig+0xfc>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01b      	beq.n	8008c8e <TIM_Base_SetConfig+0x8a>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5c:	d017      	beq.n	8008c8e <TIM_Base_SetConfig+0x8a>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a28      	ldr	r2, [pc, #160]	@ (8008d04 <TIM_Base_SetConfig+0x100>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d013      	beq.n	8008c8e <TIM_Base_SetConfig+0x8a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a27      	ldr	r2, [pc, #156]	@ (8008d08 <TIM_Base_SetConfig+0x104>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00f      	beq.n	8008c8e <TIM_Base_SetConfig+0x8a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a26      	ldr	r2, [pc, #152]	@ (8008d0c <TIM_Base_SetConfig+0x108>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00b      	beq.n	8008c8e <TIM_Base_SetConfig+0x8a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a25      	ldr	r2, [pc, #148]	@ (8008d10 <TIM_Base_SetConfig+0x10c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d007      	beq.n	8008c8e <TIM_Base_SetConfig+0x8a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a24      	ldr	r2, [pc, #144]	@ (8008d14 <TIM_Base_SetConfig+0x110>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d003      	beq.n	8008c8e <TIM_Base_SetConfig+0x8a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a23      	ldr	r2, [pc, #140]	@ (8008d18 <TIM_Base_SetConfig+0x114>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d108      	bne.n	8008ca0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8008d00 <TIM_Base_SetConfig+0xfc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d103      	bne.n	8008cd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d105      	bne.n	8008cf2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f023 0201 	bic.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	611a      	str	r2, [r3, #16]
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	40010000 	.word	0x40010000
 8008d04:	40000400 	.word	0x40000400
 8008d08:	40000800 	.word	0x40000800
 8008d0c:	40000c00 	.word	0x40000c00
 8008d10:	40014000 	.word	0x40014000
 8008d14:	40014400 	.word	0x40014400
 8008d18:	40014800 	.word	0x40014800

08008d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	f023 0201 	bic.w	r2, r3, #1
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0303 	bic.w	r3, r3, #3
 8008d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f023 0302 	bic.w	r3, r3, #2
 8008d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a1c      	ldr	r2, [pc, #112]	@ (8008de4 <TIM_OC1_SetConfig+0xc8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d10c      	bne.n	8008d92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f023 0308 	bic.w	r3, r3, #8
 8008d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f023 0304 	bic.w	r3, r3, #4
 8008d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a13      	ldr	r2, [pc, #76]	@ (8008de4 <TIM_OC1_SetConfig+0xc8>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d111      	bne.n	8008dbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	621a      	str	r2, [r3, #32]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40010000 	.word	0x40010000

08008de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	f023 0210 	bic.w	r2, r3, #16
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f023 0320 	bic.w	r3, r3, #32
 8008e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a1e      	ldr	r2, [pc, #120]	@ (8008ebc <TIM_OC2_SetConfig+0xd4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d10d      	bne.n	8008e64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a15      	ldr	r2, [pc, #84]	@ (8008ebc <TIM_OC2_SetConfig+0xd4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d113      	bne.n	8008e94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	621a      	str	r2, [r3, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40010000 	.word	0x40010000

08008ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a1d      	ldr	r2, [pc, #116]	@ (8008f90 <TIM_OC3_SetConfig+0xd0>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d10d      	bne.n	8008f3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a14      	ldr	r2, [pc, #80]	@ (8008f90 <TIM_OC3_SetConfig+0xd0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d113      	bne.n	8008f6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	621a      	str	r2, [r3, #32]
}
 8008f84:	bf00      	nop
 8008f86:	371c      	adds	r7, #28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	40010000 	.word	0x40010000

08008f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	031b      	lsls	r3, r3, #12
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a10      	ldr	r2, [pc, #64]	@ (8009030 <TIM_OC4_SetConfig+0x9c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d109      	bne.n	8009008 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	019b      	lsls	r3, r3, #6
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	4313      	orrs	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	621a      	str	r2, [r3, #32]
}
 8009022:	bf00      	nop
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	40010000 	.word	0x40010000

08009034 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	f023 0201 	bic.w	r2, r3, #1
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4a24      	ldr	r2, [pc, #144]	@ (80090f0 <TIM_TI1_SetConfig+0xbc>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d013      	beq.n	800908a <TIM_TI1_SetConfig+0x56>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009068:	d00f      	beq.n	800908a <TIM_TI1_SetConfig+0x56>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4a21      	ldr	r2, [pc, #132]	@ (80090f4 <TIM_TI1_SetConfig+0xc0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d00b      	beq.n	800908a <TIM_TI1_SetConfig+0x56>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4a20      	ldr	r2, [pc, #128]	@ (80090f8 <TIM_TI1_SetConfig+0xc4>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d007      	beq.n	800908a <TIM_TI1_SetConfig+0x56>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4a1f      	ldr	r2, [pc, #124]	@ (80090fc <TIM_TI1_SetConfig+0xc8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d003      	beq.n	800908a <TIM_TI1_SetConfig+0x56>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	4a1e      	ldr	r2, [pc, #120]	@ (8009100 <TIM_TI1_SetConfig+0xcc>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d101      	bne.n	800908e <TIM_TI1_SetConfig+0x5a>
 800908a:	2301      	movs	r3, #1
 800908c:	e000      	b.n	8009090 <TIM_TI1_SetConfig+0x5c>
 800908e:	2300      	movs	r3, #0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f023 0303 	bic.w	r3, r3, #3
 800909a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	e003      	b.n	80090ae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f023 030a 	bic.w	r3, r3, #10
 80090c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f003 030a 	and.w	r3, r3, #10
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	621a      	str	r2, [r3, #32]
}
 80090e2:	bf00      	nop
 80090e4:	371c      	adds	r7, #28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	40010000 	.word	0x40010000
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	40014000 	.word	0x40014000

08009104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	f023 0201 	bic.w	r2, r3, #1
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800912e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4313      	orrs	r3, r2
 8009138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f023 030a 	bic.w	r3, r3, #10
 8009140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4313      	orrs	r3, r2
 8009148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	621a      	str	r2, [r3, #32]
}
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009162:	b480      	push	{r7}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
 800916e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	f023 0210 	bic.w	r2, r3, #16
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800918e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	021b      	lsls	r3, r3, #8
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	4313      	orrs	r3, r2
 8009198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	031b      	lsls	r3, r3, #12
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091b4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	621a      	str	r2, [r3, #32]
}
 80091d0:	bf00      	nop
 80091d2:	371c      	adds	r7, #28
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f023 0210 	bic.w	r2, r3, #16
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	031b      	lsls	r3, r3, #12
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009218:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	621a      	str	r2, [r3, #32]
}
 8009230:	bf00      	nop
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f023 0303 	bic.w	r3, r3, #3
 8009268:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4313      	orrs	r3, r2
 8009270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009278:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	b2db      	uxtb	r3, r3
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4313      	orrs	r3, r2
 8009284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800928c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	4313      	orrs	r3, r2
 800929a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	621a      	str	r2, [r3, #32]
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a1b      	ldr	r3, [r3, #32]
 80092cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	031b      	lsls	r3, r3, #12
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009306:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	031b      	lsls	r3, r3, #12
 800930c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	4313      	orrs	r3, r2
 8009314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	621a      	str	r2, [r3, #32]
}
 8009322:	bf00      	nop
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	f043 0307 	orr.w	r3, r3, #7
 8009350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	609a      	str	r2, [r3, #8]
}
 8009358:	bf00      	nop
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800937e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	021a      	lsls	r2, r3, #8
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	431a      	orrs	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	4313      	orrs	r3, r2
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	609a      	str	r2, [r3, #8]
}
 8009398:	bf00      	nop
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f003 031f 	and.w	r3, r3, #31
 80093b6:	2201      	movs	r2, #1
 80093b8:	fa02 f303 	lsl.w	r3, r2, r3
 80093bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a1a      	ldr	r2, [r3, #32]
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	43db      	mvns	r3, r3
 80093c6:	401a      	ands	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6a1a      	ldr	r2, [r3, #32]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f003 031f 	and.w	r3, r3, #31
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	fa01 f303 	lsl.w	r3, r1, r3
 80093dc:	431a      	orrs	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	621a      	str	r2, [r3, #32]
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009404:	2302      	movs	r3, #2
 8009406:	e050      	b.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800942e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a1c      	ldr	r2, [pc, #112]	@ (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d018      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009454:	d013      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a18      	ldr	r2, [pc, #96]	@ (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00e      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a16      	ldr	r2, [pc, #88]	@ (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d009      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a15      	ldr	r2, [pc, #84]	@ (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d004      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a13      	ldr	r2, [pc, #76]	@ (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d10c      	bne.n	8009498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4313      	orrs	r3, r2
 800948e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	40010000 	.word	0x40010000
 80094bc:	40000400 	.word	0x40000400
 80094c0:	40000800 	.word	0x40000800
 80094c4:	40000c00 	.word	0x40000c00
 80094c8:	40014000 	.word	0x40014000

080094cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e042      	b.n	800958c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fc fbcc 	bl	8005cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2224      	movs	r2, #36	@ 0x24
 8009524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fcd1 	bl	8009ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800954c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	695a      	ldr	r2, [r3, #20]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800955c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800956c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	4613      	mov	r3, r2
 80095a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d112      	bne.n	80095d4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <HAL_UART_Receive_IT+0x26>
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e00b      	b.n	80095d6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	461a      	mov	r2, r3
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fab0 	bl	8009b30 <UART_Start_Receive_IT>
 80095d0:	4603      	mov	r3, r0
 80095d2:	e000      	b.n	80095d6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80095d4:	2302      	movs	r3, #2
  }
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
	...

080095e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b0ba      	sub	sp, #232	@ 0xe8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009606:	2300      	movs	r3, #0
 8009608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800960c:	2300      	movs	r3, #0
 800960e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009616:	f003 030f 	and.w	r3, r3, #15
 800961a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800961e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10f      	bne.n	8009646 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <HAL_UART_IRQHandler+0x66>
 8009632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fb8f 	bl	8009d62 <UART_Receive_IT>
      return;
 8009644:	e25b      	b.n	8009afe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80de 	beq.w	800980c <HAL_UART_IRQHandler+0x22c>
 8009650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	d106      	bne.n	800966a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800965c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009660:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 80d1 	beq.w	800980c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800966a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <HAL_UART_IRQHandler+0xae>
 8009676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800967a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800967e:	2b00      	cmp	r3, #0
 8009680:	d005      	beq.n	800968e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009686:	f043 0201 	orr.w	r2, r3, #1
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800968e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009692:	f003 0304 	and.w	r3, r3, #4
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00b      	beq.n	80096b2 <HAL_UART_IRQHandler+0xd2>
 800969a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	f043 0202 	orr.w	r2, r3, #2
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <HAL_UART_IRQHandler+0xf6>
 80096be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ce:	f043 0204 	orr.w	r2, r3, #4
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80096d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096da:	f003 0308 	and.w	r3, r3, #8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d011      	beq.n	8009706 <HAL_UART_IRQHandler+0x126>
 80096e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096fe:	f043 0208 	orr.w	r2, r3, #8
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 81f2 	beq.w	8009af4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d008      	beq.n	800972e <HAL_UART_IRQHandler+0x14e>
 800971c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009720:	f003 0320 	and.w	r3, r3, #32
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fb1a 	bl	8009d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009738:	2b40      	cmp	r3, #64	@ 0x40
 800973a:	bf0c      	ite	eq
 800973c:	2301      	moveq	r3, #1
 800973e:	2300      	movne	r3, #0
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d103      	bne.n	800975a <HAL_UART_IRQHandler+0x17a>
 8009752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009756:	2b00      	cmp	r3, #0
 8009758:	d04f      	beq.n	80097fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa22 	bl	8009ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800976a:	2b40      	cmp	r3, #64	@ 0x40
 800976c:	d141      	bne.n	80097f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3314      	adds	r3, #20
 8009774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800978c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3314      	adds	r3, #20
 8009796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800979a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800979e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80097a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80097b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1d9      	bne.n	800976e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d013      	beq.n	80097ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097c6:	4a7e      	ldr	r2, [pc, #504]	@ (80099c0 <HAL_UART_IRQHandler+0x3e0>)
 80097c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fc fd8d 	bl	80062ee <HAL_DMA_Abort_IT>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d016      	beq.n	8009808 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e8:	e00e      	b.n	8009808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f98a 	bl	8009b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f0:	e00a      	b.n	8009808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f986 	bl	8009b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f8:	e006      	b.n	8009808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f982 	bl	8009b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009806:	e175      	b.n	8009af4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009808:	bf00      	nop
    return;
 800980a:	e173      	b.n	8009af4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009810:	2b01      	cmp	r3, #1
 8009812:	f040 814f 	bne.w	8009ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981a:	f003 0310 	and.w	r3, r3, #16
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 8148 	beq.w	8009ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009828:	f003 0310 	and.w	r3, r3, #16
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8141 	beq.w	8009ab4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	60bb      	str	r3, [r7, #8]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	60bb      	str	r3, [r7, #8]
 8009846:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009852:	2b40      	cmp	r3, #64	@ 0x40
 8009854:	f040 80b6 	bne.w	80099c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 8145 	beq.w	8009af8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009876:	429a      	cmp	r2, r3
 8009878:	f080 813e 	bcs.w	8009af8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009882:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800988e:	f000 8088 	beq.w	80099a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	330c      	adds	r3, #12
 8009898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	330c      	adds	r3, #12
 80098ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80098be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80098c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1d9      	bne.n	8009892 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3314      	adds	r3, #20
 80098e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3314      	adds	r3, #20
 80098fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009902:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800990a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e1      	bne.n	80098de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3314      	adds	r3, #20
 8009920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800992a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800992c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3314      	adds	r3, #20
 800993a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800993e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800994c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e3      	bne.n	800991a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	330c      	adds	r3, #12
 8009966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009972:	f023 0310 	bic.w	r3, r3, #16
 8009976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	330c      	adds	r3, #12
 8009980:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009984:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009986:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800998a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e3      	bne.n	8009960 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800999c:	4618      	mov	r0, r3
 800999e:	f7fc fc36 	bl	800620e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f8ad 	bl	8009b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099be:	e09b      	b.n	8009af8 <HAL_UART_IRQHandler+0x518>
 80099c0:	08009c6b 	.word	0x08009c6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099d8:	b29b      	uxth	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 808e 	beq.w	8009afc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80099e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 8089 	beq.w	8009afc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	330c      	adds	r3, #12
 80099f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	330c      	adds	r3, #12
 8009a0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009a0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a16:	e841 2300 	strex	r3, r2, [r1]
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1e3      	bne.n	80099ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3314      	adds	r3, #20
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	623b      	str	r3, [r7, #32]
   return(result);
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f023 0301 	bic.w	r3, r3, #1
 8009a38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3314      	adds	r3, #20
 8009a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a46:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e3      	bne.n	8009a22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	330c      	adds	r3, #12
 8009a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 0310 	bic.w	r3, r3, #16
 8009a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	330c      	adds	r3, #12
 8009a88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009a8c:	61fa      	str	r2, [r7, #28]
 8009a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	69b9      	ldr	r1, [r7, #24]
 8009a92:	69fa      	ldr	r2, [r7, #28]
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	617b      	str	r3, [r7, #20]
   return(result);
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e3      	bne.n	8009a68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f833 	bl	8009b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ab2:	e023      	b.n	8009afc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x4f4>
 8009ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f8e0 	bl	8009c92 <UART_Transmit_IT>
    return;
 8009ad2:	e014      	b.n	8009afe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00e      	beq.n	8009afe <HAL_UART_IRQHandler+0x51e>
 8009ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f920 	bl	8009d32 <UART_EndTransmit_IT>
    return;
 8009af2:	e004      	b.n	8009afe <HAL_UART_IRQHandler+0x51e>
    return;
 8009af4:	bf00      	nop
 8009af6:	e002      	b.n	8009afe <HAL_UART_IRQHandler+0x51e>
      return;
 8009af8:	bf00      	nop
 8009afa:	e000      	b.n	8009afe <HAL_UART_IRQHandler+0x51e>
      return;
 8009afc:	bf00      	nop
  }
}
 8009afe:	37e8      	adds	r7, #232	@ 0xe8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	88fa      	ldrh	r2, [r7, #6]
 8009b48:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	88fa      	ldrh	r2, [r7, #6]
 8009b4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2222      	movs	r2, #34	@ 0x22
 8009b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d007      	beq.n	8009b76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695a      	ldr	r2, [r3, #20]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 0201 	orr.w	r2, r2, #1
 8009b84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 0220 	orr.w	r2, r2, #32
 8009b94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b095      	sub	sp, #84	@ 0x54
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	330c      	adds	r3, #12
 8009bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb6:	e853 3f00 	ldrex	r3, [r3]
 8009bba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bcc:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e5      	bne.n	8009bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3314      	adds	r3, #20
 8009be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f023 0301 	bic.w	r3, r3, #1
 8009bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3314      	adds	r3, #20
 8009bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e5      	bne.n	8009be0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d119      	bne.n	8009c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	330c      	adds	r3, #12
 8009c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	e853 3f00 	ldrex	r3, [r3]
 8009c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f023 0310 	bic.w	r3, r3, #16
 8009c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c3c:	61ba      	str	r2, [r7, #24]
 8009c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c40:	6979      	ldr	r1, [r7, #20]
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	e841 2300 	strex	r3, r2, [r1]
 8009c48:	613b      	str	r3, [r7, #16]
   return(result);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1e5      	bne.n	8009c1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009c5e:	bf00      	nop
 8009c60:	3754      	adds	r7, #84	@ 0x54
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff ff3d 	bl	8009b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b21      	cmp	r3, #33	@ 0x21
 8009ca4:	d13e      	bne.n	8009d24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cae:	d114      	bne.n	8009cda <UART_Transmit_IT+0x48>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d110      	bne.n	8009cda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ccc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	1c9a      	adds	r2, r3, #2
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	621a      	str	r2, [r3, #32]
 8009cd8:	e008      	b.n	8009cec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	1c59      	adds	r1, r3, #1
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6211      	str	r1, [r2, #32]
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10f      	bne.n	8009d20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	e000      	b.n	8009d26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d24:	2302      	movs	r3, #2
  }
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7fc f87e 	bl	8005e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b08c      	sub	sp, #48	@ 0x30
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b22      	cmp	r3, #34	@ 0x22
 8009d74:	f040 80ae 	bne.w	8009ed4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d80:	d117      	bne.n	8009db2 <UART_Receive_IT+0x50>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d113      	bne.n	8009db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009daa:	1c9a      	adds	r2, r3, #2
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	629a      	str	r2, [r3, #40]	@ 0x28
 8009db0:	e026      	b.n	8009e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009db8:	2300      	movs	r3, #0
 8009dba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dc4:	d007      	beq.n	8009dd6 <UART_Receive_IT+0x74>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <UART_Receive_IT+0x82>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e008      	b.n	8009df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d15d      	bne.n	8009ed0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0220 	bic.w	r2, r2, #32
 8009e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695a      	ldr	r2, [r3, #20]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f022 0201 	bic.w	r2, r2, #1
 8009e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d135      	bne.n	8009ec6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	330c      	adds	r3, #12
 8009e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	e853 3f00 	ldrex	r3, [r3]
 8009e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f023 0310 	bic.w	r3, r3, #16
 8009e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	330c      	adds	r3, #12
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e80:	623a      	str	r2, [r7, #32]
 8009e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	69f9      	ldr	r1, [r7, #28]
 8009e86:	6a3a      	ldr	r2, [r7, #32]
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e5      	bne.n	8009e60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b10      	cmp	r3, #16
 8009ea0:	d10a      	bne.n	8009eb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff fe2a 	bl	8009b18 <HAL_UARTEx_RxEventCallback>
 8009ec4:	e002      	b.n	8009ecc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7fb ff9c 	bl	8005e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e002      	b.n	8009ed6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e000      	b.n	8009ed6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009ed4:	2302      	movs	r3, #2
  }
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3730      	adds	r7, #48	@ 0x30
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
	...

08009ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ee4:	b0c0      	sub	sp, #256	@ 0x100
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009efc:	68d9      	ldr	r1, [r3, #12]
 8009efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	ea40 0301 	orr.w	r3, r0, r1
 8009f08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	431a      	orrs	r2, r3
 8009f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009f38:	f021 010c 	bic.w	r1, r1, #12
 8009f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f46:	430b      	orrs	r3, r1
 8009f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f5a:	6999      	ldr	r1, [r3, #24]
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	ea40 0301 	orr.w	r3, r0, r1
 8009f66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4b8f      	ldr	r3, [pc, #572]	@ (800a1ac <UART_SetConfig+0x2cc>)
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d005      	beq.n	8009f80 <UART_SetConfig+0xa0>
 8009f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	4b8d      	ldr	r3, [pc, #564]	@ (800a1b0 <UART_SetConfig+0x2d0>)
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d104      	bne.n	8009f8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f80:	f7fd ffde 	bl	8007f40 <HAL_RCC_GetPCLK2Freq>
 8009f84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009f88:	e003      	b.n	8009f92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f8a:	f7fd ffc5 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 8009f8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f9c:	f040 810c 	bne.w	800a1b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009faa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009fae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	1891      	adds	r1, r2, r2
 8009fb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009fba:	415b      	adcs	r3, r3
 8009fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	eb12 0801 	adds.w	r8, r2, r1
 8009fc8:	4629      	mov	r1, r5
 8009fca:	eb43 0901 	adc.w	r9, r3, r1
 8009fce:	f04f 0200 	mov.w	r2, #0
 8009fd2:	f04f 0300 	mov.w	r3, #0
 8009fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009fe2:	4690      	mov	r8, r2
 8009fe4:	4699      	mov	r9, r3
 8009fe6:	4623      	mov	r3, r4
 8009fe8:	eb18 0303 	adds.w	r3, r8, r3
 8009fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	eb49 0303 	adc.w	r3, r9, r3
 8009ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a006:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a00a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a00e:	460b      	mov	r3, r1
 800a010:	18db      	adds	r3, r3, r3
 800a012:	653b      	str	r3, [r7, #80]	@ 0x50
 800a014:	4613      	mov	r3, r2
 800a016:	eb42 0303 	adc.w	r3, r2, r3
 800a01a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a01c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a020:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a024:	f7f6 fd46 	bl	8000ab4 <__aeabi_uldivmod>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4b61      	ldr	r3, [pc, #388]	@ (800a1b4 <UART_SetConfig+0x2d4>)
 800a02e:	fba3 2302 	umull	r2, r3, r3, r2
 800a032:	095b      	lsrs	r3, r3, #5
 800a034:	011c      	lsls	r4, r3, #4
 800a036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a040:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a044:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a048:	4642      	mov	r2, r8
 800a04a:	464b      	mov	r3, r9
 800a04c:	1891      	adds	r1, r2, r2
 800a04e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a050:	415b      	adcs	r3, r3
 800a052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a054:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a058:	4641      	mov	r1, r8
 800a05a:	eb12 0a01 	adds.w	sl, r2, r1
 800a05e:	4649      	mov	r1, r9
 800a060:	eb43 0b01 	adc.w	fp, r3, r1
 800a064:	f04f 0200 	mov.w	r2, #0
 800a068:	f04f 0300 	mov.w	r3, #0
 800a06c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a070:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a078:	4692      	mov	sl, r2
 800a07a:	469b      	mov	fp, r3
 800a07c:	4643      	mov	r3, r8
 800a07e:	eb1a 0303 	adds.w	r3, sl, r3
 800a082:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a086:	464b      	mov	r3, r9
 800a088:	eb4b 0303 	adc.w	r3, fp, r3
 800a08c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a09c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a0a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	18db      	adds	r3, r3, r3
 800a0a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	eb42 0303 	adc.w	r3, r2, r3
 800a0b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a0b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a0ba:	f7f6 fcfb 	bl	8000ab4 <__aeabi_uldivmod>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	4b3b      	ldr	r3, [pc, #236]	@ (800a1b4 <UART_SetConfig+0x2d4>)
 800a0c6:	fba3 2301 	umull	r2, r3, r3, r1
 800a0ca:	095b      	lsrs	r3, r3, #5
 800a0cc:	2264      	movs	r2, #100	@ 0x64
 800a0ce:	fb02 f303 	mul.w	r3, r2, r3
 800a0d2:	1acb      	subs	r3, r1, r3
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a0da:	4b36      	ldr	r3, [pc, #216]	@ (800a1b4 <UART_SetConfig+0x2d4>)
 800a0dc:	fba3 2302 	umull	r2, r3, r3, r2
 800a0e0:	095b      	lsrs	r3, r3, #5
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a0e8:	441c      	add	r4, r3
 800a0ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a0f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	1891      	adds	r1, r2, r2
 800a102:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a104:	415b      	adcs	r3, r3
 800a106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a10c:	4641      	mov	r1, r8
 800a10e:	1851      	adds	r1, r2, r1
 800a110:	6339      	str	r1, [r7, #48]	@ 0x30
 800a112:	4649      	mov	r1, r9
 800a114:	414b      	adcs	r3, r1
 800a116:	637b      	str	r3, [r7, #52]	@ 0x34
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	f04f 0300 	mov.w	r3, #0
 800a120:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a124:	4659      	mov	r1, fp
 800a126:	00cb      	lsls	r3, r1, #3
 800a128:	4651      	mov	r1, sl
 800a12a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a12e:	4651      	mov	r1, sl
 800a130:	00ca      	lsls	r2, r1, #3
 800a132:	4610      	mov	r0, r2
 800a134:	4619      	mov	r1, r3
 800a136:	4603      	mov	r3, r0
 800a138:	4642      	mov	r2, r8
 800a13a:	189b      	adds	r3, r3, r2
 800a13c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a140:	464b      	mov	r3, r9
 800a142:	460a      	mov	r2, r1
 800a144:	eb42 0303 	adc.w	r3, r2, r3
 800a148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a158:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a15c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a160:	460b      	mov	r3, r1
 800a162:	18db      	adds	r3, r3, r3
 800a164:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a166:	4613      	mov	r3, r2
 800a168:	eb42 0303 	adc.w	r3, r2, r3
 800a16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a16e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a172:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a176:	f7f6 fc9d 	bl	8000ab4 <__aeabi_uldivmod>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1b4 <UART_SetConfig+0x2d4>)
 800a180:	fba3 1302 	umull	r1, r3, r3, r2
 800a184:	095b      	lsrs	r3, r3, #5
 800a186:	2164      	movs	r1, #100	@ 0x64
 800a188:	fb01 f303 	mul.w	r3, r1, r3
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	00db      	lsls	r3, r3, #3
 800a190:	3332      	adds	r3, #50	@ 0x32
 800a192:	4a08      	ldr	r2, [pc, #32]	@ (800a1b4 <UART_SetConfig+0x2d4>)
 800a194:	fba2 2303 	umull	r2, r3, r2, r3
 800a198:	095b      	lsrs	r3, r3, #5
 800a19a:	f003 0207 	and.w	r2, r3, #7
 800a19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4422      	add	r2, r4
 800a1a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1a8:	e106      	b.n	800a3b8 <UART_SetConfig+0x4d8>
 800a1aa:	bf00      	nop
 800a1ac:	40011000 	.word	0x40011000
 800a1b0:	40011400 	.word	0x40011400
 800a1b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a1c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a1ca:	4642      	mov	r2, r8
 800a1cc:	464b      	mov	r3, r9
 800a1ce:	1891      	adds	r1, r2, r2
 800a1d0:	6239      	str	r1, [r7, #32]
 800a1d2:	415b      	adcs	r3, r3
 800a1d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a1da:	4641      	mov	r1, r8
 800a1dc:	1854      	adds	r4, r2, r1
 800a1de:	4649      	mov	r1, r9
 800a1e0:	eb43 0501 	adc.w	r5, r3, r1
 800a1e4:	f04f 0200 	mov.w	r2, #0
 800a1e8:	f04f 0300 	mov.w	r3, #0
 800a1ec:	00eb      	lsls	r3, r5, #3
 800a1ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1f2:	00e2      	lsls	r2, r4, #3
 800a1f4:	4614      	mov	r4, r2
 800a1f6:	461d      	mov	r5, r3
 800a1f8:	4643      	mov	r3, r8
 800a1fa:	18e3      	adds	r3, r4, r3
 800a1fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a200:	464b      	mov	r3, r9
 800a202:	eb45 0303 	adc.w	r3, r5, r3
 800a206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a216:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a21a:	f04f 0200 	mov.w	r2, #0
 800a21e:	f04f 0300 	mov.w	r3, #0
 800a222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a226:	4629      	mov	r1, r5
 800a228:	008b      	lsls	r3, r1, #2
 800a22a:	4621      	mov	r1, r4
 800a22c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a230:	4621      	mov	r1, r4
 800a232:	008a      	lsls	r2, r1, #2
 800a234:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a238:	f7f6 fc3c 	bl	8000ab4 <__aeabi_uldivmod>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4b60      	ldr	r3, [pc, #384]	@ (800a3c4 <UART_SetConfig+0x4e4>)
 800a242:	fba3 2302 	umull	r2, r3, r3, r2
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	011c      	lsls	r4, r3, #4
 800a24a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a254:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a258:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a25c:	4642      	mov	r2, r8
 800a25e:	464b      	mov	r3, r9
 800a260:	1891      	adds	r1, r2, r2
 800a262:	61b9      	str	r1, [r7, #24]
 800a264:	415b      	adcs	r3, r3
 800a266:	61fb      	str	r3, [r7, #28]
 800a268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a26c:	4641      	mov	r1, r8
 800a26e:	1851      	adds	r1, r2, r1
 800a270:	6139      	str	r1, [r7, #16]
 800a272:	4649      	mov	r1, r9
 800a274:	414b      	adcs	r3, r1
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	f04f 0200 	mov.w	r2, #0
 800a27c:	f04f 0300 	mov.w	r3, #0
 800a280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a284:	4659      	mov	r1, fp
 800a286:	00cb      	lsls	r3, r1, #3
 800a288:	4651      	mov	r1, sl
 800a28a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a28e:	4651      	mov	r1, sl
 800a290:	00ca      	lsls	r2, r1, #3
 800a292:	4610      	mov	r0, r2
 800a294:	4619      	mov	r1, r3
 800a296:	4603      	mov	r3, r0
 800a298:	4642      	mov	r2, r8
 800a29a:	189b      	adds	r3, r3, r2
 800a29c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2a0:	464b      	mov	r3, r9
 800a2a2:	460a      	mov	r2, r1
 800a2a4:	eb42 0303 	adc.w	r3, r2, r3
 800a2a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	f04f 0300 	mov.w	r3, #0
 800a2c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	008b      	lsls	r3, r1, #2
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2ce:	4641      	mov	r1, r8
 800a2d0:	008a      	lsls	r2, r1, #2
 800a2d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a2d6:	f7f6 fbed 	bl	8000ab4 <__aeabi_uldivmod>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4b38      	ldr	r3, [pc, #224]	@ (800a3c4 <UART_SetConfig+0x4e4>)
 800a2e2:	fba3 2301 	umull	r2, r3, r3, r1
 800a2e6:	095b      	lsrs	r3, r3, #5
 800a2e8:	2264      	movs	r2, #100	@ 0x64
 800a2ea:	fb02 f303 	mul.w	r3, r2, r3
 800a2ee:	1acb      	subs	r3, r1, r3
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	3332      	adds	r3, #50	@ 0x32
 800a2f4:	4a33      	ldr	r2, [pc, #204]	@ (800a3c4 <UART_SetConfig+0x4e4>)
 800a2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fa:	095b      	lsrs	r3, r3, #5
 800a2fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a300:	441c      	add	r4, r3
 800a302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a306:	2200      	movs	r2, #0
 800a308:	673b      	str	r3, [r7, #112]	@ 0x70
 800a30a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a30c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	1891      	adds	r1, r2, r2
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	415b      	adcs	r3, r3
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a320:	4641      	mov	r1, r8
 800a322:	1851      	adds	r1, r2, r1
 800a324:	6039      	str	r1, [r7, #0]
 800a326:	4649      	mov	r1, r9
 800a328:	414b      	adcs	r3, r1
 800a32a:	607b      	str	r3, [r7, #4]
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a338:	4659      	mov	r1, fp
 800a33a:	00cb      	lsls	r3, r1, #3
 800a33c:	4651      	mov	r1, sl
 800a33e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a342:	4651      	mov	r1, sl
 800a344:	00ca      	lsls	r2, r1, #3
 800a346:	4610      	mov	r0, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	4642      	mov	r2, r8
 800a34e:	189b      	adds	r3, r3, r2
 800a350:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a352:	464b      	mov	r3, r9
 800a354:	460a      	mov	r2, r1
 800a356:	eb42 0303 	adc.w	r3, r2, r3
 800a35a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	663b      	str	r3, [r7, #96]	@ 0x60
 800a366:	667a      	str	r2, [r7, #100]	@ 0x64
 800a368:	f04f 0200 	mov.w	r2, #0
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a374:	4649      	mov	r1, r9
 800a376:	008b      	lsls	r3, r1, #2
 800a378:	4641      	mov	r1, r8
 800a37a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a37e:	4641      	mov	r1, r8
 800a380:	008a      	lsls	r2, r1, #2
 800a382:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a386:	f7f6 fb95 	bl	8000ab4 <__aeabi_uldivmod>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c4 <UART_SetConfig+0x4e4>)
 800a390:	fba3 1302 	umull	r1, r3, r3, r2
 800a394:	095b      	lsrs	r3, r3, #5
 800a396:	2164      	movs	r1, #100	@ 0x64
 800a398:	fb01 f303 	mul.w	r3, r1, r3
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	3332      	adds	r3, #50	@ 0x32
 800a3a2:	4a08      	ldr	r2, [pc, #32]	@ (800a3c4 <UART_SetConfig+0x4e4>)
 800a3a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a8:	095b      	lsrs	r3, r3, #5
 800a3aa:	f003 020f 	and.w	r2, r3, #15
 800a3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4422      	add	r2, r4
 800a3b6:	609a      	str	r2, [r3, #8]
}
 800a3b8:	bf00      	nop
 800a3ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3c4:	51eb851f 	.word	0x51eb851f

0800a3c8 <memcmp>:
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	3901      	subs	r1, #1
 800a3cc:	4402      	add	r2, r0
 800a3ce:	4290      	cmp	r0, r2
 800a3d0:	d101      	bne.n	800a3d6 <memcmp+0xe>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	e005      	b.n	800a3e2 <memcmp+0x1a>
 800a3d6:	7803      	ldrb	r3, [r0, #0]
 800a3d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a3dc:	42a3      	cmp	r3, r4
 800a3de:	d001      	beq.n	800a3e4 <memcmp+0x1c>
 800a3e0:	1b18      	subs	r0, r3, r4
 800a3e2:	bd10      	pop	{r4, pc}
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	e7f2      	b.n	800a3ce <memcmp+0x6>

0800a3e8 <memset>:
 800a3e8:	4402      	add	r2, r0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d100      	bne.n	800a3f2 <memset+0xa>
 800a3f0:	4770      	bx	lr
 800a3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f6:	e7f9      	b.n	800a3ec <memset+0x4>

0800a3f8 <__errno>:
 800a3f8:	4b01      	ldr	r3, [pc, #4]	@ (800a400 <__errno+0x8>)
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000048 	.word	0x20000048

0800a404 <__libc_init_array>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	4d0d      	ldr	r5, [pc, #52]	@ (800a43c <__libc_init_array+0x38>)
 800a408:	4c0d      	ldr	r4, [pc, #52]	@ (800a440 <__libc_init_array+0x3c>)
 800a40a:	1b64      	subs	r4, r4, r5
 800a40c:	10a4      	asrs	r4, r4, #2
 800a40e:	2600      	movs	r6, #0
 800a410:	42a6      	cmp	r6, r4
 800a412:	d109      	bne.n	800a428 <__libc_init_array+0x24>
 800a414:	4d0b      	ldr	r5, [pc, #44]	@ (800a444 <__libc_init_array+0x40>)
 800a416:	4c0c      	ldr	r4, [pc, #48]	@ (800a448 <__libc_init_array+0x44>)
 800a418:	f000 fab2 	bl	800a980 <_init>
 800a41c:	1b64      	subs	r4, r4, r5
 800a41e:	10a4      	asrs	r4, r4, #2
 800a420:	2600      	movs	r6, #0
 800a422:	42a6      	cmp	r6, r4
 800a424:	d105      	bne.n	800a432 <__libc_init_array+0x2e>
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42c:	4798      	blx	r3
 800a42e:	3601      	adds	r6, #1
 800a430:	e7ee      	b.n	800a410 <__libc_init_array+0xc>
 800a432:	f855 3b04 	ldr.w	r3, [r5], #4
 800a436:	4798      	blx	r3
 800a438:	3601      	adds	r6, #1
 800a43a:	e7f2      	b.n	800a422 <__libc_init_array+0x1e>
 800a43c:	0800b68c 	.word	0x0800b68c
 800a440:	0800b68c 	.word	0x0800b68c
 800a444:	0800b68c 	.word	0x0800b68c
 800a448:	0800b690 	.word	0x0800b690

0800a44c <asinf>:
 800a44c:	b508      	push	{r3, lr}
 800a44e:	ed2d 8b02 	vpush	{d8}
 800a452:	eeb0 8a40 	vmov.f32	s16, s0
 800a456:	f000 f835 	bl	800a4c4 <__ieee754_asinf>
 800a45a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a462:	eef0 8a40 	vmov.f32	s17, s0
 800a466:	d615      	bvs.n	800a494 <asinf+0x48>
 800a468:	eeb0 0a48 	vmov.f32	s0, s16
 800a46c:	f000 f81c 	bl	800a4a8 <fabsf>
 800a470:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a474:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a47c:	dd0a      	ble.n	800a494 <asinf+0x48>
 800a47e:	f7ff ffbb 	bl	800a3f8 <__errno>
 800a482:	ecbd 8b02 	vpop	{d8}
 800a486:	2321      	movs	r3, #33	@ 0x21
 800a488:	6003      	str	r3, [r0, #0]
 800a48a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a48e:	4804      	ldr	r0, [pc, #16]	@ (800a4a0 <asinf+0x54>)
 800a490:	f000 b812 	b.w	800a4b8 <nanf>
 800a494:	eeb0 0a68 	vmov.f32	s0, s17
 800a498:	ecbd 8b02 	vpop	{d8}
 800a49c:	bd08      	pop	{r3, pc}
 800a49e:	bf00      	nop
 800a4a0:	0800b648 	.word	0x0800b648

0800a4a4 <atan2f>:
 800a4a4:	f000 b8f4 	b.w	800a690 <__ieee754_atan2f>

0800a4a8 <fabsf>:
 800a4a8:	ee10 3a10 	vmov	r3, s0
 800a4ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4b0:	ee00 3a10 	vmov	s0, r3
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <nanf>:
 800a4b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4c0 <nanf+0x8>
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	7fc00000 	.word	0x7fc00000

0800a4c4 <__ieee754_asinf>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	ee10 5a10 	vmov	r5, s0
 800a4ca:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a4ce:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800a4d2:	ed2d 8b04 	vpush	{d8-d9}
 800a4d6:	d10c      	bne.n	800a4f2 <__ieee754_asinf+0x2e>
 800a4d8:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800a650 <__ieee754_asinf+0x18c>
 800a4dc:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800a654 <__ieee754_asinf+0x190>
 800a4e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a4e4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a4e8:	eeb0 0a67 	vmov.f32	s0, s15
 800a4ec:	ecbd 8b04 	vpop	{d8-d9}
 800a4f0:	bd38      	pop	{r3, r4, r5, pc}
 800a4f2:	d904      	bls.n	800a4fe <__ieee754_asinf+0x3a>
 800a4f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a4f8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a4fc:	e7f6      	b.n	800a4ec <__ieee754_asinf+0x28>
 800a4fe:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a502:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a506:	d20b      	bcs.n	800a520 <__ieee754_asinf+0x5c>
 800a508:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800a50c:	d252      	bcs.n	800a5b4 <__ieee754_asinf+0xf0>
 800a50e:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800a658 <__ieee754_asinf+0x194>
 800a512:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a516:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51e:	dce5      	bgt.n	800a4ec <__ieee754_asinf+0x28>
 800a520:	f7ff ffc2 	bl	800a4a8 <fabsf>
 800a524:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800a528:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a52c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a530:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a65c <__ieee754_asinf+0x198>
 800a534:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800a660 <__ieee754_asinf+0x19c>
 800a538:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800a664 <__ieee754_asinf+0x1a0>
 800a53c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a540:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800a668 <__ieee754_asinf+0x1a4>
 800a544:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a548:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800a66c <__ieee754_asinf+0x1a8>
 800a54c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a550:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800a670 <__ieee754_asinf+0x1ac>
 800a554:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a558:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800a674 <__ieee754_asinf+0x1b0>
 800a55c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a560:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800a678 <__ieee754_asinf+0x1b4>
 800a564:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a568:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800a67c <__ieee754_asinf+0x1b8>
 800a56c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a570:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800a680 <__ieee754_asinf+0x1bc>
 800a574:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a578:	eeb0 0a48 	vmov.f32	s0, s16
 800a57c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a580:	f000 f9fa 	bl	800a978 <__ieee754_sqrtf>
 800a584:	4b3f      	ldr	r3, [pc, #252]	@ (800a684 <__ieee754_asinf+0x1c0>)
 800a586:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a58a:	429c      	cmp	r4, r3
 800a58c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a590:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a594:	d93d      	bls.n	800a612 <__ieee754_asinf+0x14e>
 800a596:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a59a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800a688 <__ieee754_asinf+0x1c4>
 800a59e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a5a2:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800a654 <__ieee754_asinf+0x190>
 800a5a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a5aa:	2d00      	cmp	r5, #0
 800a5ac:	bfd8      	it	le
 800a5ae:	eeb1 0a40 	vnegle.f32	s0, s0
 800a5b2:	e79b      	b.n	800a4ec <__ieee754_asinf+0x28>
 800a5b4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a5b8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a660 <__ieee754_asinf+0x19c>
 800a5bc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800a65c <__ieee754_asinf+0x198>
 800a5c0:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800a674 <__ieee754_asinf+0x1b0>
 800a5c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a5c8:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a668 <__ieee754_asinf+0x1a4>
 800a5cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5d0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800a66c <__ieee754_asinf+0x1a8>
 800a5d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5d8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800a670 <__ieee754_asinf+0x1ac>
 800a5dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5e0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800a664 <__ieee754_asinf+0x1a0>
 800a5e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5e8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800a678 <__ieee754_asinf+0x1b4>
 800a5ec:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a5f0:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800a67c <__ieee754_asinf+0x1b8>
 800a5f4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a5f8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800a680 <__ieee754_asinf+0x1bc>
 800a5fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a600:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a604:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a608:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a60c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a610:	e76c      	b.n	800a4ec <__ieee754_asinf+0x28>
 800a612:	ee10 3a10 	vmov	r3, s0
 800a616:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a61a:	f023 030f 	bic.w	r3, r3, #15
 800a61e:	ee07 3a10 	vmov	s14, r3
 800a622:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a626:	ee70 5a00 	vadd.f32	s11, s0, s0
 800a62a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800a62e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a650 <__ieee754_asinf+0x18c>
 800a632:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800a636:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800a68c <__ieee754_asinf+0x1c8>
 800a63a:	eee5 7a66 	vfms.f32	s15, s10, s13
 800a63e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800a642:	eeb0 6a40 	vmov.f32	s12, s0
 800a646:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a64a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a64e:	e7aa      	b.n	800a5a6 <__ieee754_asinf+0xe2>
 800a650:	b33bbd2e 	.word	0xb33bbd2e
 800a654:	3fc90fdb 	.word	0x3fc90fdb
 800a658:	7149f2ca 	.word	0x7149f2ca
 800a65c:	3a4f7f04 	.word	0x3a4f7f04
 800a660:	3811ef08 	.word	0x3811ef08
 800a664:	3e2aaaab 	.word	0x3e2aaaab
 800a668:	bd241146 	.word	0xbd241146
 800a66c:	3e4e0aa8 	.word	0x3e4e0aa8
 800a670:	bea6b090 	.word	0xbea6b090
 800a674:	3d9dc62e 	.word	0x3d9dc62e
 800a678:	bf303361 	.word	0xbf303361
 800a67c:	4001572d 	.word	0x4001572d
 800a680:	c019d139 	.word	0xc019d139
 800a684:	3f799999 	.word	0x3f799999
 800a688:	333bbd2e 	.word	0x333bbd2e
 800a68c:	3f490fdb 	.word	0x3f490fdb

0800a690 <__ieee754_atan2f>:
 800a690:	ee10 2a90 	vmov	r2, s1
 800a694:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800a698:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a69c:	b510      	push	{r4, lr}
 800a69e:	eef0 7a40 	vmov.f32	s15, s0
 800a6a2:	d806      	bhi.n	800a6b2 <__ieee754_atan2f+0x22>
 800a6a4:	ee10 0a10 	vmov	r0, s0
 800a6a8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a6ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a6b0:	d904      	bls.n	800a6bc <__ieee754_atan2f+0x2c>
 800a6b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a6b6:	eeb0 0a67 	vmov.f32	s0, s15
 800a6ba:	bd10      	pop	{r4, pc}
 800a6bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a6c0:	d103      	bne.n	800a6ca <__ieee754_atan2f+0x3a>
 800a6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6c6:	f000 b883 	b.w	800a7d0 <atanf>
 800a6ca:	1794      	asrs	r4, r2, #30
 800a6cc:	f004 0402 	and.w	r4, r4, #2
 800a6d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a6d4:	b943      	cbnz	r3, 800a6e8 <__ieee754_atan2f+0x58>
 800a6d6:	2c02      	cmp	r4, #2
 800a6d8:	d05e      	beq.n	800a798 <__ieee754_atan2f+0x108>
 800a6da:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a7ac <__ieee754_atan2f+0x11c>
 800a6de:	2c03      	cmp	r4, #3
 800a6e0:	bf08      	it	eq
 800a6e2:	eef0 7a47 	vmoveq.f32	s15, s14
 800a6e6:	e7e6      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a6e8:	b941      	cbnz	r1, 800a6fc <__ieee754_atan2f+0x6c>
 800a6ea:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800a7b0 <__ieee754_atan2f+0x120>
 800a6ee:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a7b4 <__ieee754_atan2f+0x124>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	bfb8      	it	lt
 800a6f6:	eef0 7a47 	vmovlt.f32	s15, s14
 800a6fa:	e7dc      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a6fc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a700:	d110      	bne.n	800a724 <__ieee754_atan2f+0x94>
 800a702:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a706:	f104 34ff 	add.w	r4, r4, #4294967295
 800a70a:	d107      	bne.n	800a71c <__ieee754_atan2f+0x8c>
 800a70c:	2c02      	cmp	r4, #2
 800a70e:	d846      	bhi.n	800a79e <__ieee754_atan2f+0x10e>
 800a710:	4b29      	ldr	r3, [pc, #164]	@ (800a7b8 <__ieee754_atan2f+0x128>)
 800a712:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a716:	edd3 7a00 	vldr	s15, [r3]
 800a71a:	e7cc      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a71c:	2c02      	cmp	r4, #2
 800a71e:	d841      	bhi.n	800a7a4 <__ieee754_atan2f+0x114>
 800a720:	4b26      	ldr	r3, [pc, #152]	@ (800a7bc <__ieee754_atan2f+0x12c>)
 800a722:	e7f6      	b.n	800a712 <__ieee754_atan2f+0x82>
 800a724:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a728:	d0df      	beq.n	800a6ea <__ieee754_atan2f+0x5a>
 800a72a:	1a5b      	subs	r3, r3, r1
 800a72c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800a730:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a734:	da1a      	bge.n	800a76c <__ieee754_atan2f+0xdc>
 800a736:	2a00      	cmp	r2, #0
 800a738:	da01      	bge.n	800a73e <__ieee754_atan2f+0xae>
 800a73a:	313c      	adds	r1, #60	@ 0x3c
 800a73c:	db19      	blt.n	800a772 <__ieee754_atan2f+0xe2>
 800a73e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a742:	f7ff feb1 	bl	800a4a8 <fabsf>
 800a746:	f000 f843 	bl	800a7d0 <atanf>
 800a74a:	eef0 7a40 	vmov.f32	s15, s0
 800a74e:	2c01      	cmp	r4, #1
 800a750:	d012      	beq.n	800a778 <__ieee754_atan2f+0xe8>
 800a752:	2c02      	cmp	r4, #2
 800a754:	d017      	beq.n	800a786 <__ieee754_atan2f+0xf6>
 800a756:	2c00      	cmp	r4, #0
 800a758:	d0ad      	beq.n	800a6b6 <__ieee754_atan2f+0x26>
 800a75a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a7c0 <__ieee754_atan2f+0x130>
 800a75e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a762:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a7c4 <__ieee754_atan2f+0x134>
 800a766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a76a:	e7a4      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a76c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a7b0 <__ieee754_atan2f+0x120>
 800a770:	e7ed      	b.n	800a74e <__ieee754_atan2f+0xbe>
 800a772:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a7c8 <__ieee754_atan2f+0x138>
 800a776:	e7ea      	b.n	800a74e <__ieee754_atan2f+0xbe>
 800a778:	ee17 3a90 	vmov	r3, s15
 800a77c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a780:	ee07 3a90 	vmov	s15, r3
 800a784:	e797      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a786:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a7c0 <__ieee754_atan2f+0x130>
 800a78a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a78e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a7c4 <__ieee754_atan2f+0x134>
 800a792:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a796:	e78e      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a798:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a7c4 <__ieee754_atan2f+0x134>
 800a79c:	e78b      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a79e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800a7cc <__ieee754_atan2f+0x13c>
 800a7a2:	e788      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a7a4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a7c8 <__ieee754_atan2f+0x138>
 800a7a8:	e785      	b.n	800a6b6 <__ieee754_atan2f+0x26>
 800a7aa:	bf00      	nop
 800a7ac:	c0490fdb 	.word	0xc0490fdb
 800a7b0:	3fc90fdb 	.word	0x3fc90fdb
 800a7b4:	bfc90fdb 	.word	0xbfc90fdb
 800a7b8:	0800b658 	.word	0x0800b658
 800a7bc:	0800b64c 	.word	0x0800b64c
 800a7c0:	33bbbd2e 	.word	0x33bbbd2e
 800a7c4:	40490fdb 	.word	0x40490fdb
 800a7c8:	00000000 	.word	0x00000000
 800a7cc:	3f490fdb 	.word	0x3f490fdb

0800a7d0 <atanf>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	ee10 5a10 	vmov	r5, s0
 800a7d6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a7da:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800a7de:	eef0 7a40 	vmov.f32	s15, s0
 800a7e2:	d310      	bcc.n	800a806 <atanf+0x36>
 800a7e4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800a7e8:	d904      	bls.n	800a7f4 <atanf+0x24>
 800a7ea:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a7ee:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800a92c <atanf+0x15c>
 800a7f8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800a930 <atanf+0x160>
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	bfc8      	it	gt
 800a800:	eef0 7a47 	vmovgt.f32	s15, s14
 800a804:	e7f3      	b.n	800a7ee <atanf+0x1e>
 800a806:	4b4b      	ldr	r3, [pc, #300]	@ (800a934 <atanf+0x164>)
 800a808:	429c      	cmp	r4, r3
 800a80a:	d810      	bhi.n	800a82e <atanf+0x5e>
 800a80c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800a810:	d20a      	bcs.n	800a828 <atanf+0x58>
 800a812:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800a938 <atanf+0x168>
 800a816:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a81a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a81e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a826:	dce2      	bgt.n	800a7ee <atanf+0x1e>
 800a828:	f04f 33ff 	mov.w	r3, #4294967295
 800a82c:	e013      	b.n	800a856 <atanf+0x86>
 800a82e:	f7ff fe3b 	bl	800a4a8 <fabsf>
 800a832:	4b42      	ldr	r3, [pc, #264]	@ (800a93c <atanf+0x16c>)
 800a834:	429c      	cmp	r4, r3
 800a836:	d84f      	bhi.n	800a8d8 <atanf+0x108>
 800a838:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d841      	bhi.n	800a8c4 <atanf+0xf4>
 800a840:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a844:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a848:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a84c:	2300      	movs	r3, #0
 800a84e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a852:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a85c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a940 <atanf+0x170>
 800a860:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800a944 <atanf+0x174>
 800a864:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800a948 <atanf+0x178>
 800a868:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a86c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a870:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800a94c <atanf+0x17c>
 800a874:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a878:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a950 <atanf+0x180>
 800a87c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a880:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a954 <atanf+0x184>
 800a884:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a888:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a958 <atanf+0x188>
 800a88c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a890:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800a95c <atanf+0x18c>
 800a894:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a898:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a960 <atanf+0x190>
 800a89c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a8a0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800a964 <atanf+0x194>
 800a8a4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a8a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a968 <atanf+0x198>
 800a8ac:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a8b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a8b4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a8b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a8bc:	d121      	bne.n	800a902 <atanf+0x132>
 800a8be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8c2:	e794      	b.n	800a7ee <atanf+0x1e>
 800a8c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a8c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a8cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a8d6:	e7be      	b.n	800a856 <atanf+0x86>
 800a8d8:	4b24      	ldr	r3, [pc, #144]	@ (800a96c <atanf+0x19c>)
 800a8da:	429c      	cmp	r4, r3
 800a8dc:	d80b      	bhi.n	800a8f6 <atanf+0x126>
 800a8de:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a8e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8e6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a8f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f4:	e7af      	b.n	800a856 <atanf+0x86>
 800a8f6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a8fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a8fe:	2303      	movs	r3, #3
 800a900:	e7a9      	b.n	800a856 <atanf+0x86>
 800a902:	4a1b      	ldr	r2, [pc, #108]	@ (800a970 <atanf+0x1a0>)
 800a904:	491b      	ldr	r1, [pc, #108]	@ (800a974 <atanf+0x1a4>)
 800a906:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a90a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a90e:	edd3 6a00 	vldr	s13, [r3]
 800a912:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a916:	2d00      	cmp	r5, #0
 800a918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a91c:	edd2 7a00 	vldr	s15, [r2]
 800a920:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a924:	bfb8      	it	lt
 800a926:	eef1 7a67 	vneglt.f32	s15, s15
 800a92a:	e760      	b.n	800a7ee <atanf+0x1e>
 800a92c:	bfc90fdb 	.word	0xbfc90fdb
 800a930:	3fc90fdb 	.word	0x3fc90fdb
 800a934:	3edfffff 	.word	0x3edfffff
 800a938:	7149f2ca 	.word	0x7149f2ca
 800a93c:	3f97ffff 	.word	0x3f97ffff
 800a940:	3c8569d7 	.word	0x3c8569d7
 800a944:	3d4bda59 	.word	0x3d4bda59
 800a948:	bd6ef16b 	.word	0xbd6ef16b
 800a94c:	3d886b35 	.word	0x3d886b35
 800a950:	3dba2e6e 	.word	0x3dba2e6e
 800a954:	3e124925 	.word	0x3e124925
 800a958:	3eaaaaab 	.word	0x3eaaaaab
 800a95c:	bd15a221 	.word	0xbd15a221
 800a960:	bd9d8795 	.word	0xbd9d8795
 800a964:	bde38e38 	.word	0xbde38e38
 800a968:	be4ccccd 	.word	0xbe4ccccd
 800a96c:	401bffff 	.word	0x401bffff
 800a970:	0800b674 	.word	0x0800b674
 800a974:	0800b664 	.word	0x0800b664

0800a978 <__ieee754_sqrtf>:
 800a978:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a97c:	4770      	bx	lr
	...

0800a980 <_init>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	bf00      	nop
 800a984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a986:	bc08      	pop	{r3}
 800a988:	469e      	mov	lr, r3
 800a98a:	4770      	bx	lr

0800a98c <_fini>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	bf00      	nop
 800a990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a992:	bc08      	pop	{r3}
 800a994:	469e      	mov	lr, r3
 800a996:	4770      	bx	lr
