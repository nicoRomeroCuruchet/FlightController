
SingleCopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006734  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080068c8  080068c8  000078c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006904  08006904  00007904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006908  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000005c  08006964  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006964  00008374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e2e  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ae  00000000  00000000  00019eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c89  00000000  00000000  0001d338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169f3  00000000  00000000  0001dfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014354  00000000  00000000  000349b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fd4  00000000  00000000  00048d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbcdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004700  00000000  00000000  000dbd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000e0420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080068b0 	.word	0x080068b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	080068b0 	.word	0x080068b0

080001d4 <__aeabi_ldivmod>:
 80001d4:	b97b      	cbnz	r3, 80001f6 <__aeabi_ldivmod+0x22>
 80001d6:	b972      	cbnz	r2, 80001f6 <__aeabi_ldivmod+0x22>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bfbe      	ittt	lt
 80001dc:	2000      	movlt	r0, #0
 80001de:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001e2:	e006      	blt.n	80001f2 <__aeabi_ldivmod+0x1e>
 80001e4:	bf08      	it	eq
 80001e6:	2800      	cmpeq	r0, #0
 80001e8:	bf1c      	itt	ne
 80001ea:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001ee:	f04f 30ff 	movne.w	r0, #4294967295
 80001f2:	f000 b9b5 	b.w	8000560 <__aeabi_idiv0>
 80001f6:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fe:	2900      	cmp	r1, #0
 8000200:	db09      	blt.n	8000216 <__aeabi_ldivmod+0x42>
 8000202:	2b00      	cmp	r3, #0
 8000204:	db1a      	blt.n	800023c <__aeabi_ldivmod+0x68>
 8000206:	f000 f84d 	bl	80002a4 <__udivmoddi4>
 800020a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000212:	b004      	add	sp, #16
 8000214:	4770      	bx	lr
 8000216:	4240      	negs	r0, r0
 8000218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800021c:	2b00      	cmp	r3, #0
 800021e:	db1b      	blt.n	8000258 <__aeabi_ldivmod+0x84>
 8000220:	f000 f840 	bl	80002a4 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	4770      	bx	lr
 800023c:	4252      	negs	r2, r2
 800023e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000242:	f000 f82f 	bl	80002a4 <__udivmoddi4>
 8000246:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024e:	b004      	add	sp, #16
 8000250:	4240      	negs	r0, r0
 8000252:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000256:	4770      	bx	lr
 8000258:	4252      	negs	r2, r2
 800025a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025e:	f000 f821 	bl	80002a4 <__udivmoddi4>
 8000262:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026a:	b004      	add	sp, #16
 800026c:	4252      	negs	r2, r2
 800026e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2203      	movs	r2, #3
 8000570:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2203      	movs	r2, #3
 800057c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2203      	movs	r2, #3
 8000582:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2203      	movs	r2, #3
 8000588:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2203      	movs	r2, #3
 800058e:	715a      	strb	r2, [r3, #5]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af04      	add	r7, sp, #16
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	460b      	mov	r3, r1
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	8af9      	ldrh	r1, [r7, #22]
 80005bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005c0:	9302      	str	r3, [sp, #8]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2301      	movs	r3, #1
 80005ce:	f002 faf7 	bl	8002bc0 <HAL_I2C_Mem_Read>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10b      	bne.n	80005f0 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80005d8:	7d7b      	ldrb	r3, [r7, #21]
 80005da:	021b      	lsls	r3, r3, #8
 80005dc:	b21a      	sxth	r2, r3
 80005de:	7d3b      	ldrb	r3, [r7, #20]
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	801a      	strh	r2, [r3, #0]
		return true;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <read_register16+0x56>
	} else
		return false;
 80005f0:	2300      	movs	r3, #0

}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80005fa:	b590      	push	{r4, r7, lr}
 80005fc:	b08b      	sub	sp, #44	@ 0x2c
 80005fe:	af04      	add	r7, sp, #16
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	461a      	mov	r2, r3
 8000606:	460b      	mov	r3, r1
 8000608:	72fb      	strb	r3, [r7, #11]
 800060a:	4613      	mov	r3, r2
 800060c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	b29a      	uxth	r2, r3
 800061e:	7abb      	ldrb	r3, [r7, #10]
 8000620:	b29b      	uxth	r3, r3
 8000622:	8af9      	ldrh	r1, [r7, #22]
 8000624:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000628:	9402      	str	r4, [sp, #8]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	f002 fac5 	bl	8002bc0 <HAL_I2C_Mem_Read>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d101      	bne.n	8000640 <read_data+0x46>
		return 0;
 800063c:	2300      	movs	r3, #0
 800063e:	e000      	b.n	8000642 <read_data+0x48>
	else
		return 1;
 8000640:	2301      	movs	r3, #1

}
 8000642:	4618      	mov	r0, r3
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd90      	pop	{r4, r7, pc}

0800064a <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	461a      	mov	r2, r3
 8000656:	2188      	movs	r1, #136	@ 0x88
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff9f 	bl	800059c <read_register16>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d06f      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3302      	adds	r3, #2
 8000668:	461a      	mov	r2, r3
 800066a:	218a      	movs	r1, #138	@ 0x8a
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff95 	bl	800059c <read_register16>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d065      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3304      	adds	r3, #4
 800067c:	461a      	mov	r2, r3
 800067e:	218c      	movs	r1, #140	@ 0x8c
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff8b 	bl	800059c <read_register16>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d05b      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3306      	adds	r3, #6
 8000690:	461a      	mov	r2, r3
 8000692:	218e      	movs	r1, #142	@ 0x8e
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff81 	bl	800059c <read_register16>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d051      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3308      	adds	r3, #8
 80006a4:	461a      	mov	r2, r3
 80006a6:	2190      	movs	r1, #144	@ 0x90
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff77 	bl	800059c <read_register16>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d047      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	330a      	adds	r3, #10
 80006b8:	461a      	mov	r2, r3
 80006ba:	2192      	movs	r1, #146	@ 0x92
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff6d 	bl	800059c <read_register16>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d03d      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	330c      	adds	r3, #12
 80006cc:	461a      	mov	r2, r3
 80006ce:	2194      	movs	r1, #148	@ 0x94
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff63 	bl	800059c <read_register16>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d033      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	330e      	adds	r3, #14
 80006e0:	461a      	mov	r2, r3
 80006e2:	2196      	movs	r1, #150	@ 0x96
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff59 	bl	800059c <read_register16>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d029      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3310      	adds	r3, #16
 80006f4:	461a      	mov	r2, r3
 80006f6:	2198      	movs	r1, #152	@ 0x98
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff4f 	bl	800059c <read_register16>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d01f      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3312      	adds	r3, #18
 8000708:	461a      	mov	r2, r3
 800070a:	219a      	movs	r1, #154	@ 0x9a
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff45 	bl	800059c <read_register16>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d015      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3314      	adds	r3, #20
 800071c:	461a      	mov	r2, r3
 800071e:	219c      	movs	r1, #156	@ 0x9c
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff3b 	bl	800059c <read_register16>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00b      	beq.n	8000744 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000730:	461a      	mov	r2, r3
 8000732:	219e      	movs	r1, #158	@ 0x9e
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff31 	bl	800059c <read_register16>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <read_calibration_data+0xfa>

		return true;
 8000740:	2301      	movs	r3, #1
 8000742:	e000      	b.n	8000746 <read_calibration_data+0xfc>
	}

	return false;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f103 0218 	add.w	r2, r3, #24
 800075c:	2301      	movs	r3, #1
 800075e:	21a1      	movs	r1, #161	@ 0xa1
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff4a 	bl	80005fa <read_data>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d14b      	bne.n	8000804 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	331a      	adds	r3, #26
 8000770:	461a      	mov	r2, r3
 8000772:	21e1      	movs	r1, #225	@ 0xe1
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff11 	bl	800059c <read_register16>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d041      	beq.n	8000804 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f103 021c 	add.w	r2, r3, #28
 8000786:	2301      	movs	r3, #1
 8000788:	21e3      	movs	r1, #227	@ 0xe3
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff35 	bl	80005fa <read_data>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d136      	bne.n	8000804 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000796:	f107 030e 	add.w	r3, r7, #14
 800079a:	461a      	mov	r2, r3
 800079c:	21e4      	movs	r1, #228	@ 0xe4
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fefc 	bl	800059c <read_register16>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d02c      	beq.n	8000804 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	461a      	mov	r2, r3
 80007b0:	21e5      	movs	r1, #229	@ 0xe5
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fef2 	bl	800059c <read_register16>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d022      	beq.n	8000804 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80007c4:	2301      	movs	r3, #1
 80007c6:	21e7      	movs	r1, #231	@ 0xe7
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff16 	bl	80005fa <read_data>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d117      	bne.n	8000804 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	b21b      	sxth	r3, r3
 80007da:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80007de:	b21a      	sxth	r2, r3
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	121b      	asrs	r3, r3, #8
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80007f4:	89bb      	ldrh	r3, [r7, #12]
 80007f6:	091b      	lsrs	r3, r3, #4
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	841a      	strh	r2, [r3, #32]

		return true;
 8000800:	2301      	movs	r3, #1
 8000802:	e000      	b.n	8000806 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800080e:	b580      	push	{r7, lr}
 8000810:	b088      	sub	sp, #32
 8000812:	af04      	add	r7, sp, #16
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	70fb      	strb	r3, [r7, #3]
 800081a:	4613      	mov	r3, r2
 800081c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	b29a      	uxth	r2, r3
 800082e:	89f9      	ldrh	r1, [r7, #14]
 8000830:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	2301      	movs	r3, #1
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	1cbb      	adds	r3, r7, #2
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	f002 f8c4 	bl	80029cc <HAL_I2C_Mem_Write>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <write_register8+0x40>
		return false;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <write_register8+0x42>
	else
		return true;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000866:	2b77      	cmp	r3, #119	@ 0x77
 8000868:	d005      	beq.n	8000876 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800086e:	2b77      	cmp	r3, #119	@ 0x77
 8000870:	d001      	beq.n	8000876 <bmp280_init+0x1e>

		return false;
 8000872:	2300      	movs	r3, #0
 8000874:	e099      	b.n	80009aa <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800087c:	2301      	movs	r3, #1
 800087e:	21d0      	movs	r1, #208	@ 0xd0
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff feba 	bl	80005fa <read_data>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <bmp280_init+0x38>
		return false;
 800088c:	2300      	movs	r3, #0
 800088e:	e08c      	b.n	80009aa <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000896:	2b58      	cmp	r3, #88	@ 0x58
 8000898:	d006      	beq.n	80008a8 <bmp280_init+0x50>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80008a0:	2b60      	cmp	r3, #96	@ 0x60
 80008a2:	d001      	beq.n	80008a8 <bmp280_init+0x50>

		return false;
 80008a4:	2300      	movs	r3, #0
 80008a6:	e080      	b.n	80009aa <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80008a8:	22b6      	movs	r2, #182	@ 0xb6
 80008aa:	21e0      	movs	r1, #224	@ 0xe0
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ffae 	bl	800080e <write_register8>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <bmp280_init+0x64>
		return false;
 80008b8:	2300      	movs	r3, #0
 80008ba:	e076      	b.n	80009aa <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80008bc:	f107 020c 	add.w	r2, r7, #12
 80008c0:	2301      	movs	r3, #1
 80008c2:	21f3      	movs	r1, #243	@ 0xf3
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fe98 	bl	80005fa <read_data>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f5      	bne.n	80008bc <bmp280_init+0x64>
				&& (status & 1) == 0)
 80008d0:	7b3b      	ldrb	r3, [r7, #12]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f0      	bne.n	80008bc <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff feb5 	bl	800064a <read_calibration_data>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f083 0301 	eor.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d100      	bne.n	80008ee <bmp280_init+0x96>
 80008ec:	e001      	b.n	80008f2 <bmp280_init+0x9a>
		return false;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e05b      	b.n	80009aa <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80008f8:	2b60      	cmp	r3, #96	@ 0x60
 80008fa:	d10a      	bne.n	8000912 <bmp280_init+0xba>
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff26 	bl	800074e <read_hum_calibration_data>
 8000902:	4603      	mov	r3, r0
 8000904:	f083 0301 	eor.w	r3, r3, #1
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <bmp280_init+0xba>
		return false;
 800090e:	2300      	movs	r3, #0
 8000910:	e04b      	b.n	80009aa <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	015b      	lsls	r3, r3, #5
 8000918:	b25a      	sxtb	r2, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	b25b      	sxtb	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	461a      	mov	r2, r3
 800092c:	21f5      	movs	r1, #245	@ 0xf5
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ff6d 	bl	800080e <write_register8>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <bmp280_init+0xe6>
		return false;
 800093a:	2300      	movs	r3, #0
 800093c:	e035      	b.n	80009aa <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	78db      	ldrb	r3, [r3, #3]
 8000950:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000952:	b25a      	sxtb	r2, r3
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	b25b      	sxtb	r3, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	b25a      	sxtb	r2, r3
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800096a:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000972:	2b60      	cmp	r3, #96	@ 0x60
 8000974:	d10d      	bne.n	8000992 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	461a      	mov	r2, r3
 8000980:	21f2      	movs	r1, #242	@ 0xf2
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff43 	bl	800080e <write_register8>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <bmp280_init+0x13a>
			return false;
 800098e:	2300      	movs	r3, #0
 8000990:	e00b      	b.n	80009aa <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	461a      	mov	r2, r3
 8000996:	21f4      	movs	r1, #244	@ 0xf4
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff38 	bl	800080e <write_register8>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <bmp280_init+0x150>
		return false;
 80009a4:	2300      	movs	r3, #0
 80009a6:	e000      	b.n	80009aa <bmp280_init+0x152>
	}

	return true;
 80009a8:	2301      	movs	r3, #1
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80009b2:	b480      	push	{r7}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	10da      	asrs	r2, r3, #3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80009d4:	12db      	asrs	r3, r3, #11
 80009d6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	111b      	asrs	r3, r3, #4
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	8812      	ldrh	r2, [r2, #0]
 80009e0:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	1112      	asrs	r2, r2, #4
 80009e6:	68f9      	ldr	r1, [r7, #12]
 80009e8:	8809      	ldrh	r1, [r1, #0]
 80009ea:	1a52      	subs	r2, r2, r1
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80009fc:	139b      	asrs	r3, r3, #14
 80009fe:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	441a      	add	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	3380      	adds	r3, #128	@ 0x80
 8000a16:	121b      	asrs	r3, r3, #8
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	371c      	adds	r7, #28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a28:	b0cc      	sub	sp, #304	@ 0x130
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000a30:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000a34:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a3c:	17da      	asrs	r2, r3, #31
 8000a3e:	461c      	mov	r4, r3
 8000a40:	4615      	mov	r5, r2
 8000a42:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000a46:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000a4a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000a4e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a56:	fb03 f102 	mul.w	r1, r3, r2
 8000a5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a62:	fb02 f303 	mul.w	r3, r2, r3
 8000a66:	18ca      	adds	r2, r1, r3
 8000a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a6c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a70:	eb02 0309 	add.w	r3, r2, r9
 8000a74:	4699      	mov	r9, r3
 8000a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000a7a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	17da      	asrs	r2, r3, #31
 8000a82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a86:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	fb03 f209 	mul.w	r2, r3, r9
 8000a94:	460b      	mov	r3, r1
 8000a96:	fb08 f303 	mul.w	r3, r8, r3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	fba8 1202 	umull	r1, r2, r8, r2
 8000aa2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000aa6:	460a      	mov	r2, r1
 8000aa8:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000aac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ab0:	4413      	add	r3, r2
 8000ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000ab6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000aba:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000abe:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ac6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	17da      	asrs	r2, r3, #31
 8000ace:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000ad2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ada:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000ade:	462a      	mov	r2, r5
 8000ae0:	fb02 f203 	mul.w	r2, r2, r3
 8000ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ae8:	4621      	mov	r1, r4
 8000aea:	fb01 f303 	mul.w	r3, r1, r3
 8000aee:	441a      	add	r2, r3
 8000af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000af4:	4621      	mov	r1, r4
 8000af6:	fba3 1301 	umull	r1, r3, r3, r1
 8000afa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000afe:	460b      	mov	r3, r1
 8000b00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	f04f 0100 	mov.w	r1, #0
 8000b16:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000b1a:	462b      	mov	r3, r5
 8000b1c:	0459      	lsls	r1, r3, #17
 8000b1e:	4623      	mov	r3, r4
 8000b20:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000b24:	4623      	mov	r3, r4
 8000b26:	0458      	lsls	r0, r3, #17
 8000b28:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b2c:	1814      	adds	r4, r2, r0
 8000b2e:	643c      	str	r4, [r7, #64]	@ 0x40
 8000b30:	414b      	adcs	r3, r1
 8000b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b34:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000b38:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b40:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	17da      	asrs	r2, r3, #31
 8000b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	f04f 0100 	mov.w	r1, #0
 8000b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b5c:	00d9      	lsls	r1, r3, #3
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b64:	1814      	adds	r4, r2, r0
 8000b66:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b68:	414b      	adcs	r3, r1
 8000b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b6c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b70:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000b74:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b7c:	fb03 f102 	mul.w	r1, r3, r2
 8000b80:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b88:	fb02 f303 	mul.w	r3, r2, r3
 8000b8c:	18ca      	adds	r2, r1, r3
 8000b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b92:	fba3 1303 	umull	r1, r3, r3, r3
 8000b96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	17da      	asrs	r2, r3, #31
 8000bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000bbe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000bc2:	462b      	mov	r3, r5
 8000bc4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000bc8:	4642      	mov	r2, r8
 8000bca:	fb02 f203 	mul.w	r2, r2, r3
 8000bce:	464b      	mov	r3, r9
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4622      	mov	r2, r4
 8000bda:	4641      	mov	r1, r8
 8000bdc:	fba2 1201 	umull	r1, r2, r2, r1
 8000be0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000be4:	460a      	mov	r2, r1
 8000be6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000bea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000bee:	4413      	add	r3, r2
 8000bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	f04f 0100 	mov.w	r1, #0
 8000bfc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000c00:	4623      	mov	r3, r4
 8000c02:	0a18      	lsrs	r0, r3, #8
 8000c04:	462b      	mov	r3, r5
 8000c06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c0a:	462b      	mov	r3, r5
 8000c0c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	17da      	asrs	r2, r3, #31
 8000c1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c1e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c26:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000c2a:	464a      	mov	r2, r9
 8000c2c:	fb02 f203 	mul.w	r2, r2, r3
 8000c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c34:	4644      	mov	r4, r8
 8000c36:	fb04 f303 	mul.w	r3, r4, r3
 8000c3a:	441a      	add	r2, r3
 8000c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c40:	4644      	mov	r4, r8
 8000c42:	fba3 4304 	umull	r4, r3, r3, r4
 8000c46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000c50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000c66:	464c      	mov	r4, r9
 8000c68:	0323      	lsls	r3, r4, #12
 8000c6a:	4644      	mov	r4, r8
 8000c6c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c70:	4644      	mov	r4, r8
 8000c72:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000c74:	1884      	adds	r4, r0, r2
 8000c76:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c78:	eb41 0303 	adc.w	r3, r1, r3
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c7e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c82:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000c86:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000c8a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c8e:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c92:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c9a:	88db      	ldrh	r3, [r3, #6]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ca4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000ca8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000cac:	462b      	mov	r3, r5
 8000cae:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	fb02 f203 	mul.w	r2, r2, r3
 8000cb8:	464b      	mov	r3, r9
 8000cba:	4621      	mov	r1, r4
 8000cbc:	fb01 f303 	mul.w	r3, r1, r3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4622      	mov	r2, r4
 8000cc4:	4641      	mov	r1, r8
 8000cc6:	fba2 1201 	umull	r1, r2, r2, r1
 8000cca:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000cce:	460a      	mov	r2, r1
 8000cd0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000cd4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cd8:	4413      	add	r3, r2
 8000cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000cea:	4629      	mov	r1, r5
 8000cec:	104a      	asrs	r2, r1, #1
 8000cee:	4629      	mov	r1, r5
 8000cf0:	17cb      	asrs	r3, r1, #31
 8000cf2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8000cf6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e148      	b.n	8000f94 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8000d02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d06:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000d0a:	17da      	asrs	r2, r3, #31
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000d10:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000d14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8000d18:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d1c:	105b      	asrs	r3, r3, #1
 8000d1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000d22:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d26:	07db      	lsls	r3, r3, #31
 8000d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d2c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d30:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000d34:	4621      	mov	r1, r4
 8000d36:	1a89      	subs	r1, r1, r2
 8000d38:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	eb61 0303 	sbc.w	r3, r1, r3
 8000d40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000d46:	4622      	mov	r2, r4
 8000d48:	462b      	mov	r3, r5
 8000d4a:	1891      	adds	r1, r2, r2
 8000d4c:	6239      	str	r1, [r7, #32]
 8000d4e:	415b      	adcs	r3, r3
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d56:	4621      	mov	r1, r4
 8000d58:	1851      	adds	r1, r2, r1
 8000d5a:	61b9      	str	r1, [r7, #24]
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	414b      	adcs	r3, r1
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d6e:	4649      	mov	r1, r9
 8000d70:	018b      	lsls	r3, r1, #6
 8000d72:	4641      	mov	r1, r8
 8000d74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d78:	4641      	mov	r1, r8
 8000d7a:	018a      	lsls	r2, r1, #6
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	1889      	adds	r1, r1, r2
 8000d80:	6139      	str	r1, [r7, #16]
 8000d82:	4649      	mov	r1, r9
 8000d84:	eb43 0101 	adc.w	r1, r3, r1
 8000d88:	6179      	str	r1, [r7, #20]
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d96:	4649      	mov	r1, r9
 8000d98:	008b      	lsls	r3, r1, #2
 8000d9a:	4641      	mov	r1, r8
 8000d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000da0:	4641      	mov	r1, r8
 8000da2:	008a      	lsls	r2, r1, #2
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	4622      	mov	r2, r4
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	460b      	mov	r3, r1
 8000db2:	462a      	mov	r2, r5
 8000db4:	eb42 0303 	adc.w	r3, r2, r3
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	008b      	lsls	r3, r1, #2
 8000dca:	4641      	mov	r1, r8
 8000dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000dd0:	4641      	mov	r1, r8
 8000dd2:	008a      	lsls	r2, r1, #2
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4622      	mov	r2, r4
 8000ddc:	189b      	adds	r3, r3, r2
 8000dde:	673b      	str	r3, [r7, #112]	@ 0x70
 8000de0:	462b      	mov	r3, r5
 8000de2:	460a      	mov	r2, r1
 8000de4:	eb42 0303 	adc.w	r3, r2, r3
 8000de8:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dea:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000dee:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000df2:	f7ff f9ef 	bl	80001d4 <__aeabi_ldivmod>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e02:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	17da      	asrs	r2, r3, #31
 8000e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000e0e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	f04f 0100 	mov.w	r1, #0
 8000e1a:	0b50      	lsrs	r0, r2, #13
 8000e1c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e20:	1359      	asrs	r1, r3, #13
 8000e22:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000e26:	462b      	mov	r3, r5
 8000e28:	fb00 f203 	mul.w	r2, r0, r3
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	fb03 f301 	mul.w	r3, r3, r1
 8000e32:	4413      	add	r3, r2
 8000e34:	4622      	mov	r2, r4
 8000e36:	fba2 1200 	umull	r1, r2, r2, r0
 8000e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000e3e:	460a      	mov	r2, r1
 8000e40:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000e44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000e48:	4413      	add	r3, r2
 8000e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000e4e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	f04f 0100 	mov.w	r1, #0
 8000e5a:	0b50      	lsrs	r0, r2, #13
 8000e5c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e60:	1359      	asrs	r1, r3, #13
 8000e62:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e66:	462b      	mov	r3, r5
 8000e68:	fb00 f203 	mul.w	r2, r0, r3
 8000e6c:	4623      	mov	r3, r4
 8000e6e:	fb03 f301 	mul.w	r3, r3, r1
 8000e72:	4413      	add	r3, r2
 8000e74:	4622      	mov	r2, r4
 8000e76:	fba2 1200 	umull	r1, r2, r2, r0
 8000e7a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e7e:	460a      	mov	r2, r1
 8000e80:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e84:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e88:	4413      	add	r3, r2
 8000e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	0e4a      	lsrs	r2, r1, #25
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000ea4:	4629      	mov	r1, r5
 8000ea6:	164b      	asrs	r3, r1, #25
 8000ea8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000eb0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	17da      	asrs	r2, r3, #31
 8000eb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8000eba:	667a      	str	r2, [r7, #100]	@ 0x64
 8000ebc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ec0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000ec4:	462a      	mov	r2, r5
 8000ec6:	fb02 f203 	mul.w	r2, r2, r3
 8000eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ece:	4621      	mov	r1, r4
 8000ed0:	fb01 f303 	mul.w	r3, r1, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000eda:	4621      	mov	r1, r4
 8000edc:	fba2 1201 	umull	r1, r2, r2, r1
 8000ee0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000eea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000eee:	4413      	add	r3, r2
 8000ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000f00:	4621      	mov	r1, r4
 8000f02:	0cca      	lsrs	r2, r1, #19
 8000f04:	4629      	mov	r1, r5
 8000f06:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	14cb      	asrs	r3, r1, #19
 8000f0e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000f12:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8000f16:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000f1a:	1884      	adds	r4, r0, r2
 8000f1c:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000f1e:	eb41 0303 	adc.w	r3, r1, r3
 8000f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f28:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	1889      	adds	r1, r1, r2
 8000f30:	6539      	str	r1, [r7, #80]	@ 0x50
 8000f32:	4629      	mov	r1, r5
 8000f34:	eb43 0101 	adc.w	r1, r3, r1
 8000f38:	6579      	str	r1, [r7, #84]	@ 0x54
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	f04f 0100 	mov.w	r1, #0
 8000f42:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000f46:	4623      	mov	r3, r4
 8000f48:	0a18      	lsrs	r0, r3, #8
 8000f4a:	462b      	mov	r3, r5
 8000f4c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f50:	462b      	mov	r3, r5
 8000f52:	1219      	asrs	r1, r3, #8
 8000f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f58:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	17da      	asrs	r2, r3, #31
 8000f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f62:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f70:	464c      	mov	r4, r9
 8000f72:	0123      	lsls	r3, r4, #4
 8000f74:	4644      	mov	r4, r8
 8000f76:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f7a:	4644      	mov	r4, r8
 8000f7c:	0122      	lsls	r2, r4, #4
 8000f7e:	1884      	adds	r4, r0, r2
 8000f80:	603c      	str	r4, [r7, #0]
 8000f82:	eb41 0303 	adc.w	r3, r1, r3
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f8c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8000f90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000fa0 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8000fb2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	039a      	lsls	r2, r3, #14
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000fbe:	051b      	lsls	r3, r3, #20
 8000fc0:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fb01 f303 	mul.w	r3, r1, r3
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fd6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8000fde:	4611      	mov	r1, r2
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	fb01 f202 	mul.w	r2, r1, r2
 8000fe6:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	7f09      	ldrb	r1, [r1, #28]
 8000fec:	4608      	mov	r0, r1
 8000fee:	6979      	ldr	r1, [r7, #20]
 8000ff0:	fb00 f101 	mul.w	r1, r0, r1
 8000ff4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000ff6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000ffa:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000ffe:	1292      	asrs	r2, r2, #10
 8001000:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001004:	68f9      	ldr	r1, [r7, #12]
 8001006:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800100a:	fb01 f202 	mul.w	r2, r1, r2
 800100e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001012:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	13db      	asrs	r3, r3, #15
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	13d2      	asrs	r2, r2, #15
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	7e12      	ldrb	r2, [r2, #24]
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800103e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001046:	bfa8      	it	ge
 8001048:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800104c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	131b      	asrs	r3, r3, #12
}
 8001052:	4618      	mov	r0, r3
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b08c      	sub	sp, #48	@ 0x30
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001072:	2b60      	cmp	r3, #96	@ 0x60
 8001074:	d007      	beq.n	8001086 <bmp280_read_fixed+0x28>
		if (humidity)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <bmp280_read_fixed+0x32>
 800108c:	2308      	movs	r3, #8
 800108e:	e000      	b.n	8001092 <bmp280_read_fixed+0x34>
 8001090:	2306      	movs	r3, #6
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f107 0218 	add.w	r2, r7, #24
 800109c:	21f7      	movs	r1, #247	@ 0xf7
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff faab 	bl	80005fa <read_data>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <bmp280_read_fixed+0x50>
		return false;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e038      	b.n	8001120 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80010ae:	7e3b      	ldrb	r3, [r7, #24]
 80010b0:	031a      	lsls	r2, r3, #12
 80010b2:	7e7b      	ldrb	r3, [r7, #25]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4313      	orrs	r3, r2
 80010b8:	7eba      	ldrb	r2, [r7, #26]
 80010ba:	0912      	lsrs	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	4313      	orrs	r3, r2
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80010c2:	7efb      	ldrb	r3, [r7, #27]
 80010c4:	031a      	lsls	r2, r3, #12
 80010c6:	7f3b      	ldrb	r3, [r7, #28]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4313      	orrs	r3, r2
 80010cc:	7f7a      	ldrb	r2, [r7, #29]
 80010ce:	0912      	lsrs	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	4313      	orrs	r3, r2
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	461a      	mov	r2, r3
 80010dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff fc67 	bl	80009b2 <compensate_temperature>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	461a      	mov	r2, r3
 80010ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fc97 	bl	8000a24 <compensate_pressure>
 80010f6:	4602      	mov	r2, r0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00d      	beq.n	800111e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001102:	7fbb      	ldrb	r3, [r7, #30]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	7ffa      	ldrb	r2, [r7, #31]
 8001108:	4313      	orrs	r3, r2
 800110a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	461a      	mov	r2, r3
 8001110:	6a39      	ldr	r1, [r7, #32]
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff ff44 	bl	8000fa0 <compensate_humidity>
 8001118:	4602      	mov	r2, r0
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	601a      	str	r2, [r3, #0]
	}

	return true;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3730      	adds	r7, #48	@ 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <bmp280_read_float+0x1a>
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	e000      	b.n	8001144 <bmp280_read_float+0x1c>
 8001142:	2300      	movs	r3, #0
 8001144:	f107 0218 	add.w	r2, r7, #24
 8001148:	f107 011c 	add.w	r1, r7, #28
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff ff86 	bl	800105e <bmp280_read_fixed>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d028      	beq.n	80011aa <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80011b4 <bmp280_read_float+0x8c>
 8001166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800117a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80011b8 <bmp280_read_float+0x90>
 800117e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001198:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80011bc <bmp280_read_float+0x94>
 800119c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <bmp280_read_float+0x84>
	}

	return false;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	42c80000 	.word	0x42c80000
 80011b8:	43800000 	.word	0x43800000
 80011bc:	44800000 	.word	0x44800000

080011c0 <QMC_init>:
#include"QMC5883/QMC5883.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2211      	movs	r2, #17
 80011d8:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 80011da:	2301      	movs	r3, #1
 80011dc:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80011e8:	d107      	bne.n	80011fa <QMC_init+0x3a>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	f043 030c 	orr.w	r3, r3, #12
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	711a      	strb	r2, [r3, #4]
 80011f8:	e024      	b.n	8001244 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b64      	cmp	r3, #100	@ 0x64
 80011fe:	d107      	bne.n	8001210 <QMC_init+0x50>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	711a      	strb	r2, [r3, #4]
 800120e:	e019      	b.n	8001244 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b32      	cmp	r3, #50	@ 0x32
 8001214:	d107      	bne.n	8001226 <QMC_init+0x66>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	791b      	ldrb	r3, [r3, #4]
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	b2da      	uxtb	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	711a      	strb	r2, [r3, #4]
 8001224:	e00e      	b.n	8001244 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b0a      	cmp	r3, #10
 800122a:	d104      	bne.n	8001236 <QMC_init+0x76>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	791a      	ldrb	r2, [r3, #4]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	711a      	strb	r2, [r3, #4]
 8001234:	e006      	b.n	8001244 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	791b      	ldrb	r3, [r3, #4]
 800123a:	f043 030c 	orr.w	r3, r3, #12
 800123e:	b2da      	uxtb	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	2364      	movs	r3, #100	@ 0x64
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2301      	movs	r3, #1
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	220b      	movs	r2, #11
 800125a:	211a      	movs	r1, #26
 800125c:	f001 fbb6 	bl	80029cc <HAL_I2C_Mem_Write>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <QMC_init+0xaa>
		return 1;
 8001266:	2301      	movs	r3, #1
 8001268:	e014      	b.n	8001294 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	2364      	movs	r3, #100	@ 0x64
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	3301      	adds	r3, #1
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	2209      	movs	r2, #9
 8001282:	211a      	movs	r1, #26
 8001284:	f001 fba2 	bl	80029cc <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <QMC_init+0xd2>
		return 1;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <QMC_init+0xd4>

	return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0b8      	sub	sp, #224	@ 0xe0
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a2:	f000 fe77 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a6:	f000 f86f 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012aa:	f000 fa5f 	bl	800176c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ae:	f000 f8d5 	bl	800145c <MX_I2C1_Init>
  MX_TIM3_Init();
 80012b2:	f000 f997 	bl	80015e4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012b6:	f000 f8ff 	bl	80014b8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80012ba:	f000 fa2d 	bl	8001718 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  QMC_init(&pusula_sensor, &hi2c1, 200);
 80012be:	22c8      	movs	r2, #200	@ 0xc8
 80012c0:	4928      	ldr	r1, [pc, #160]	@ (8001364 <main+0xc8>)
 80012c2:	4829      	ldr	r0, [pc, #164]	@ (8001368 <main+0xcc>)
 80012c4:	f7ff ff7c 	bl	80011c0 <QMC_init>
  BMP280_HandleTypedef bmp280;
  bmp280_init_default_params(&bmp280.params);
 80012c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012cc:	332c      	adds	r3, #44	@ 0x2c
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f948 	bl	8000564 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80012d4:	2377      	movs	r3, #119	@ 0x77
 80012d6:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
  bmp280.i2c = &hi2c1;
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <main+0xc8>)
 80012dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80012e0:	e003      	b.n	80012ea <main+0x4e>
	  HAL_Delay(2000);
 80012e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012e6:	f000 fec7 	bl	8002078 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80012ea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012ee:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80012f2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff faad 	bl	8000858 <bmp280_init>
 80012fe:	4603      	mov	r3, r0
 8001300:	f083 0301 	eor.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1eb      	bne.n	80012e2 <main+0x46>
  }


  while(1){

	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800130a:	e003      	b.n	8001314 <main+0x78>
		  HAL_Delay(2000);
 800130c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001310:	f000 feb2 	bl	8002078 <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001314:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <main+0xd0>)
 800131a:	4a15      	ldr	r2, [pc, #84]	@ (8001370 <main+0xd4>)
 800131c:	4915      	ldr	r1, [pc, #84]	@ (8001374 <main+0xd8>)
 800131e:	f7ff ff03 	bl	8001128 <bmp280_read_float>
 8001322:	4603      	mov	r3, r0
 8001324:	f083 0301 	eor.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ee      	bne.n	800130c <main+0x70>
	  }
	  altitude = 44330.0f * (1.0f - powf(pressure / 101325 , 1.0f / 5.255f));
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <main+0xd4>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001378 <main+0xdc>
 8001338:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800133c:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 800137c <main+0xe0>
 8001340:	eeb0 0a47 	vmov.f32	s0, s14
 8001344:	f004 feec 	bl	8006120 <powf>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001354:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001380 <main+0xe4>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <main+0xe8>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001362:	e7d7      	b.n	8001314 <main+0x78>
 8001364:	20000078 	.word	0x20000078
 8001368:	2000021c 	.word	0x2000021c
 800136c:	200001ac 	.word	0x200001ac
 8001370:	200001a8 	.word	0x200001a8
 8001374:	200001a4 	.word	0x200001a4
 8001378:	47c5e680 	.word	0x47c5e680
 800137c:	3e42dcae 	.word	0x3e42dcae
 8001380:	472d2a00 	.word	0x472d2a00
 8001384:	200001b0 	.word	0x200001b0

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	@ 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	@ 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f004 fe90 	bl	80060bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <SystemClock_Config+0xcc>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a27      	ldr	r2, [pc, #156]	@ (8001454 <SystemClock_Config+0xcc>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <SystemClock_Config+0xcc>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <SystemClock_Config+0xd0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013d4:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <SystemClock_Config+0xd0>)
 80013d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <SystemClock_Config+0xd0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001400:	2354      	movs	r3, #84	@ 0x54
 8001402:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001408:	2304      	movs	r3, #4
 800140a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f002 f9bb 	bl	800378c <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800141c:	f000 fb80 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2302      	movs	r3, #2
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001430:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2102      	movs	r1, #2
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fc1d 	bl	8003c7c <HAL_RCC_ClockConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001448:	f000 fb6a 	bl	8001b20 <Error_Handler>
  }
}
 800144c:	bf00      	nop
 800144e:	3750      	adds	r7, #80	@ 0x50
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000

0800145c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <MX_I2C1_Init+0x54>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001468:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <MX_I2C1_Init+0x58>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_I2C1_Init+0x50>)
 800147a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <MX_I2C1_Init+0x50>)
 800149a:	f001 f953 	bl	8002744 <HAL_I2C_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a4:	f000 fb3c 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000078 	.word	0x20000078
 80014b0:	40005400 	.word	0x40005400
 80014b4:	00061a80 	.word	0x00061a80

080014b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e2:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <MX_TIM1_Init+0x124>)
 80014e4:	4a3e      	ldr	r2, [pc, #248]	@ (80015e0 <MX_TIM1_Init+0x128>)
 80014e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80014e8:	4b3c      	ldr	r3, [pc, #240]	@ (80015dc <MX_TIM1_Init+0x124>)
 80014ea:	2253      	movs	r2, #83	@ 0x53
 80014ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <MX_TIM1_Init+0x124>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80014f4:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <MX_TIM1_Init+0x124>)
 80014f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <MX_TIM1_Init+0x124>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001502:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <MX_TIM1_Init+0x124>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <MX_TIM1_Init+0x124>)
 800150a:	2280      	movs	r2, #128	@ 0x80
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800150e:	4833      	ldr	r0, [pc, #204]	@ (80015dc <MX_TIM1_Init+0x124>)
 8001510:	f002 fd94 	bl	800403c <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800151a:	f000 fb01 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4619      	mov	r1, r3
 800152a:	482c      	ldr	r0, [pc, #176]	@ (80015dc <MX_TIM1_Init+0x124>)
 800152c:	f003 f8d6 	bl	80046dc <HAL_TIM_ConfigClockSource>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001536:	f000 faf3 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800153a:	4828      	ldr	r0, [pc, #160]	@ (80015dc <MX_TIM1_Init+0x124>)
 800153c:	f002 fe26 	bl	800418c <HAL_TIM_IC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001546:	f000 faeb 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	4820      	ldr	r0, [pc, #128]	@ (80015dc <MX_TIM1_Init+0x124>)
 800155a:	f003 fdc3 	bl	80050e4 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001564:	f000 fadc 	bl	8001b20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001568:	230a      	movs	r3, #10
 800156a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4817      	ldr	r0, [pc, #92]	@ (80015dc <MX_TIM1_Init+0x124>)
 8001580:	f002 ff4d 	bl	800441e <HAL_TIM_IC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800158a:	f000 fac9 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	2204      	movs	r2, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_TIM1_Init+0x124>)
 8001596:	f002 ff42 	bl	800441e <HAL_TIM_IC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80015a0:	f000 fabe 	bl	8001b20 <Error_Handler>
  }
  sConfigIC.ICFilter = 1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	2208      	movs	r2, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	480b      	ldr	r0, [pc, #44]	@ (80015dc <MX_TIM1_Init+0x124>)
 80015b0:	f002 ff35 	bl	800441e <HAL_TIM_IC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80015ba:	f000 fab1 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	220c      	movs	r2, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_TIM1_Init+0x124>)
 80015c6:	f002 ff2a 	bl	800441e <HAL_TIM_IC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80015d0:	f000 faa6 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200000cc 	.word	0x200000cc
 80015e0:	40010000 	.word	0x40010000

080015e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	@ 0x38
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001614:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001616:	4a3f      	ldr	r2, [pc, #252]	@ (8001714 <MX_TIM3_Init+0x130>)
 8001618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <MX_TIM3_Init+0x12c>)
 800161c:	2253      	movs	r2, #83	@ 0x53
 800161e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b3b      	ldr	r3, [pc, #236]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999 ;
 8001626:	4b3a      	ldr	r3, [pc, #232]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001628:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800162c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001634:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163a:	4835      	ldr	r0, [pc, #212]	@ (8001710 <MX_TIM3_Init+0x12c>)
 800163c:	f002 fcfe 	bl	800403c <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001646:	f000 fa6b 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001654:	4619      	mov	r1, r3
 8001656:	482e      	ldr	r0, [pc, #184]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001658:	f003 f840 	bl	80046dc <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001662:	f000 fa5d 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001666:	482a      	ldr	r0, [pc, #168]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001668:	f002 fd37 	bl	80040da <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001672:	f000 fa55 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4619      	mov	r1, r3
 8001684:	4822      	ldr	r0, [pc, #136]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001686:	f003 fd2d 	bl	80050e4 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001690:	f000 fa46 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001694:	2360      	movs	r3, #96	@ 0x60
 8001696:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001698:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4818      	ldr	r0, [pc, #96]	@ (8001710 <MX_TIM3_Init+0x12c>)
 80016ae:	f002 ff53 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016b8:	f000 fa32 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2204      	movs	r2, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4812      	ldr	r0, [pc, #72]	@ (8001710 <MX_TIM3_Init+0x12c>)
 80016c8:	f002 ff46 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80016d2:	f000 fa25 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2208      	movs	r2, #8
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <MX_TIM3_Init+0x12c>)
 80016de:	f002 ff3b 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80016e8:	f000 fa1a 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	220c      	movs	r2, #12
 80016f0:	4619      	mov	r1, r3
 80016f2:	4807      	ldr	r0, [pc, #28]	@ (8001710 <MX_TIM3_Init+0x12c>)
 80016f4:	f002 ff30 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80016fe:	f000 fa0f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001702:	4803      	ldr	r0, [pc, #12]	@ (8001710 <MX_TIM3_Init+0x12c>)
 8001704:	f000 fae8 	bl	8001cd8 <HAL_TIM_MspPostInit>

}
 8001708:	bf00      	nop
 800170a:	3738      	adds	r7, #56	@ 0x38
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000114 	.word	0x20000114
 8001714:	40000400 	.word	0x40000400

08001718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <MX_USART2_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_USART2_UART_Init+0x4c>)
 8001750:	f003 fd4a 	bl	80051e8 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f000 f9e1 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000015c 	.word	0x2000015c
 8001768:	40004400 	.word	0x40004400

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_GPIO_Init+0x80>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a18      	ldr	r2, [pc, #96]	@ (80017ec <MX_GPIO_Init+0x80>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_GPIO_Init+0x80>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_GPIO_Init+0x80>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a11      	ldr	r2, [pc, #68]	@ (80017ec <MX_GPIO_Init+0x80>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_GPIO_Init+0x80>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017c0:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <MX_GPIO_Init+0x84>)
 80017c2:	f000 ffa5 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <MX_GPIO_Init+0x84>)
 80017e0:	f000 fe12 	bl	8002408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020400 	.word	0x40020400

080017f4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7f1b      	ldrb	r3, [r3, #28]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d150      	bne.n	80018a6 <HAL_TIM_IC_CaptureCallback+0xb2>
	{
		if (is_first_captured_ch1==0) // if the first value is not captured
 8001804:	4b91      	ldr	r3, [pc, #580]	@ (8001a4c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1_ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f003 f82c 	bl	800486c <HAL_TIM_ReadCapturedValue>
 8001814:	4603      	mov	r3, r0
 8001816:	4a8e      	ldr	r2, [pc, #568]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001818:	6013      	str	r3, [r2, #0]
			is_first_captured_ch1 = 1;  // set the first captured as true
 800181a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a4c <HAL_TIM_IC_CaptureCallback+0x258>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e041      	b.n	80018a6 <HAL_TIM_IC_CaptureCallback+0xb2>
		}

		else   // if the first is already captured
		{
			IC_Val2_ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001822:	2100      	movs	r1, #0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f003 f821 	bl	800486c <HAL_TIM_ReadCapturedValue>
 800182a:	4603      	mov	r3, r0
 800182c:	4a89      	ldr	r2, [pc, #548]	@ (8001a54 <HAL_TIM_IC_CaptureCallback+0x260>)
 800182e:	6013      	str	r3, [r2, #0]

			if (IC_Val2_ch1 > IC_Val1_ch1)
 8001830:	4b88      	ldr	r3, [pc, #544]	@ (8001a54 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b86      	ldr	r3, [pc, #536]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d907      	bls.n	800184c <HAL_TIM_IC_CaptureCallback+0x58>
			{
				difference_ch1 = IC_Val2_ch1-IC_Val1_ch1;
 800183c:	4b85      	ldr	r3, [pc, #532]	@ (8001a54 <HAL_TIM_IC_CaptureCallback+0x260>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b83      	ldr	r3, [pc, #524]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	4a84      	ldr	r2, [pc, #528]	@ (8001a58 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00f      	b.n	800186c <HAL_TIM_IC_CaptureCallback+0x78>
			}

			else if (IC_Val1_ch1 > IC_Val2_ch1)
 800184c:	4b80      	ldr	r3, [pc, #512]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b80      	ldr	r3, [pc, #512]	@ (8001a54 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d909      	bls.n	800186c <HAL_TIM_IC_CaptureCallback+0x78>
			{
				difference_ch1 = IC_Val2_ch1 - (IC_Val1_ch1 - AUTORELOAD);
 8001858:	4b7e      	ldr	r3, [pc, #504]	@ (8001a54 <HAL_TIM_IC_CaptureCallback+0x260>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8001866:	3320      	adds	r3, #32
 8001868:	4a7b      	ldr	r2, [pc, #492]	@ (8001a58 <HAL_TIM_IC_CaptureCallback+0x264>)
 800186a:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 800186c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a5c <HAL_TIM_IC_CaptureCallback+0x268>)
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
			float mFactor = 1000000/refClock;
 8001870:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001a60 <HAL_TIM_IC_CaptureCallback+0x26c>
 8001874:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	edc7 7a08 	vstr	s15, [r7, #32]

			usWidth_ch1 = difference_ch1*mFactor;
 8001880:	4b75      	ldr	r3, [pc, #468]	@ (8001a58 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800188c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001898:	ee17 2a90 	vmov	r2, s15
 800189c:	4b71      	ldr	r3, [pc, #452]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0x270>)
 800189e:	601a      	str	r2, [r3, #0]
			is_first_captured_ch1 = 0; // set it back to false
 80018a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <HAL_TIM_IC_CaptureCallback+0x258>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
		}
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7f1b      	ldrb	r3, [r3, #28]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d150      	bne.n	8001950 <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			if (is_first_captured_ch2==0) // if the first value is not captured
 80018ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10a      	bne.n	80018cc <HAL_TIM_IC_CaptureCallback+0xd8>
			{
				IC_Val1_ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80018b6:	2104      	movs	r1, #4
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f002 ffd7 	bl	800486c <HAL_TIM_ReadCapturedValue>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x278>)
 80018c2:	6013      	str	r3, [r2, #0]
				is_first_captured_ch2 = 1;  // set the first captured as true
 80018c4:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x274>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e041      	b.n	8001950 <HAL_TIM_IC_CaptureCallback+0x15c>
			}

			else   // if the first is already captured
			{
				IC_Val2_ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80018cc:	2104      	movs	r1, #4
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f002 ffcc 	bl	800486c <HAL_TIM_ReadCapturedValue>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a66      	ldr	r2, [pc, #408]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80018d8:	6013      	str	r3, [r2, #0]

				if (IC_Val2_ch2 > IC_Val1_ch2)
 80018da:	4b65      	ldr	r3, [pc, #404]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x278>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d907      	bls.n	80018f6 <HAL_TIM_IC_CaptureCallback+0x102>
				{
					difference_ch2 = IC_Val2_ch2-IC_Val1_ch2;
 80018e6:	4b62      	ldr	r3, [pc, #392]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b60      	ldr	r3, [pc, #384]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x278>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a60      	ldr	r2, [pc, #384]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x280>)
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e00f      	b.n	8001916 <HAL_TIM_IC_CaptureCallback+0x122>
				}

				else if (IC_Val1_ch2 > IC_Val2_ch2)
 80018f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x278>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d909      	bls.n	8001916 <HAL_TIM_IC_CaptureCallback+0x122>
				{
					difference_ch2 =  IC_Val2_ch2  - (IC_Val1_ch2 - AUTORELOAD);
 8001902:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b59      	ldr	r3, [pc, #356]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x278>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8001910:	3320      	adds	r3, #32
 8001912:	4a58      	ldr	r2, [pc, #352]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001914:	6013      	str	r3, [r2, #0]
				}

				float refClock = TIMCLOCK/(PRESCALAR);
 8001916:	4b51      	ldr	r3, [pc, #324]	@ (8001a5c <HAL_TIM_IC_CaptureCallback+0x268>)
 8001918:	61fb      	str	r3, [r7, #28]
				float mFactor = 1000000/refClock;
 800191a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001a60 <HAL_TIM_IC_CaptureCallback+0x26c>
 800191e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001926:	edc7 7a06 	vstr	s15, [r7, #24]

				usWidth_ch2 = difference_ch2*mFactor;
 800192a:	4b52      	ldr	r3, [pc, #328]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001936:	edd7 7a06 	vldr	s15, [r7, #24]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001942:	ee17 2a90 	vmov	r2, s15
 8001946:	4b4c      	ldr	r3, [pc, #304]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001948:	601a      	str	r2, [r3, #0]
				is_first_captured_ch2 = 0; // set it back to false
 800194a:	4b47      	ldr	r3, [pc, #284]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x274>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
			}
		}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7f1b      	ldrb	r3, [r3, #28]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d150      	bne.n	80019fa <HAL_TIM_IC_CaptureCallback+0x206>
		{
			if (is_first_captured_ch3 ==0) // if the first value is not captured
 8001958:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x288>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10a      	bne.n	8001976 <HAL_TIM_IC_CaptureCallback+0x182>
			{
				IC_Val1_ch3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8001960:	2108      	movs	r1, #8
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f002 ff82 	bl	800486c <HAL_TIM_ReadCapturedValue>
 8001968:	4603      	mov	r3, r0
 800196a:	4a45      	ldr	r2, [pc, #276]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800196c:	6013      	str	r3, [r2, #0]
				is_first_captured_ch3 = 1;  // set the first captured as true
 800196e:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x288>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e041      	b.n	80019fa <HAL_TIM_IC_CaptureCallback+0x206>
			}

			else   // if the first is already captured
			{
				IC_Val2_ch3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8001976:	2108      	movs	r1, #8
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f002 ff77 	bl	800486c <HAL_TIM_ReadCapturedValue>
 800197e:	4603      	mov	r3, r0
 8001980:	4a40      	ldr	r2, [pc, #256]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001982:	6013      	str	r3, [r2, #0]

				if (IC_Val2_ch3 > IC_Val1_ch3)
 8001984:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d907      	bls.n	80019a0 <HAL_TIM_IC_CaptureCallback+0x1ac>
				{
					difference_ch3 = IC_Val2_ch3-IC_Val1_ch3;
 8001990:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a88 <HAL_TIM_IC_CaptureCallback+0x294>)
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00f      	b.n	80019c0 <HAL_TIM_IC_CaptureCallback+0x1cc>
				}

				else if (IC_Val1_ch3 > IC_Val2_ch3)
 80019a0:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x290>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d909      	bls.n	80019c0 <HAL_TIM_IC_CaptureCallback+0x1cc>
				{
					difference_ch3 =  IC_Val2_ch3  - (IC_Val1_ch3 - AUTORELOAD);
 80019ac:	4b35      	ldr	r3, [pc, #212]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x290>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80019ba:	3320      	adds	r3, #32
 80019bc:	4a32      	ldr	r2, [pc, #200]	@ (8001a88 <HAL_TIM_IC_CaptureCallback+0x294>)
 80019be:	6013      	str	r3, [r2, #0]
				}

				float refClock = TIMCLOCK/(PRESCALAR);
 80019c0:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <HAL_TIM_IC_CaptureCallback+0x268>)
 80019c2:	617b      	str	r3, [r7, #20]
				float mFactor = 1000000/refClock;
 80019c4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001a60 <HAL_TIM_IC_CaptureCallback+0x26c>
 80019c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d0:	edc7 7a04 	vstr	s15, [r7, #16]

				usWidth_ch3 = difference_ch3*mFactor;
 80019d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a88 <HAL_TIM_IC_CaptureCallback+0x294>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ec:	ee17 2a90 	vmov	r2, s15
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <HAL_TIM_IC_CaptureCallback+0x298>)
 80019f2:	601a      	str	r2, [r3, #0]
				is_first_captured_ch3 = 0; // set it back to false
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x288>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
			}
		}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7f1b      	ldrb	r3, [r3, #28]
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d17b      	bne.n	8001afa <HAL_TIM_IC_CaptureCallback+0x306>
	{
		if (is_first_captured_ch4 ==0) // if the first value is not captured
 8001a02:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <HAL_TIM_IC_CaptureCallback+0x22c>
		{
			IC_Val1_ch4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8001a0a:	210c      	movs	r1, #12
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f002 ff2d 	bl	800486c <HAL_TIM_ReadCapturedValue>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001a16:	6013      	str	r3, [r2, #0]
			is_first_captured_ch4 = 1;  // set the first captured as true
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

			usWidth_ch4 = difference_ch4*mFactor;
			is_first_captured_ch4 = 0; // set it back to false
		}
	}
}
 8001a1e:	e06c      	b.n	8001afa <HAL_TIM_IC_CaptureCallback+0x306>
			IC_Val2_ch4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8001a20:	210c      	movs	r1, #12
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f002 ff22 	bl	800486c <HAL_TIM_ReadCapturedValue>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a98 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001a2c:	6013      	str	r3, [r2, #0]
			if (IC_Val2_ch4 > IC_Val1_ch4)
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d932      	bls.n	8001aa0 <HAL_TIM_IC_CaptureCallback+0x2ac>
				difference_ch4 = IC_Val2_ch4-IC_Val1_ch4;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a15      	ldr	r2, [pc, #84]	@ (8001a9c <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e03a      	b.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x2cc>
 8001a4a:	bf00      	nop
 8001a4c:	200001c4 	.word	0x200001c4
 8001a50:	200001b8 	.word	0x200001b8
 8001a54:	200001bc 	.word	0x200001bc
 8001a58:	200001c0 	.word	0x200001c0
 8001a5c:	49771500 	.word	0x49771500
 8001a60:	49742400 	.word	0x49742400
 8001a64:	200001b4 	.word	0x200001b4
 8001a68:	200001d8 	.word	0x200001d8
 8001a6c:	200001cc 	.word	0x200001cc
 8001a70:	200001d0 	.word	0x200001d0
 8001a74:	200001d4 	.word	0x200001d4
 8001a78:	200001c8 	.word	0x200001c8
 8001a7c:	200001ec 	.word	0x200001ec
 8001a80:	200001e0 	.word	0x200001e0
 8001a84:	200001e4 	.word	0x200001e4
 8001a88:	200001e8 	.word	0x200001e8
 8001a8c:	200001dc 	.word	0x200001dc
 8001a90:	20000200 	.word	0x20000200
 8001a94:	200001f4 	.word	0x200001f4
 8001a98:	200001f8 	.word	0x200001f8
 8001a9c:	200001fc 	.word	0x200001fc
			else if (IC_Val1_ch4 > IC_Val2_ch4)
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d909      	bls.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x2cc>
				difference_ch4 =  IC_Val2_ch4  - (IC_Val1_ch4 - AUTORELOAD);
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8001aba:	3320      	adds	r3, #32
 8001abc:	4a13      	ldr	r2, [pc, #76]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0x318>)
 8001abe:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001ac2:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000/refClock;
 8001ac4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001b14 <HAL_TIM_IC_CaptureCallback+0x320>
 8001ac8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad0:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth_ch4 = difference_ch4*mFactor;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0x318>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aec:	ee17 2a90 	vmov	r2, s15
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001af2:	601a      	str	r2, [r3, #0]
			is_first_captured_ch4 = 0; // set it back to false
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_TIM_IC_CaptureCallback+0x328>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200001f4 	.word	0x200001f4
 8001b08:	200001f8 	.word	0x200001f8
 8001b0c:	200001fc 	.word	0x200001fc
 8001b10:	49771500 	.word	0x49771500
 8001b14:	49742400 	.word	0x49742400
 8001b18:	200001f0 	.word	0x200001f0
 8001b1c:	20000200 	.word	0x20000200

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <Error_Handler+0x8>

08001b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b78 <HAL_MspInit+0x4c>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_MspInit+0x4c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_MspInit+0x4c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <HAL_I2C_MspInit+0x84>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d12b      	bne.n	8001bf6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <HAL_I2C_MspInit+0x88>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bba:	23c0      	movs	r3, #192	@ 0xc0
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <HAL_I2C_MspInit+0x8c>)
 8001bd6:	f000 fc17 	bl	8002408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_I2C_MspInit+0x88>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <HAL_I2C_MspInit+0x88>)
 8001be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_I2C_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	@ 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40005400 	.word	0x40005400
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020400 	.word	0x40020400

08001c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d135      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a25      	ldr	r2, [pc, #148]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a1e      	ldr	r2, [pc, #120]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c66:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4813      	ldr	r0, [pc, #76]	@ (8001cd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c84:	f000 fbc0 	bl	8002408 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	201b      	movs	r0, #27
 8001c8e:	f000 faf2 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c92:	201b      	movs	r0, #27
 8001c94:	f000 fb0b 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c98:	e012      	b.n	8001cc0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <HAL_TIM_Base_MspInit+0xc8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	@ 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a21      	ldr	r2, [pc, #132]	@ (8001d7c <HAL_TIM_MspPostInit+0xa4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d13b      	bne.n	8001d72 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_TIM_MspPostInit+0xa8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a1f      	ldr	r2, [pc, #124]	@ (8001d80 <HAL_TIM_MspPostInit+0xa8>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_TIM_MspPostInit+0xa8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_TIM_MspPostInit+0xa8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a18      	ldr	r2, [pc, #96]	@ (8001d80 <HAL_TIM_MspPostInit+0xa8>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_TIM_MspPostInit+0xa8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d32:	23c0      	movs	r3, #192	@ 0xc0
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d42:	2302      	movs	r3, #2
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <HAL_TIM_MspPostInit+0xac>)
 8001d4e:	f000 fb5b 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d52:	2303      	movs	r3, #3
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d62:	2302      	movs	r3, #2
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4806      	ldr	r0, [pc, #24]	@ (8001d88 <HAL_TIM_MspPostInit+0xb0>)
 8001d6e:	f000 fb4b 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	@ 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d133      	bne.n	8001e16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a14      	ldr	r2, [pc, #80]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de6:	230c      	movs	r3, #12
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df6:	2307      	movs	r3, #7
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <HAL_UART_MspInit+0x9c>)
 8001e02:	f000 fb01 	bl	8002408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2026      	movs	r0, #38	@ 0x26
 8001e0c:	f000 fa33 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e10:	2026      	movs	r0, #38	@ 0x26
 8001e12:	f000 fa4c 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	@ 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <NMI_Handler+0x4>

08001e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <MemManage_Handler+0x4>

08001e44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e82:	f000 f8d9 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <TIM1_CC_IRQHandler+0x10>)
 8001e92:	f002 f9d4 	bl	800423e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200000cc 	.word	0x200000cc

08001ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <USART2_IRQHandler+0x10>)
 8001ea6:	f003 fa15 	bl	80052d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000015c 	.word	0x2000015c

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <HAL_UART_RxCpltCallback>:

extern uint8_t rx_buffer[TRANSMITED_BYTES];
extern float received_values[3];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <HAL_UART_RxCpltCallback+0x44>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d113      	bne.n	8001f12 <HAL_UART_RxCpltCallback+0x3a>
    {
        memcpy(received_values, rx_buffer, TRANSMITED_BYTES);
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_UART_RxCpltCallback+0x48>)
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <HAL_UART_RxCpltCallback+0x4c>)
 8001eee:	6810      	ldr	r0, [r2, #0]
 8001ef0:	6851      	ldr	r1, [r2, #4]
 8001ef2:	6892      	ldr	r2, [r2, #8]
 8001ef4:	c307      	stmia	r3!, {r0, r1, r2}

        float p = received_values[0];
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_UART_RxCpltCallback+0x48>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	617b      	str	r3, [r7, #20]
        float i = received_values[1];
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_UART_RxCpltCallback+0x48>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        float d = received_values[2];
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_UART_RxCpltCallback+0x48>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	60fb      	str	r3, [r7, #12]

        HAL_UART_Receive_IT(huart, rx_buffer, TRANSMITED_BYTES);
 8001f08:	220c      	movs	r2, #12
 8001f0a:	4906      	ldr	r1, [pc, #24]	@ (8001f24 <HAL_UART_RxCpltCallback+0x4c>)
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f003 f9bb 	bl	8005288 <HAL_UART_Receive_IT>
    }
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40004400 	.word	0x40004400
 8001f20:	20000210 	.word	0x20000210
 8001f24:	20000204 	.word	0x20000204

08001f28 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    __NOP();
 8001f30:	bf00      	nop
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f44:	f7ff ffb6 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f48:	480c      	ldr	r0, [pc, #48]	@ (8001f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f4a:	490d      	ldr	r1, [pc, #52]	@ (8001f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f60:	4c0a      	ldr	r4, [pc, #40]	@ (8001f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f004 f8b3 	bl	80060d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7ff f993 	bl	800129c <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f84:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 8001f88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001f8c:	20000374 	.word	0x20000374

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f94f 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fdb0 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f967 	bl	80022ca <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f92f 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	@ (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000000 	.word	0x20000000
 8002030:	20000008 	.word	0x20000008
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000008 	.word	0x20000008
 800205c:	20000238 	.word	0x20000238

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000238 	.word	0x20000238

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	@ (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff feb6 	bl	8002060 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d008      	beq.n	8002314 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2280      	movs	r2, #128	@ 0x80
 8002306:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e052      	b.n	80023ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0216 	bic.w	r2, r2, #22
 8002322:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002332:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_DMA_Abort+0x62>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0208 	bic.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002364:	e013      	b.n	800238e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002366:	f7ff fe7b 	bl	8002060 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b05      	cmp	r3, #5
 8002372:	d90c      	bls.n	800238e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2203      	movs	r2, #3
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e015      	b.n	80023ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e4      	bne.n	8002366 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a0:	223f      	movs	r2, #63	@ 0x3f
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e00c      	b.n	80023fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2205      	movs	r2, #5
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e159      	b.n	80026d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8148 	bne.w	80026d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a2 	beq.w	80026d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b57      	ldr	r3, [pc, #348]	@ (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a56      	ldr	r2, [pc, #344]	@ (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b54      	ldr	r3, [pc, #336]	@ (80026f0 <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a52      	ldr	r2, [pc, #328]	@ (80026f4 <HAL_GPIO_Init+0x2ec>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a49      	ldr	r2, [pc, #292]	@ (80026f8 <HAL_GPIO_Init+0x2f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x202>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <HAL_GPIO_Init+0x2f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x1fe>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a47      	ldr	r2, [pc, #284]	@ (8002700 <HAL_GPIO_Init+0x2f8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x1fa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a46      	ldr	r2, [pc, #280]	@ (8002704 <HAL_GPIO_Init+0x2fc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x1f6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a45      	ldr	r2, [pc, #276]	@ (8002708 <HAL_GPIO_Init+0x300>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x1f2>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x204>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_GPIO_Init+0x2ec>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b38      	ldr	r3, [pc, #224]	@ (800270c <HAL_GPIO_Init+0x304>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a2f      	ldr	r2, [pc, #188]	@ (800270c <HAL_GPIO_Init+0x304>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_GPIO_Init+0x304>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a24      	ldr	r2, [pc, #144]	@ (800270c <HAL_GPIO_Init+0x304>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b23      	ldr	r3, [pc, #140]	@ (800270c <HAL_GPIO_Init+0x304>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a0f      	ldr	r2, [pc, #60]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f aea2 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e12b      	b.n	80029ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fa06 	bl	8001b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	@ 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a8:	f001 fc20 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a81      	ldr	r2, [pc, #516]	@ (80029b8 <HAL_I2C_Init+0x274>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d807      	bhi.n	80027c8 <HAL_I2C_Init+0x84>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a80      	ldr	r2, [pc, #512]	@ (80029bc <HAL_I2C_Init+0x278>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e006      	b.n	80027d6 <HAL_I2C_Init+0x92>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a7d      	ldr	r2, [pc, #500]	@ (80029c0 <HAL_I2C_Init+0x27c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0e7      	b.n	80029ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a78      	ldr	r2, [pc, #480]	@ (80029c4 <HAL_I2C_Init+0x280>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0c9b      	lsrs	r3, r3, #18
 80027e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a6a      	ldr	r2, [pc, #424]	@ (80029b8 <HAL_I2C_Init+0x274>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d802      	bhi.n	8002818 <HAL_I2C_Init+0xd4>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3301      	adds	r3, #1
 8002816:	e009      	b.n	800282c <HAL_I2C_Init+0xe8>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a69      	ldr	r2, [pc, #420]	@ (80029c8 <HAL_I2C_Init+0x284>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800283e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	495c      	ldr	r1, [pc, #368]	@ (80029b8 <HAL_I2C_Init+0x274>)
 8002848:	428b      	cmp	r3, r1
 800284a:	d819      	bhi.n	8002880 <HAL_I2C_Init+0x13c>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e59      	subs	r1, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fbb1 f3f3 	udiv	r3, r1, r3
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002860:	400b      	ands	r3, r1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_I2C_Init+0x138>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1e59      	subs	r1, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fbb1 f3f3 	udiv	r3, r1, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287a:	e051      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 800287c:	2304      	movs	r3, #4
 800287e:	e04f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_I2C_Init+0x168>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e012      	b.n	80028d2 <HAL_I2C_Init+0x18e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e58      	subs	r0, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	0099      	lsls	r1, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x196>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e022      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <HAL_I2C_Init+0x1bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e58      	subs	r0, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	440b      	add	r3, r1
 80028f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	0099      	lsls	r1, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	fbb0 f3f3 	udiv	r3, r0, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	6809      	ldr	r1, [r1, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800294e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6911      	ldr	r1, [r2, #16]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	430b      	orrs	r3, r1
 8002962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	000186a0 	.word	0x000186a0
 80029bc:	001e847f 	.word	0x001e847f
 80029c0:	003d08ff 	.word	0x003d08ff
 80029c4:	431bde83 	.word	0x431bde83
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e6:	f7ff fb3b 	bl	8002060 <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	f040 80d9 	bne.w	8002bac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2319      	movs	r3, #25
 8002a00:	2201      	movs	r2, #1
 8002a02:	496d      	ldr	r1, [pc, #436]	@ (8002bb8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fc8b 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0cc      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2C_Mem_Write+0x56>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0c5      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d007      	beq.n	8002a48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2221      	movs	r2, #33	@ 0x21
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a4d      	ldr	r2, [pc, #308]	@ (8002bbc <HAL_I2C_Mem_Write+0x1f0>)
 8002a88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a8a:	88f8      	ldrh	r0, [r7, #6]
 8002a8c:	893a      	ldrh	r2, [r7, #8]
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4603      	mov	r3, r0
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fac2 	bl	8003024 <I2C_RequestMemoryWrite>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d052      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e081      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fd50 	bl	8003554 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06b      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_I2C_Mem_Write+0x180>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1aa      	bne.n	8002aaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fd43 	bl	80035e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d107      	bne.n	8002b7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e016      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	00100002 	.word	0x00100002
 8002bbc:	ffff0000 	.word	0xffff0000

08002bc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	@ 0x30
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	813b      	strh	r3, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bda:	f7ff fa41 	bl	8002060 <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 8214 	bne.w	8003016 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2319      	movs	r3, #25
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	497b      	ldr	r1, [pc, #492]	@ (8002de4 <HAL_I2C_Mem_Read+0x224>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fb91 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	e207      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x56>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e200      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d007      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2222      	movs	r2, #34	@ 0x22
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002de8 <HAL_I2C_Mem_Read+0x228>)
 8002c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c7e:	88f8      	ldrh	r0, [r7, #6]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fa5e 	bl	8003150 <I2C_RequestMemoryRead>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1bc      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d113      	bne.n	8002cce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e190      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d11b      	bne.n	8002d0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e170      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d11b      	bne.n	8002d4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	e150      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d64:	e144      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	f200 80f1 	bhi.w	8002f52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d123      	bne.n	8002dc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fc79 	bl	8003674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e145      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dbe:	e117      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d14e      	bne.n	8002e66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4906      	ldr	r1, [pc, #24]	@ (8002dec <HAL_I2C_Mem_Read+0x22c>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 faa4 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e11a      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
 8002de2:	bf00      	nop
 8002de4:	00100002 	.word	0x00100002
 8002de8:	ffff0000 	.word	0xffff0000
 8002dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e64:	e0c4      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	496c      	ldr	r1, [pc, #432]	@ (8003020 <HAL_I2C_Mem_Read+0x460>)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa55 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cb      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4955      	ldr	r1, [pc, #340]	@ (8003020 <HAL_I2C_Mem_Read+0x460>)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa27 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e09d      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f50:	e04e      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fb8c 	bl	8003674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e058      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d124      	bne.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d107      	bne.n	8002fbe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fbc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f47f aeb6 	bne.w	8002d66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3728      	adds	r7, #40	@ 0x28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	00010004 	.word	0x00010004

08003024 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800304c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2200      	movs	r2, #0
 8003056:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f960 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003074:	d103      	bne.n	800307e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e05f      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003090:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	492d      	ldr	r1, [pc, #180]	@ (800314c <I2C_RequestMemoryWrite+0x128>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f9bb 	bl	8003414 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e04c      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	6a39      	ldr	r1, [r7, #32]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fa46 	bl	8003554 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00d      	beq.n	80030ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d107      	bne.n	80030e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e02b      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f0:	893b      	ldrh	r3, [r7, #8]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	e021      	b.n	8003140 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	b29b      	uxth	r3, r3
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa20 	bl	8003554 <I2C_WaitOnTXEFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	2b04      	cmp	r3, #4
 8003120:	d107      	bne.n	8003132 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003130:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e005      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003136:	893b      	ldrh	r3, [r7, #8]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	00010002 	.word	0x00010002

08003150 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	817b      	strh	r3, [r7, #10]
 8003162:	460b      	mov	r3, r1
 8003164:	813b      	strh	r3, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003178:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003188:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	2200      	movs	r2, #0
 8003192:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f8c2 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b0:	d103      	bne.n	80031ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0aa      	b.n	8003314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031be:	897b      	ldrh	r3, [r7, #10]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	4952      	ldr	r1, [pc, #328]	@ (800331c <I2C_RequestMemoryRead+0x1cc>)
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f91d 	bl	8003414 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e097      	b.n	8003314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fc:	6a39      	ldr	r1, [r7, #32]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f9a8 	bl	8003554 <I2C_WaitOnTXEFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2b04      	cmp	r3, #4
 8003210:	d107      	bne.n	8003222 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003220:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e076      	b.n	8003314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	e021      	b.n	800327c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003238:	893b      	ldrh	r3, [r7, #8]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	b29b      	uxth	r3, r3
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f982 	bl	8003554 <I2C_WaitOnTXEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	2b04      	cmp	r3, #4
 800325c:	d107      	bne.n	800326e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e050      	b.n	8003314 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003272:	893b      	ldrh	r3, [r7, #8]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327e:	6a39      	ldr	r1, [r7, #32]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f967 	bl	8003554 <I2C_WaitOnTXEFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	2b04      	cmp	r3, #4
 8003292:	d107      	bne.n	80032a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e035      	b.n	8003314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	2200      	movs	r2, #0
 80032c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f82b 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032de:	d103      	bne.n	80032e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e013      	b.n	8003314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032ec:	897b      	ldrh	r3, [r7, #10]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	4906      	ldr	r1, [pc, #24]	@ (800331c <I2C_RequestMemoryRead+0x1cc>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f886 	bl	8003414 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	00010002 	.word	0x00010002

08003320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	e048      	b.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d044      	beq.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fe fe91 	bl	8002060 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d139      	bne.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0c1b      	lsrs	r3, r3, #16
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d10d      	bne.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x56>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	43da      	mvns	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	e00c      	b.n	8003390 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	43da      	mvns	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	429a      	cmp	r2, r3
 8003394:	d116      	bne.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e023      	b.n	800340c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10d      	bne.n	80033ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	43da      	mvns	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	e00c      	b.n	8003404 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	429a      	cmp	r2, r3
 8003408:	d093      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003422:	e071      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003432:	d123      	bne.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003442:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800344c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e067      	b.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d041      	beq.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003484:	f7fe fdec 	bl	8002060 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d136      	bne.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10c      	bne.n	80034be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e00b      	b.n	80034d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e021      	b.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10c      	bne.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	43da      	mvns	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e00b      	b.n	8003544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	43da      	mvns	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f af6d 	bne.w	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003560:	e034      	b.n	80035cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f8e3 	bl	800372e <I2C_IsAcknowledgeFailed>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e034      	b.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d028      	beq.n	80035cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fe fd71 	bl	8002060 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11d      	bne.n	80035cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359a:	2b80      	cmp	r3, #128	@ 0x80
 800359c:	d016      	beq.n	80035cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e007      	b.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d6:	2b80      	cmp	r3, #128	@ 0x80
 80035d8:	d1c3      	bne.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f0:	e034      	b.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f89b 	bl	800372e <I2C_IsAcknowledgeFailed>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e034      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d028      	beq.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fe fd29 	bl	8002060 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11d      	bne.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d016      	beq.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e007      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b04      	cmp	r3, #4
 8003668:	d1c3      	bne.n	80035f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003680:	e049      	b.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b10      	cmp	r3, #16
 800368e:	d119      	bne.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0210 	mvn.w	r2, #16
 8003698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e030      	b.n	8003726 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe fccc 	bl	8002060 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11d      	bne.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e4:	2b40      	cmp	r3, #64	@ 0x40
 80036e6:	d016      	beq.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003720:	2b40      	cmp	r3, #64	@ 0x40
 8003722:	d1ae      	bne.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003744:	d11b      	bne.n	800377e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800374e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e267      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d075      	beq.n	8003896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037aa:	4b88      	ldr	r3, [pc, #544]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d00c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b85      	ldr	r3, [pc, #532]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d112      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c2:	4b82      	ldr	r3, [pc, #520]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	4b7e      	ldr	r3, [pc, #504]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d05b      	beq.n	8003894 <HAL_RCC_OscConfig+0x108>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d157      	bne.n	8003894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e242      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f0:	d106      	bne.n	8003800 <HAL_RCC_OscConfig+0x74>
 80037f2:	4b76      	ldr	r3, [pc, #472]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a75      	ldr	r2, [pc, #468]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e01d      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 800380a:	4b70      	ldr	r3, [pc, #448]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6f      	ldr	r2, [pc, #444]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6d      	ldr	r3, [pc, #436]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6c      	ldr	r2, [pc, #432]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003824:	4b69      	ldr	r3, [pc, #420]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a65      	ldr	r2, [pc, #404]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800383a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fc0c 	bl	8002060 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe fc08 	bl	8002060 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e207      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b5b      	ldr	r3, [pc, #364]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xc0>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fbf8 	bl	8002060 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe fbf4 	bl	8002060 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	@ 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1f3      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	4b51      	ldr	r3, [pc, #324]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0xe8>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a2:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b47      	ldr	r3, [pc, #284]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ba:	4b44      	ldr	r3, [pc, #272]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	4b41      	ldr	r3, [pc, #260]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1c7      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4937      	ldr	r1, [pc, #220]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038fc:	4b34      	ldr	r3, [pc, #208]	@ (80039d0 <HAL_RCC_OscConfig+0x244>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fe fbad 	bl	8002060 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe fba9 	bl	8002060 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1a8      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4925      	ldr	r1, [pc, #148]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393e:	4b24      	ldr	r3, [pc, #144]	@ (80039d0 <HAL_RCC_OscConfig+0x244>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fb8c 	bl	8002060 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe fb88 	bl	8002060 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e187      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d036      	beq.n	80039e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <HAL_RCC_OscConfig+0x248>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fe fb6c 	bl	8002060 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe fb68 	bl	8002060 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e167      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x200>
 80039aa:	e01b      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <HAL_RCC_OscConfig+0x248>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fe fb55 	bl	8002060 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	e00e      	b.n	80039d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ba:	f7fe fb51 	bl	8002060 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d907      	bls.n	80039d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e150      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470000 	.word	0x42470000
 80039d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	4b88      	ldr	r3, [pc, #544]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ea      	bne.n	80039ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8097 	beq.w	8003b20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b81      	ldr	r3, [pc, #516]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b7d      	ldr	r3, [pc, #500]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a12:	4b7a      	ldr	r3, [pc, #488]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b77      	ldr	r3, [pc, #476]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b74      	ldr	r3, [pc, #464]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fb11 	bl	8002060 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe fb0d 	bl	8002060 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e10c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b6a      	ldr	r3, [pc, #424]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2ea>
 8003a68:	4b64      	ldr	r3, [pc, #400]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	4a63      	ldr	r2, [pc, #396]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x30c>
 8003a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a5e      	ldr	r2, [pc, #376]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a98:	4b58      	ldr	r3, [pc, #352]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a57      	ldr	r2, [pc, #348]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa4:	4b55      	ldr	r3, [pc, #340]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a54      	ldr	r2, [pc, #336]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fad2 	bl	8002060 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe face 	bl	8002060 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0cb      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad6:	4b49      	ldr	r3, [pc, #292]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x334>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fe fabc 	bl	8002060 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fe fab8 	bl	8002060 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0b5      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b02:	4b3e      	ldr	r3, [pc, #248]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ee      	bne.n	8003aec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b14:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	4a38      	ldr	r2, [pc, #224]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a1 	beq.w	8003c6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d05c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d141      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b31      	ldr	r3, [pc, #196]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe fa8c 	bl	8002060 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fe fa88 	bl	8002060 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e087      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	4b27      	ldr	r3, [pc, #156]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	491b      	ldr	r1, [pc, #108]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b94:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fa61 	bl	8002060 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fe fa5d 	bl	8002060 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e05c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb4:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x416>
 8003bc0:	e054      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fa4a 	bl	8002060 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe fa46 	bl	8002060 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x444>
 8003bee:	e03d      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e038      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d028      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d121      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0cc      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c90:	4b68      	ldr	r3, [pc, #416]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b65      	ldr	r3, [pc, #404]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a52      	ldr	r2, [pc, #328]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d044      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d119      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e067      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5a:	4b37      	ldr	r3, [pc, #220]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4934      	ldr	r1, [pc, #208]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7fe f978 	bl	8002060 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7fe f974 	bl	8002060 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d20c      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dee:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	@ (8003e3c <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe f8d8 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	080068c8 	.word	0x080068c8
 8003e40:	20000000 	.word	0x20000000
 8003e44:	20000004 	.word	0x20000004

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b090      	sub	sp, #64	@ 0x40
 8003e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e54:	2300      	movs	r3, #0
 8003e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e58:	2300      	movs	r3, #0
 8003e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e60:	4b59      	ldr	r3, [pc, #356]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00d      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x40>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	f200 80a1 	bhi.w	8003fb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x34>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7a:	e09b      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b53      	ldr	r3, [pc, #332]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003e80:	e09b      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e82:	4b53      	ldr	r3, [pc, #332]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e86:	e098      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e88:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e90:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e92:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d028      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	623b      	str	r3, [r7, #32]
 8003ea8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4b47      	ldr	r3, [pc, #284]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb4:	fb03 f201 	mul.w	r2, r3, r1
 8003eb8:	2300      	movs	r3, #0
 8003eba:	fb00 f303 	mul.w	r3, r0, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a43      	ldr	r2, [pc, #268]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec8:	460a      	mov	r2, r1
 8003eca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ece:	4413      	add	r3, r2
 8003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	61fa      	str	r2, [r7, #28]
 8003eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ede:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ee2:	f7fc f9c7 	bl	8000274 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4613      	mov	r3, r2
 8003eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eee:	e053      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef0:	4b35      	ldr	r3, [pc, #212]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	099b      	lsrs	r3, r3, #6
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	617a      	str	r2, [r7, #20]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f02:	f04f 0b00 	mov.w	fp, #0
 8003f06:	4652      	mov	r2, sl
 8003f08:	465b      	mov	r3, fp
 8003f0a:	f04f 0000 	mov.w	r0, #0
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	0159      	lsls	r1, r3, #5
 8003f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f18:	0150      	lsls	r0, r2, #5
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003f22:	eb63 090b 	sbc.w	r9, r3, fp
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003f3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	00eb      	lsls	r3, r5, #3
 8003f4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f50:	00e2      	lsls	r2, r4, #3
 8003f52:	4614      	mov	r4, r2
 8003f54:	461d      	mov	r5, r3
 8003f56:	eb14 030a 	adds.w	r3, r4, sl
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	eb45 030b 	adc.w	r3, r5, fp
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	028b      	lsls	r3, r1, #10
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f78:	4621      	mov	r1, r4
 8003f7a:	028a      	lsls	r2, r1, #10
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f82:	2200      	movs	r2, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	60fa      	str	r2, [r7, #12]
 8003f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f8c:	f7fc f972 	bl	8000274 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f98:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003fa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3740      	adds	r7, #64	@ 0x40
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	017d7840 	.word	0x017d7840

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ff0:	f7ff fff0 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0a9b      	lsrs	r3, r3, #10
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	@ (8004010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	080068d8 	.word	0x080068d8

08004014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004018:	f7ff ffdc 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	0b5b      	lsrs	r3, r3, #13
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4903      	ldr	r1, [pc, #12]	@ (8004038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40023800 	.word	0x40023800
 8004038:	080068d8 	.word	0x080068d8

0800403c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e041      	b.n	80040d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fdd2 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 fc62 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e041      	b.n	8004170 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f839 	bl	8004178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f000 fc13 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e041      	b.n	8004222 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f839 	bl	800422a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f000 fbba 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01b      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0202 	mvn.w	r2, #2
 8004272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fd fab3 	bl	80017f4 <HAL_TIM_IC_CaptureCallback>
 800428e:	e005      	b.n	800429c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb39 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fb40 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01b      	beq.n	80042ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f06f 0204 	mvn.w	r2, #4
 80042be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fd fa8d 	bl	80017f4 <HAL_TIM_IC_CaptureCallback>
 80042da:	e005      	b.n	80042e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fb13 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fb1a 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01b      	beq.n	800433a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f06f 0208 	mvn.w	r2, #8
 800430a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2204      	movs	r2, #4
 8004310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fd fa67 	bl	80017f4 <HAL_TIM_IC_CaptureCallback>
 8004326:	e005      	b.n	8004334 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 faed 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 faf4 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01b      	beq.n	8004386 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0210 	mvn.w	r2, #16
 8004356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2208      	movs	r2, #8
 800435c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fd fa41 	bl	80017f4 <HAL_TIM_IC_CaptureCallback>
 8004372:	e005      	b.n	8004380 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fac7 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 face 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0201 	mvn.w	r2, #1
 80043a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 faa5 	bl	80048f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 ff03 	bl	80051d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00c      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa9f 	bl	8004930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00c      	beq.n	8004416 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0220 	mvn.w	r2, #32
 800440e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fed5 	bl	80051c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004438:	2302      	movs	r3, #2
 800443a:	e088      	b.n	800454e <HAL_TIM_IC_ConfigChannel+0x130>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800445a:	f000 fc8b 	bl	8004d74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 020c 	bic.w	r2, r2, #12
 800446c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6999      	ldr	r1, [r3, #24]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]
 8004480:	e060      	b.n	8004544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d11c      	bne.n	80044c2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004498:	f000 fd03 	bl	8004ea2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80044aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6999      	ldr	r1, [r3, #24]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	619a      	str	r2, [r3, #24]
 80044c0:	e040      	b.n	8004544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d11b      	bne.n	8004500 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80044d8:	f000 fd50 	bl	8004f7c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 020c 	bic.w	r2, r2, #12
 80044ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69d9      	ldr	r1, [r3, #28]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	e021      	b.n	8004544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d11c      	bne.n	8004540 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004516:	f000 fd6d 	bl	8004ff4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004528:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	021a      	lsls	r2, r3, #8
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	61da      	str	r2, [r3, #28]
 800453e:	e001      	b.n	8004544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800454c:	7dfb      	ldrb	r3, [r7, #23]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004572:	2302      	movs	r3, #2
 8004574:	e0ae      	b.n	80046d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	f200 809f 	bhi.w	80046c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045c1 	.word	0x080045c1
 8004590:	080046c5 	.word	0x080046c5
 8004594:	080046c5 	.word	0x080046c5
 8004598:	080046c5 	.word	0x080046c5
 800459c:	08004601 	.word	0x08004601
 80045a0:	080046c5 	.word	0x080046c5
 80045a4:	080046c5 	.word	0x080046c5
 80045a8:	080046c5 	.word	0x080046c5
 80045ac:	08004643 	.word	0x08004643
 80045b0:	080046c5 	.word	0x080046c5
 80045b4:	080046c5 	.word	0x080046c5
 80045b8:	080046c5 	.word	0x080046c5
 80045bc:	08004683 	.word	0x08004683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fa48 	bl	8004a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0208 	orr.w	r2, r2, #8
 80045da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0204 	bic.w	r2, r2, #4
 80045ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	619a      	str	r2, [r3, #24]
      break;
 80045fe:	e064      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fa8e 	bl	8004b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800461a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6999      	ldr	r1, [r3, #24]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]
      break;
 8004640:	e043      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fad9 	bl	8004c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0208 	orr.w	r2, r2, #8
 800465c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0204 	bic.w	r2, r2, #4
 800466c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69d9      	ldr	r1, [r3, #28]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	61da      	str	r2, [r3, #28]
      break;
 8004680:	e023      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fb23 	bl	8004cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800469c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69d9      	ldr	r1, [r3, #28]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	021a      	lsls	r2, r3, #8
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	61da      	str	r2, [r3, #28]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
      break;
 80046c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_ConfigClockSource+0x1c>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0b4      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x186>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800471e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004730:	d03e      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004736:	f200 8087 	bhi.w	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473e:	f000 8086 	beq.w	800484e <HAL_TIM_ConfigClockSource+0x172>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004746:	d87f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b70      	cmp	r3, #112	@ 0x70
 800474a:	d01a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xa6>
 800474c:	2b70      	cmp	r3, #112	@ 0x70
 800474e:	d87b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b60      	cmp	r3, #96	@ 0x60
 8004752:	d050      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004754:	2b60      	cmp	r3, #96	@ 0x60
 8004756:	d877      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b50      	cmp	r3, #80	@ 0x50
 800475a:	d03c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xfa>
 800475c:	2b50      	cmp	r3, #80	@ 0x50
 800475e:	d873      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d058      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x13a>
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	d86f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b30      	cmp	r3, #48	@ 0x30
 800476a:	d064      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	2b30      	cmp	r3, #48	@ 0x30
 800476e:	d86b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d060      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b20      	cmp	r3, #32
 8004776:	d867      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05c      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b10      	cmp	r3, #16
 800477e:	d05a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004780:	e062      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	f000 fc87 	bl	80050a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	609a      	str	r2, [r3, #8]
      break;
 80047ae:	e04f      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	f000 fc70 	bl	80050a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047d2:	609a      	str	r2, [r3, #8]
      break;
 80047d4:	e03c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 fb2e 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2150      	movs	r1, #80	@ 0x50
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fc3d 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 80047f4:	e02c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fb8a 	bl	8004f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2160      	movs	r1, #96	@ 0x60
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fc2d 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004814:	e01c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004822:	461a      	mov	r2, r3
 8004824:	f000 fb0e 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2140      	movs	r1, #64	@ 0x40
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fc1d 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004834:	e00c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 fc14 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004846:	e003      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      break;
 800484c:	e000      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800484e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d831      	bhi.n	80048e4 <HAL_TIM_ReadCapturedValue+0x78>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048e5 	.word	0x080048e5
 8004890:	080048e5 	.word	0x080048e5
 8004894:	080048e5 	.word	0x080048e5
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048e5 	.word	0x080048e5
 80048a0:	080048e5 	.word	0x080048e5
 80048a4:	080048e5 	.word	0x080048e5
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048e5 	.word	0x080048e5
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	080048e5 	.word	0x080048e5
 80048b8:	080048db 	.word	0x080048db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	60fb      	str	r3, [r7, #12]

      break;
 80048c4:	e00f      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	60fb      	str	r3, [r7, #12]

      break;
 80048ce:	e00a      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d6:	60fb      	str	r3, [r7, #12]

      break;
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	60fb      	str	r3, [r7, #12]

      break;
 80048e2:	e000      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048e4:	bf00      	nop
  }

  return tmpreg;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3a      	ldr	r2, [pc, #232]	@ (8004a40 <TIM_Base_SetConfig+0xfc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a37      	ldr	r2, [pc, #220]	@ (8004a44 <TIM_Base_SetConfig+0x100>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a36      	ldr	r2, [pc, #216]	@ (8004a48 <TIM_Base_SetConfig+0x104>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a35      	ldr	r2, [pc, #212]	@ (8004a4c <TIM_Base_SetConfig+0x108>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2b      	ldr	r2, [pc, #172]	@ (8004a40 <TIM_Base_SetConfig+0xfc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01b      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d017      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a28      	ldr	r2, [pc, #160]	@ (8004a44 <TIM_Base_SetConfig+0x100>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a27      	ldr	r2, [pc, #156]	@ (8004a48 <TIM_Base_SetConfig+0x104>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00f      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a26      	ldr	r2, [pc, #152]	@ (8004a4c <TIM_Base_SetConfig+0x108>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00b      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a25      	ldr	r2, [pc, #148]	@ (8004a50 <TIM_Base_SetConfig+0x10c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a24      	ldr	r2, [pc, #144]	@ (8004a54 <TIM_Base_SetConfig+0x110>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a23      	ldr	r2, [pc, #140]	@ (8004a58 <TIM_Base_SetConfig+0x114>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d108      	bne.n	80049e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a0e      	ldr	r2, [pc, #56]	@ (8004a40 <TIM_Base_SetConfig+0xfc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]
  }
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800

08004a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f023 0201 	bic.w	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 0302 	bic.w	r3, r3, #2
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b24 <TIM_OC1_SetConfig+0xc8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10c      	bne.n	8004ad2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0308 	bic.w	r3, r3, #8
 8004abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a13      	ldr	r2, [pc, #76]	@ (8004b24 <TIM_OC1_SetConfig+0xc8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d111      	bne.n	8004afe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40010000 	.word	0x40010000

08004b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f023 0210 	bic.w	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0320 	bic.w	r3, r3, #32
 8004b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1e      	ldr	r2, [pc, #120]	@ (8004bfc <TIM_OC2_SetConfig+0xd4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10d      	bne.n	8004ba4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	@ (8004bfc <TIM_OC2_SetConfig+0xd4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d113      	bne.n	8004bd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	621a      	str	r2, [r3, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000

08004c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd0 <TIM_OC3_SetConfig+0xd0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10d      	bne.n	8004c7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	@ (8004cd0 <TIM_OC3_SetConfig+0xd0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d113      	bne.n	8004caa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	621a      	str	r2, [r3, #32]
}
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40010000 	.word	0x40010000

08004cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a10      	ldr	r2, [pc, #64]	@ (8004d70 <TIM_OC4_SetConfig+0x9c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d109      	bne.n	8004d48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	019b      	lsls	r3, r3, #6
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000

08004d74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f023 0201 	bic.w	r2, r3, #1
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4a24      	ldr	r2, [pc, #144]	@ (8004e30 <TIM_TI1_SetConfig+0xbc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <TIM_TI1_SetConfig+0x56>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da8:	d00f      	beq.n	8004dca <TIM_TI1_SetConfig+0x56>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a21      	ldr	r2, [pc, #132]	@ (8004e34 <TIM_TI1_SetConfig+0xc0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_TI1_SetConfig+0x56>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a20      	ldr	r2, [pc, #128]	@ (8004e38 <TIM_TI1_SetConfig+0xc4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_TI1_SetConfig+0x56>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e3c <TIM_TI1_SetConfig+0xc8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_TI1_SetConfig+0x56>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e40 <TIM_TI1_SetConfig+0xcc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d101      	bne.n	8004dce <TIM_TI1_SetConfig+0x5a>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <TIM_TI1_SetConfig+0x5c>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e003      	b.n	8004dee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f023 030a 	bic.w	r3, r3, #10
 8004e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f003 030a 	and.w	r3, r3, #10
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40014000 	.word	0x40014000

08004e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 030a 	bic.w	r3, r3, #10
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0210 	bic.w	r2, r3, #16
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	031b      	lsls	r3, r3, #12
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f023 0210 	bic.w	r2, r3, #16
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	031b      	lsls	r3, r3, #12
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	621a      	str	r2, [r3, #32]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f023 0303 	bic.w	r3, r3, #3
 8004fa8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005020:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005032:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	031b      	lsls	r3, r3, #12
 8005038:	b29b      	uxth	r3, r3
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005046:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	031b      	lsls	r3, r3, #12
 800504c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	f043 0307 	orr.w	r3, r3, #7
 8005090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	021a      	lsls	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e050      	b.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1c      	ldr	r2, [pc, #112]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005148:	d013      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a18      	ldr	r2, [pc, #96]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a13      	ldr	r2, [pc, #76]	@ (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10c      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40014000 	.word	0x40014000

080051c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e042      	b.n	8005280 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fc fdbc 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	@ 0x24
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800522a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fcd1 	bl	8005bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d112      	bne.n	80052c8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_UART_Receive_IT+0x26>
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e00b      	b.n	80052ca <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	461a      	mov	r2, r3
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fab0 	bl	8005824 <UART_Start_Receive_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	e000      	b.n	80052ca <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b0ba      	sub	sp, #232	@ 0xe8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_UART_IRQHandler+0x66>
 8005326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fb8f 	bl	8005a56 <UART_Receive_IT>
      return;
 8005338:	e25b      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800533a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80de 	beq.w	8005500 <HAL_UART_IRQHandler+0x22c>
 8005344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005354:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80d1 	beq.w	8005500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_UART_IRQHandler+0xae>
 800536a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	f043 0201 	orr.w	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_UART_IRQHandler+0xd2>
 800538e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	f043 0202 	orr.w	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <HAL_UART_IRQHandler+0xf6>
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	f043 0204 	orr.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <HAL_UART_IRQHandler+0x126>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	f043 0208 	orr.w	r2, r3, #8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 81f2 	beq.w	80057e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_UART_IRQHandler+0x14e>
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fb1a 	bl	8005a56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b40      	cmp	r3, #64	@ 0x40
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_UART_IRQHandler+0x17a>
 8005446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04f      	beq.n	80054ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa22 	bl	8005898 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	d141      	bne.n	80054e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800547c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800548e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800549a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1d9      	bne.n	8005462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d013      	beq.n	80054de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ba:	4a7e      	ldr	r2, [pc, #504]	@ (80056b4 <HAL_UART_IRQHandler+0x3e0>)
 80054bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fc ff7d 	bl	80023c2 <HAL_DMA_Abort_IT>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d016      	beq.n	80054fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054d8:	4610      	mov	r0, r2
 80054da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	e00e      	b.n	80054fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f98a 	bl	80057f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	e00a      	b.n	80054fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f986 	bl	80057f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e006      	b.n	80054fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f982 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054fa:	e175      	b.n	80057e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	bf00      	nop
    return;
 80054fe:	e173      	b.n	80057e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 814f 	bne.w	80057a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8148 	beq.w	80057a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8141 	beq.w	80057a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	f040 80b6 	bne.w	80056b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8145 	beq.w	80057ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800556a:	429a      	cmp	r2, r3
 800556c:	f080 813e 	bcs.w	80057ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005576:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005582:	f000 8088 	beq.w	8005696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800559c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1d9      	bne.n	8005586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e1      	bne.n	80055d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3314      	adds	r3, #20
 8005614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800561e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e3      	bne.n	800560e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005678:	65ba      	str	r2, [r7, #88]	@ 0x58
 800567a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800567e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e3      	bne.n	8005654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005690:	4618      	mov	r0, r3
 8005692:	f7fc fe26 	bl	80022e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8ad 	bl	800580c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056b2:	e09b      	b.n	80057ec <HAL_UART_IRQHandler+0x518>
 80056b4:	0800595f 	.word	0x0800595f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 808e 	beq.w	80057f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8089 	beq.w	80057f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005702:	647a      	str	r2, [r7, #68]	@ 0x44
 8005704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3314      	adds	r3, #20
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	623b      	str	r3, [r7, #32]
   return(result);
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3314      	adds	r3, #20
 8005736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800573a:	633a      	str	r2, [r7, #48]	@ 0x30
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e3      	bne.n	8005716 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	60fb      	str	r3, [r7, #12]
   return(result);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0310 	bic.w	r3, r3, #16
 8005772:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005780:	61fa      	str	r2, [r7, #28]
 8005782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	69b9      	ldr	r1, [r7, #24]
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	617b      	str	r3, [r7, #20]
   return(result);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e3      	bne.n	800575c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800579a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f833 	bl	800580c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057a6:	e023      	b.n	80057f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <HAL_UART_IRQHandler+0x4f4>
 80057b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8e0 	bl	8005986 <UART_Transmit_IT>
    return;
 80057c6:	e014      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <HAL_UART_IRQHandler+0x51e>
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f920 	bl	8005a26 <UART_EndTransmit_IT>
    return;
 80057e6:	e004      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057f0:	bf00      	nop
  }
}
 80057f2:	37e8      	adds	r7, #232	@ 0xe8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	88fa      	ldrh	r2, [r7, #6]
 8005842:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2222      	movs	r2, #34	@ 0x22
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005868:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0220 	orr.w	r2, r2, #32
 8005888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b095      	sub	sp, #84	@ 0x54
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80058c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3314      	adds	r3, #20
 80058da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e5      	bne.n	80058d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	2b01      	cmp	r3, #1
 800590e:	d119      	bne.n	8005944 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	647b      	str	r3, [r7, #68]	@ 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005930:	61ba      	str	r2, [r7, #24]
 8005932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	613b      	str	r3, [r7, #16]
   return(result);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e5      	bne.n	8005910 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005952:	bf00      	nop
 8005954:	3754      	adds	r7, #84	@ 0x54
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff ff3d 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b21      	cmp	r3, #33	@ 0x21
 8005998:	d13e      	bne.n	8005a18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a2:	d114      	bne.n	80059ce <UART_Transmit_IT+0x48>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	621a      	str	r2, [r3, #32]
 80059cc:	e008      	b.n	80059e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6211      	str	r1, [r2, #32]
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4619      	mov	r1, r3
 80059ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10f      	bne.n	8005a14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc fa6e 	bl	8001f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b08c      	sub	sp, #48	@ 0x30
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b22      	cmp	r3, #34	@ 0x22
 8005a68:	f040 80ae 	bne.w	8005bc8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a74:	d117      	bne.n	8005aa6 <UART_Receive_IT+0x50>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d113      	bne.n	8005aa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aa4:	e026      	b.n	8005af4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d007      	beq.n	8005aca <UART_Receive_IT+0x74>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <UART_Receive_IT+0x82>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	e008      	b.n	8005aea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4619      	mov	r1, r3
 8005b02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d15d      	bne.n	8005bc4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0220 	bic.w	r2, r2, #32
 8005b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d135      	bne.n	8005bba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	613b      	str	r3, [r7, #16]
   return(result);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f023 0310 	bic.w	r3, r3, #16
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b74:	623a      	str	r2, [r7, #32]
 8005b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	69f9      	ldr	r1, [r7, #28]
 8005b7a:	6a3a      	ldr	r2, [r7, #32]
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e5      	bne.n	8005b54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d10a      	bne.n	8005bac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fe2a 	bl	800580c <HAL_UARTEx_RxEventCallback>
 8005bb8:	e002      	b.n	8005bc0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fc f98c 	bl	8001ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e002      	b.n	8005bca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3730      	adds	r7, #48	@ 0x30
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd8:	b0c0      	sub	sp, #256	@ 0x100
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	68d9      	ldr	r1, [r3, #12]
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	ea40 0301 	orr.w	r3, r0, r1
 8005bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c2c:	f021 010c 	bic.w	r1, r1, #12
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4e:	6999      	ldr	r1, [r3, #24]
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	ea40 0301 	orr.w	r3, r0, r1
 8005c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b8f      	ldr	r3, [pc, #572]	@ (8005ea0 <UART_SetConfig+0x2cc>)
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d005      	beq.n	8005c74 <UART_SetConfig+0xa0>
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea4 <UART_SetConfig+0x2d0>)
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d104      	bne.n	8005c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c74:	f7fe f9ce 	bl	8004014 <HAL_RCC_GetPCLK2Freq>
 8005c78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c7c:	e003      	b.n	8005c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c7e:	f7fe f9b5 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8005c82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c90:	f040 810c 	bne.w	8005eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	462b      	mov	r3, r5
 8005caa:	1891      	adds	r1, r2, r2
 8005cac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cae:	415b      	adcs	r3, r3
 8005cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	eb12 0801 	adds.w	r8, r2, r1
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	eb43 0901 	adc.w	r9, r3, r1
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cd6:	4690      	mov	r8, r2
 8005cd8:	4699      	mov	r9, r3
 8005cda:	4623      	mov	r3, r4
 8005cdc:	eb18 0303 	adds.w	r3, r8, r3
 8005ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	eb49 0303 	adc.w	r3, r9, r3
 8005cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d02:	460b      	mov	r3, r1
 8005d04:	18db      	adds	r3, r3, r3
 8005d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d08:	4613      	mov	r3, r2
 8005d0a:	eb42 0303 	adc.w	r3, r2, r3
 8005d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d18:	f7fa faac 	bl	8000274 <__aeabi_uldivmod>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4b61      	ldr	r3, [pc, #388]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005d22:	fba3 2302 	umull	r2, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	011c      	lsls	r4, r3, #4
 8005d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	1891      	adds	r1, r2, r2
 8005d42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d44:	415b      	adcs	r3, r3
 8005d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d52:	4649      	mov	r1, r9
 8005d54:	eb43 0b01 	adc.w	fp, r3, r1
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d6c:	4692      	mov	sl, r2
 8005d6e:	469b      	mov	fp, r3
 8005d70:	4643      	mov	r3, r8
 8005d72:	eb1a 0303 	adds.w	r3, sl, r3
 8005d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	18db      	adds	r3, r3, r3
 8005d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d9e:	4613      	mov	r3, r2
 8005da0:	eb42 0303 	adc.w	r3, r2, r3
 8005da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005dae:	f7fa fa61 	bl	8000274 <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005dba:	fba3 2301 	umull	r2, r3, r3, r1
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2264      	movs	r2, #100	@ 0x64
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	1acb      	subs	r3, r1, r3
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dce:	4b36      	ldr	r3, [pc, #216]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ddc:	441c      	add	r4, r3
 8005dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005de8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	1891      	adds	r1, r2, r2
 8005df6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005df8:	415b      	adcs	r3, r3
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e00:	4641      	mov	r1, r8
 8005e02:	1851      	adds	r1, r2, r1
 8005e04:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e06:	4649      	mov	r1, r9
 8005e08:	414b      	adcs	r3, r1
 8005e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e18:	4659      	mov	r1, fp
 8005e1a:	00cb      	lsls	r3, r1, #3
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e22:	4651      	mov	r1, sl
 8005e24:	00ca      	lsls	r2, r1, #3
 8005e26:	4610      	mov	r0, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e34:	464b      	mov	r3, r9
 8005e36:	460a      	mov	r2, r1
 8005e38:	eb42 0303 	adc.w	r3, r2, r3
 8005e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e54:	460b      	mov	r3, r1
 8005e56:	18db      	adds	r3, r3, r3
 8005e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	eb42 0303 	adc.w	r3, r2, r3
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e6a:	f7fa fa03 	bl	8000274 <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005e74:	fba3 1302 	umull	r1, r3, r3, r2
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	2164      	movs	r1, #100	@ 0x64
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	3332      	adds	r3, #50	@ 0x32
 8005e86:	4a08      	ldr	r2, [pc, #32]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005e88:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f003 0207 	and.w	r2, r3, #7
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4422      	add	r2, r4
 8005e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e9c:	e106      	b.n	80060ac <UART_SetConfig+0x4d8>
 8005e9e:	bf00      	nop
 8005ea0:	40011000 	.word	0x40011000
 8005ea4:	40011400 	.word	0x40011400
 8005ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	6239      	str	r1, [r7, #32]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ece:	4641      	mov	r1, r8
 8005ed0:	1854      	adds	r4, r2, r1
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	eb43 0501 	adc.w	r5, r3, r1
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	00eb      	lsls	r3, r5, #3
 8005ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ee6:	00e2      	lsls	r2, r4, #3
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	4643      	mov	r3, r8
 8005eee:	18e3      	adds	r3, r4, r3
 8005ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	eb45 0303 	adc.w	r3, r5, r3
 8005efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	008b      	lsls	r3, r1, #2
 8005f1e:	4621      	mov	r1, r4
 8005f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f24:	4621      	mov	r1, r4
 8005f26:	008a      	lsls	r2, r1, #2
 8005f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f2c:	f7fa f9a2 	bl	8000274 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b60      	ldr	r3, [pc, #384]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8005f36:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	011c      	lsls	r4, r3, #4
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	61b9      	str	r1, [r7, #24]
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f60:	4641      	mov	r1, r8
 8005f62:	1851      	adds	r1, r2, r1
 8005f64:	6139      	str	r1, [r7, #16]
 8005f66:	4649      	mov	r1, r9
 8005f68:	414b      	adcs	r3, r1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f78:	4659      	mov	r1, fp
 8005f7a:	00cb      	lsls	r3, r1, #3
 8005f7c:	4651      	mov	r1, sl
 8005f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f82:	4651      	mov	r1, sl
 8005f84:	00ca      	lsls	r2, r1, #3
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f94:	464b      	mov	r3, r9
 8005f96:	460a      	mov	r2, r1
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fb8:	4649      	mov	r1, r9
 8005fba:	008b      	lsls	r3, r1, #2
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	008a      	lsls	r2, r1, #2
 8005fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fca:	f7fa f953 	bl	8000274 <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4b38      	ldr	r3, [pc, #224]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8005fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	2264      	movs	r2, #100	@ 0x64
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	1acb      	subs	r3, r1, r3
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	3332      	adds	r3, #50	@ 0x32
 8005fe8:	4a33      	ldr	r2, [pc, #204]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ff4:	441c      	add	r4, r3
 8005ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ffe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006000:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	415b      	adcs	r3, r3
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006014:	4641      	mov	r1, r8
 8006016:	1851      	adds	r1, r2, r1
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	4649      	mov	r1, r9
 800601c:	414b      	adcs	r3, r1
 800601e:	607b      	str	r3, [r7, #4]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800602c:	4659      	mov	r1, fp
 800602e:	00cb      	lsls	r3, r1, #3
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006036:	4651      	mov	r1, sl
 8006038:	00ca      	lsls	r2, r1, #3
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	4603      	mov	r3, r0
 8006040:	4642      	mov	r2, r8
 8006042:	189b      	adds	r3, r3, r2
 8006044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006046:	464b      	mov	r3, r9
 8006048:	460a      	mov	r2, r1
 800604a:	eb42 0303 	adc.w	r3, r2, r3
 800604e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	663b      	str	r3, [r7, #96]	@ 0x60
 800605a:	667a      	str	r2, [r7, #100]	@ 0x64
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006068:	4649      	mov	r1, r9
 800606a:	008b      	lsls	r3, r1, #2
 800606c:	4641      	mov	r1, r8
 800606e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006072:	4641      	mov	r1, r8
 8006074:	008a      	lsls	r2, r1, #2
 8006076:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800607a:	f7fa f8fb 	bl	8000274 <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8006084:	fba3 1302 	umull	r1, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	2164      	movs	r1, #100	@ 0x64
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	3332      	adds	r3, #50	@ 0x32
 8006096:	4a08      	ldr	r2, [pc, #32]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4422      	add	r2, r4
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060b2:	46bd      	mov	sp, r7
 80060b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060b8:	51eb851f 	.word	0x51eb851f

080060bc <memset>:
 80060bc:	4402      	add	r2, r0
 80060be:	4603      	mov	r3, r0
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d100      	bne.n	80060c6 <memset+0xa>
 80060c4:	4770      	bx	lr
 80060c6:	f803 1b01 	strb.w	r1, [r3], #1
 80060ca:	e7f9      	b.n	80060c0 <memset+0x4>

080060cc <__errno>:
 80060cc:	4b01      	ldr	r3, [pc, #4]	@ (80060d4 <__errno+0x8>)
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000000c 	.word	0x2000000c

080060d8 <__libc_init_array>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	4d0d      	ldr	r5, [pc, #52]	@ (8006110 <__libc_init_array+0x38>)
 80060dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006114 <__libc_init_array+0x3c>)
 80060de:	1b64      	subs	r4, r4, r5
 80060e0:	10a4      	asrs	r4, r4, #2
 80060e2:	2600      	movs	r6, #0
 80060e4:	42a6      	cmp	r6, r4
 80060e6:	d109      	bne.n	80060fc <__libc_init_array+0x24>
 80060e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006118 <__libc_init_array+0x40>)
 80060ea:	4c0c      	ldr	r4, [pc, #48]	@ (800611c <__libc_init_array+0x44>)
 80060ec:	f000 fbe0 	bl	80068b0 <_init>
 80060f0:	1b64      	subs	r4, r4, r5
 80060f2:	10a4      	asrs	r4, r4, #2
 80060f4:	2600      	movs	r6, #0
 80060f6:	42a6      	cmp	r6, r4
 80060f8:	d105      	bne.n	8006106 <__libc_init_array+0x2e>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006100:	4798      	blx	r3
 8006102:	3601      	adds	r6, #1
 8006104:	e7ee      	b.n	80060e4 <__libc_init_array+0xc>
 8006106:	f855 3b04 	ldr.w	r3, [r5], #4
 800610a:	4798      	blx	r3
 800610c:	3601      	adds	r6, #1
 800610e:	e7f2      	b.n	80060f6 <__libc_init_array+0x1e>
 8006110:	08006900 	.word	0x08006900
 8006114:	08006900 	.word	0x08006900
 8006118:	08006900 	.word	0x08006900
 800611c:	08006904 	.word	0x08006904

08006120 <powf>:
 8006120:	b508      	push	{r3, lr}
 8006122:	ed2d 8b04 	vpush	{d8-d9}
 8006126:	eeb0 8a60 	vmov.f32	s16, s1
 800612a:	eeb0 9a40 	vmov.f32	s18, s0
 800612e:	f000 f85f 	bl	80061f0 <__ieee754_powf>
 8006132:	eeb4 8a48 	vcmp.f32	s16, s16
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	eef0 8a40 	vmov.f32	s17, s0
 800613e:	d63e      	bvs.n	80061be <powf+0x9e>
 8006140:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006148:	d112      	bne.n	8006170 <powf+0x50>
 800614a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	d039      	beq.n	80061c8 <powf+0xa8>
 8006154:	eeb0 0a48 	vmov.f32	s0, s16
 8006158:	f000 f840 	bl	80061dc <finitef>
 800615c:	b378      	cbz	r0, 80061be <powf+0x9e>
 800615e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006166:	d52a      	bpl.n	80061be <powf+0x9e>
 8006168:	f7ff ffb0 	bl	80060cc <__errno>
 800616c:	2322      	movs	r3, #34	@ 0x22
 800616e:	e014      	b.n	800619a <powf+0x7a>
 8006170:	f000 f834 	bl	80061dc <finitef>
 8006174:	b998      	cbnz	r0, 800619e <powf+0x7e>
 8006176:	eeb0 0a49 	vmov.f32	s0, s18
 800617a:	f000 f82f 	bl	80061dc <finitef>
 800617e:	b170      	cbz	r0, 800619e <powf+0x7e>
 8006180:	eeb0 0a48 	vmov.f32	s0, s16
 8006184:	f000 f82a 	bl	80061dc <finitef>
 8006188:	b148      	cbz	r0, 800619e <powf+0x7e>
 800618a:	eef4 8a68 	vcmp.f32	s17, s17
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d7e9      	bvc.n	8006168 <powf+0x48>
 8006194:	f7ff ff9a 	bl	80060cc <__errno>
 8006198:	2321      	movs	r3, #33	@ 0x21
 800619a:	6003      	str	r3, [r0, #0]
 800619c:	e00f      	b.n	80061be <powf+0x9e>
 800619e:	eef5 8a40 	vcmp.f32	s17, #0.0
 80061a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a6:	d10a      	bne.n	80061be <powf+0x9e>
 80061a8:	eeb0 0a49 	vmov.f32	s0, s18
 80061ac:	f000 f816 	bl	80061dc <finitef>
 80061b0:	b128      	cbz	r0, 80061be <powf+0x9e>
 80061b2:	eeb0 0a48 	vmov.f32	s0, s16
 80061b6:	f000 f811 	bl	80061dc <finitef>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d1d4      	bne.n	8006168 <powf+0x48>
 80061be:	eeb0 0a68 	vmov.f32	s0, s17
 80061c2:	ecbd 8b04 	vpop	{d8-d9}
 80061c6:	bd08      	pop	{r3, pc}
 80061c8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80061cc:	e7f7      	b.n	80061be <powf+0x9e>

080061ce <fabsf>:
 80061ce:	ee10 3a10 	vmov	r3, s0
 80061d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061d6:	ee00 3a10 	vmov	s0, r3
 80061da:	4770      	bx	lr

080061dc <finitef>:
 80061dc:	ee10 3a10 	vmov	r3, s0
 80061e0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80061e4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80061e8:	bfac      	ite	ge
 80061ea:	2000      	movge	r0, #0
 80061ec:	2001      	movlt	r0, #1
 80061ee:	4770      	bx	lr

080061f0 <__ieee754_powf>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	ee10 4a90 	vmov	r4, s1
 80061f8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80061fc:	ed2d 8b02 	vpush	{d8}
 8006200:	ee10 6a10 	vmov	r6, s0
 8006204:	eeb0 8a40 	vmov.f32	s16, s0
 8006208:	eef0 8a60 	vmov.f32	s17, s1
 800620c:	d10c      	bne.n	8006228 <__ieee754_powf+0x38>
 800620e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8006212:	0076      	lsls	r6, r6, #1
 8006214:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8006218:	f240 829c 	bls.w	8006754 <__ieee754_powf+0x564>
 800621c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006220:	ecbd 8b02 	vpop	{d8}
 8006224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006228:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800622c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006230:	d802      	bhi.n	8006238 <__ieee754_powf+0x48>
 8006232:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006236:	d908      	bls.n	800624a <__ieee754_powf+0x5a>
 8006238:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800623c:	d1ee      	bne.n	800621c <__ieee754_powf+0x2c>
 800623e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8006242:	0064      	lsls	r4, r4, #1
 8006244:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006248:	e7e6      	b.n	8006218 <__ieee754_powf+0x28>
 800624a:	2e00      	cmp	r6, #0
 800624c:	da1e      	bge.n	800628c <__ieee754_powf+0x9c>
 800624e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8006252:	d22b      	bcs.n	80062ac <__ieee754_powf+0xbc>
 8006254:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006258:	d332      	bcc.n	80062c0 <__ieee754_powf+0xd0>
 800625a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800625e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006262:	fa49 f503 	asr.w	r5, r9, r3
 8006266:	fa05 f303 	lsl.w	r3, r5, r3
 800626a:	454b      	cmp	r3, r9
 800626c:	d126      	bne.n	80062bc <__ieee754_powf+0xcc>
 800626e:	f005 0501 	and.w	r5, r5, #1
 8006272:	f1c5 0502 	rsb	r5, r5, #2
 8006276:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800627a:	d122      	bne.n	80062c2 <__ieee754_powf+0xd2>
 800627c:	2c00      	cmp	r4, #0
 800627e:	f280 826f 	bge.w	8006760 <__ieee754_powf+0x570>
 8006282:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006286:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800628a:	e7c9      	b.n	8006220 <__ieee754_powf+0x30>
 800628c:	2500      	movs	r5, #0
 800628e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006292:	d1f0      	bne.n	8006276 <__ieee754_powf+0x86>
 8006294:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8006298:	f000 825c 	beq.w	8006754 <__ieee754_powf+0x564>
 800629c:	d908      	bls.n	80062b0 <__ieee754_powf+0xc0>
 800629e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8006600 <__ieee754_powf+0x410>
 80062a2:	2c00      	cmp	r4, #0
 80062a4:	bfa8      	it	ge
 80062a6:	eeb0 0a68 	vmovge.f32	s0, s17
 80062aa:	e7b9      	b.n	8006220 <__ieee754_powf+0x30>
 80062ac:	2502      	movs	r5, #2
 80062ae:	e7ee      	b.n	800628e <__ieee754_powf+0x9e>
 80062b0:	2c00      	cmp	r4, #0
 80062b2:	f280 8252 	bge.w	800675a <__ieee754_powf+0x56a>
 80062b6:	eeb1 0a68 	vneg.f32	s0, s17
 80062ba:	e7b1      	b.n	8006220 <__ieee754_powf+0x30>
 80062bc:	2500      	movs	r5, #0
 80062be:	e7da      	b.n	8006276 <__ieee754_powf+0x86>
 80062c0:	2500      	movs	r5, #0
 80062c2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80062c6:	d102      	bne.n	80062ce <__ieee754_powf+0xde>
 80062c8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80062cc:	e7a8      	b.n	8006220 <__ieee754_powf+0x30>
 80062ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80062d2:	d109      	bne.n	80062e8 <__ieee754_powf+0xf8>
 80062d4:	2e00      	cmp	r6, #0
 80062d6:	db07      	blt.n	80062e8 <__ieee754_powf+0xf8>
 80062d8:	eeb0 0a48 	vmov.f32	s0, s16
 80062dc:	ecbd 8b02 	vpop	{d8}
 80062e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e4:	f000 bae0 	b.w	80068a8 <__ieee754_sqrtf>
 80062e8:	eeb0 0a48 	vmov.f32	s0, s16
 80062ec:	f7ff ff6f 	bl	80061ce <fabsf>
 80062f0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80062f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80062f8:	4647      	mov	r7, r8
 80062fa:	d002      	beq.n	8006302 <__ieee754_powf+0x112>
 80062fc:	f1b8 0f00 	cmp.w	r8, #0
 8006300:	d117      	bne.n	8006332 <__ieee754_powf+0x142>
 8006302:	2c00      	cmp	r4, #0
 8006304:	bfbc      	itt	lt
 8006306:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800630a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800630e:	2e00      	cmp	r6, #0
 8006310:	da86      	bge.n	8006220 <__ieee754_powf+0x30>
 8006312:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8006316:	ea58 0805 	orrs.w	r8, r8, r5
 800631a:	d104      	bne.n	8006326 <__ieee754_powf+0x136>
 800631c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006320:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006324:	e77c      	b.n	8006220 <__ieee754_powf+0x30>
 8006326:	2d01      	cmp	r5, #1
 8006328:	f47f af7a 	bne.w	8006220 <__ieee754_powf+0x30>
 800632c:	eeb1 0a40 	vneg.f32	s0, s0
 8006330:	e776      	b.n	8006220 <__ieee754_powf+0x30>
 8006332:	0ff0      	lsrs	r0, r6, #31
 8006334:	3801      	subs	r0, #1
 8006336:	ea55 0300 	orrs.w	r3, r5, r0
 800633a:	d104      	bne.n	8006346 <__ieee754_powf+0x156>
 800633c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006340:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006344:	e76c      	b.n	8006220 <__ieee754_powf+0x30>
 8006346:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800634a:	d973      	bls.n	8006434 <__ieee754_powf+0x244>
 800634c:	4bad      	ldr	r3, [pc, #692]	@ (8006604 <__ieee754_powf+0x414>)
 800634e:	4598      	cmp	r8, r3
 8006350:	d808      	bhi.n	8006364 <__ieee754_powf+0x174>
 8006352:	2c00      	cmp	r4, #0
 8006354:	da0b      	bge.n	800636e <__ieee754_powf+0x17e>
 8006356:	2000      	movs	r0, #0
 8006358:	ecbd 8b02 	vpop	{d8}
 800635c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006360:	f000 ba9c 	b.w	800689c <__math_oflowf>
 8006364:	4ba8      	ldr	r3, [pc, #672]	@ (8006608 <__ieee754_powf+0x418>)
 8006366:	4598      	cmp	r8, r3
 8006368:	d908      	bls.n	800637c <__ieee754_powf+0x18c>
 800636a:	2c00      	cmp	r4, #0
 800636c:	dcf3      	bgt.n	8006356 <__ieee754_powf+0x166>
 800636e:	2000      	movs	r0, #0
 8006370:	ecbd 8b02 	vpop	{d8}
 8006374:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006378:	f000 ba8a 	b.w	8006890 <__math_uflowf>
 800637c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006380:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006384:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800660c <__ieee754_powf+0x41c>
 8006388:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800638c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006390:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006394:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006398:	ee20 7a00 	vmul.f32	s14, s0, s0
 800639c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063a0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8006610 <__ieee754_powf+0x420>
 80063a4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80063a8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8006614 <__ieee754_powf+0x424>
 80063ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80063b0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8006618 <__ieee754_powf+0x428>
 80063b4:	eef0 6a67 	vmov.f32	s13, s15
 80063b8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80063bc:	ee16 3a90 	vmov	r3, s13
 80063c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80063c4:	f023 030f 	bic.w	r3, r3, #15
 80063c8:	ee06 3a90 	vmov	s13, r3
 80063cc:	eee0 6a47 	vfms.f32	s13, s0, s14
 80063d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063d4:	3d01      	subs	r5, #1
 80063d6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80063da:	4305      	orrs	r5, r0
 80063dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063e0:	f024 040f 	bic.w	r4, r4, #15
 80063e4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80063e8:	bf18      	it	ne
 80063ea:	eeb0 8a47 	vmovne.f32	s16, s14
 80063ee:	ee07 4a10 	vmov	s14, r4
 80063f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80063f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006402:	ee07 4a10 	vmov	s14, r4
 8006406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800640a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800640e:	ee17 1a10 	vmov	r1, s14
 8006412:	2900      	cmp	r1, #0
 8006414:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006418:	f340 80dd 	ble.w	80065d6 <__ieee754_powf+0x3e6>
 800641c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8006420:	f240 80ca 	bls.w	80065b8 <__ieee754_powf+0x3c8>
 8006424:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800642c:	bf4c      	ite	mi
 800642e:	2001      	movmi	r0, #1
 8006430:	2000      	movpl	r0, #0
 8006432:	e791      	b.n	8006358 <__ieee754_powf+0x168>
 8006434:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006438:	bf01      	itttt	eq
 800643a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800661c <__ieee754_powf+0x42c>
 800643e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006442:	f06f 0317 	mvneq.w	r3, #23
 8006446:	ee17 7a90 	vmoveq	r7, s15
 800644a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800644e:	bf18      	it	ne
 8006450:	2300      	movne	r3, #0
 8006452:	3a7f      	subs	r2, #127	@ 0x7f
 8006454:	441a      	add	r2, r3
 8006456:	4b72      	ldr	r3, [pc, #456]	@ (8006620 <__ieee754_powf+0x430>)
 8006458:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800645c:	429f      	cmp	r7, r3
 800645e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8006462:	dd06      	ble.n	8006472 <__ieee754_powf+0x282>
 8006464:	4b6f      	ldr	r3, [pc, #444]	@ (8006624 <__ieee754_powf+0x434>)
 8006466:	429f      	cmp	r7, r3
 8006468:	f340 80a4 	ble.w	80065b4 <__ieee754_powf+0x3c4>
 800646c:	3201      	adds	r2, #1
 800646e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8006472:	2600      	movs	r6, #0
 8006474:	4b6c      	ldr	r3, [pc, #432]	@ (8006628 <__ieee754_powf+0x438>)
 8006476:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800647a:	ee07 1a10 	vmov	s14, r1
 800647e:	edd3 5a00 	vldr	s11, [r3]
 8006482:	4b6a      	ldr	r3, [pc, #424]	@ (800662c <__ieee754_powf+0x43c>)
 8006484:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006488:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800648c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006490:	1049      	asrs	r1, r1, #1
 8006492:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8006496:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800649a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800649e:	ee37 6a65 	vsub.f32	s12, s14, s11
 80064a2:	ee07 1a90 	vmov	s15, r1
 80064a6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80064aa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80064ae:	ee15 7a10 	vmov	r7, s10
 80064b2:	401f      	ands	r7, r3
 80064b4:	ee06 7a90 	vmov	s13, r7
 80064b8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80064bc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80064c0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80064c4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80064c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006630 <__ieee754_powf+0x440>
 80064cc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8006634 <__ieee754_powf+0x444>
 80064d0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80064d4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006638 <__ieee754_powf+0x448>
 80064d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80064dc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800660c <__ieee754_powf+0x41c>
 80064e0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80064e4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800663c <__ieee754_powf+0x44c>
 80064e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80064ec:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8006640 <__ieee754_powf+0x450>
 80064f0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80064f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80064f8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80064fc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006500:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006504:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006508:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800650c:	eef0 5a67 	vmov.f32	s11, s15
 8006510:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006514:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006518:	ee15 1a90 	vmov	r1, s11
 800651c:	4019      	ands	r1, r3
 800651e:	ee05 1a90 	vmov	s11, r1
 8006522:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006526:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800652a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006532:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006536:	eeb0 6a67 	vmov.f32	s12, s15
 800653a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800653e:	ee16 1a10 	vmov	r1, s12
 8006542:	4019      	ands	r1, r3
 8006544:	ee06 1a10 	vmov	s12, r1
 8006548:	eeb0 7a46 	vmov.f32	s14, s12
 800654c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006550:	493c      	ldr	r1, [pc, #240]	@ (8006644 <__ieee754_powf+0x454>)
 8006552:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8006556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800655a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006648 <__ieee754_powf+0x458>
 800655e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800664c <__ieee754_powf+0x45c>
 8006562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006566:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006650 <__ieee754_powf+0x460>
 800656a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800656e:	ed91 7a00 	vldr	s14, [r1]
 8006572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006576:	ee07 2a10 	vmov	s14, r2
 800657a:	eef0 6a67 	vmov.f32	s13, s15
 800657e:	4a35      	ldr	r2, [pc, #212]	@ (8006654 <__ieee754_powf+0x464>)
 8006580:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006584:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8006588:	ed92 5a00 	vldr	s10, [r2]
 800658c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006590:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006594:	ee76 6a87 	vadd.f32	s13, s13, s14
 8006598:	ee16 2a90 	vmov	r2, s13
 800659c:	4013      	ands	r3, r2
 800659e:	ee06 3a90 	vmov	s13, r3
 80065a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80065a6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80065aa:	eea6 7a65 	vfms.f32	s14, s12, s11
 80065ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065b2:	e70f      	b.n	80063d4 <__ieee754_powf+0x1e4>
 80065b4:	2601      	movs	r6, #1
 80065b6:	e75d      	b.n	8006474 <__ieee754_powf+0x284>
 80065b8:	d152      	bne.n	8006660 <__ieee754_powf+0x470>
 80065ba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006658 <__ieee754_powf+0x468>
 80065be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065c2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80065c6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80065ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ce:	f73f af29 	bgt.w	8006424 <__ieee754_powf+0x234>
 80065d2:	2386      	movs	r3, #134	@ 0x86
 80065d4:	e048      	b.n	8006668 <__ieee754_powf+0x478>
 80065d6:	4a21      	ldr	r2, [pc, #132]	@ (800665c <__ieee754_powf+0x46c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d907      	bls.n	80065ec <__ieee754_powf+0x3fc>
 80065dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80065e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e4:	bf4c      	ite	mi
 80065e6:	2001      	movmi	r0, #1
 80065e8:	2000      	movpl	r0, #0
 80065ea:	e6c1      	b.n	8006370 <__ieee754_powf+0x180>
 80065ec:	d138      	bne.n	8006660 <__ieee754_powf+0x470>
 80065ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065f2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80065f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fa:	dbea      	blt.n	80065d2 <__ieee754_powf+0x3e2>
 80065fc:	e7ee      	b.n	80065dc <__ieee754_powf+0x3ec>
 80065fe:	bf00      	nop
 8006600:	00000000 	.word	0x00000000
 8006604:	3f7ffff3 	.word	0x3f7ffff3
 8006608:	3f800007 	.word	0x3f800007
 800660c:	3eaaaaab 	.word	0x3eaaaaab
 8006610:	3fb8aa3b 	.word	0x3fb8aa3b
 8006614:	36eca570 	.word	0x36eca570
 8006618:	3fb8aa00 	.word	0x3fb8aa00
 800661c:	4b800000 	.word	0x4b800000
 8006620:	001cc471 	.word	0x001cc471
 8006624:	005db3d6 	.word	0x005db3d6
 8006628:	080068f0 	.word	0x080068f0
 800662c:	fffff000 	.word	0xfffff000
 8006630:	3e6c3255 	.word	0x3e6c3255
 8006634:	3e53f142 	.word	0x3e53f142
 8006638:	3e8ba305 	.word	0x3e8ba305
 800663c:	3edb6db7 	.word	0x3edb6db7
 8006640:	3f19999a 	.word	0x3f19999a
 8006644:	080068e0 	.word	0x080068e0
 8006648:	3f76384f 	.word	0x3f76384f
 800664c:	3f763800 	.word	0x3f763800
 8006650:	369dc3a0 	.word	0x369dc3a0
 8006654:	080068e8 	.word	0x080068e8
 8006658:	3338aa3c 	.word	0x3338aa3c
 800665c:	43160000 	.word	0x43160000
 8006660:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8006664:	d971      	bls.n	800674a <__ieee754_powf+0x55a>
 8006666:	15db      	asrs	r3, r3, #23
 8006668:	3b7e      	subs	r3, #126	@ 0x7e
 800666a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800666e:	4118      	asrs	r0, r3
 8006670:	4408      	add	r0, r1
 8006672:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006676:	4a3c      	ldr	r2, [pc, #240]	@ (8006768 <__ieee754_powf+0x578>)
 8006678:	3b7f      	subs	r3, #127	@ 0x7f
 800667a:	411a      	asrs	r2, r3
 800667c:	4002      	ands	r2, r0
 800667e:	ee07 2a10 	vmov	s14, r2
 8006682:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006686:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800668a:	f1c3 0317 	rsb	r3, r3, #23
 800668e:	4118      	asrs	r0, r3
 8006690:	2900      	cmp	r1, #0
 8006692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006696:	bfb8      	it	lt
 8006698:	4240      	neglt	r0, r0
 800669a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800669e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800676c <__ieee754_powf+0x57c>
 80066a2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8006770 <__ieee754_powf+0x580>
 80066a6:	ee17 3a10 	vmov	r3, s14
 80066aa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80066ae:	f023 030f 	bic.w	r3, r3, #15
 80066b2:	ee07 3a10 	vmov	s14, r3
 80066b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80066be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80066c2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8006774 <__ieee754_powf+0x584>
 80066c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ca:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80066ce:	eef0 6a67 	vmov.f32	s13, s15
 80066d2:	eee7 6a06 	vfma.f32	s13, s14, s12
 80066d6:	eef0 5a66 	vmov.f32	s11, s13
 80066da:	eee7 5a46 	vfms.f32	s11, s14, s12
 80066de:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80066e2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80066e6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8006778 <__ieee754_powf+0x588>
 80066ea:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800677c <__ieee754_powf+0x58c>
 80066ee:	eea7 6a25 	vfma.f32	s12, s14, s11
 80066f2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8006780 <__ieee754_powf+0x590>
 80066f6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80066fa:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8006784 <__ieee754_powf+0x594>
 80066fe:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006702:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8006788 <__ieee754_powf+0x598>
 8006706:	eee6 5a07 	vfma.f32	s11, s12, s14
 800670a:	eeb0 6a66 	vmov.f32	s12, s13
 800670e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8006712:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8006716:	ee66 5a86 	vmul.f32	s11, s13, s12
 800671a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800671e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8006722:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8006726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800672a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800672e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006732:	ee10 3a10 	vmov	r3, s0
 8006736:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800673a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800673e:	da06      	bge.n	800674e <__ieee754_powf+0x55e>
 8006740:	f000 f826 	bl	8006790 <scalbnf>
 8006744:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006748:	e56a      	b.n	8006220 <__ieee754_powf+0x30>
 800674a:	2000      	movs	r0, #0
 800674c:	e7a5      	b.n	800669a <__ieee754_powf+0x4aa>
 800674e:	ee00 3a10 	vmov	s0, r3
 8006752:	e7f7      	b.n	8006744 <__ieee754_powf+0x554>
 8006754:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006758:	e562      	b.n	8006220 <__ieee754_powf+0x30>
 800675a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800678c <__ieee754_powf+0x59c>
 800675e:	e55f      	b.n	8006220 <__ieee754_powf+0x30>
 8006760:	eeb0 0a48 	vmov.f32	s0, s16
 8006764:	e55c      	b.n	8006220 <__ieee754_powf+0x30>
 8006766:	bf00      	nop
 8006768:	ff800000 	.word	0xff800000
 800676c:	3f317218 	.word	0x3f317218
 8006770:	3f317200 	.word	0x3f317200
 8006774:	35bfbe8c 	.word	0x35bfbe8c
 8006778:	b5ddea0e 	.word	0xb5ddea0e
 800677c:	3331bb4c 	.word	0x3331bb4c
 8006780:	388ab355 	.word	0x388ab355
 8006784:	bb360b61 	.word	0xbb360b61
 8006788:	3e2aaaab 	.word	0x3e2aaaab
 800678c:	00000000 	.word	0x00000000

08006790 <scalbnf>:
 8006790:	ee10 3a10 	vmov	r3, s0
 8006794:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006798:	d02b      	beq.n	80067f2 <scalbnf+0x62>
 800679a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800679e:	d302      	bcc.n	80067a6 <scalbnf+0x16>
 80067a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80067a4:	4770      	bx	lr
 80067a6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80067aa:	d123      	bne.n	80067f4 <scalbnf+0x64>
 80067ac:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <scalbnf+0xb0>)
 80067ae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006844 <scalbnf+0xb4>
 80067b2:	4298      	cmp	r0, r3
 80067b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80067b8:	db17      	blt.n	80067ea <scalbnf+0x5a>
 80067ba:	ee10 3a10 	vmov	r3, s0
 80067be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80067c2:	3a19      	subs	r2, #25
 80067c4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80067c8:	4288      	cmp	r0, r1
 80067ca:	dd15      	ble.n	80067f8 <scalbnf+0x68>
 80067cc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006848 <scalbnf+0xb8>
 80067d0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800684c <scalbnf+0xbc>
 80067d4:	ee10 3a10 	vmov	r3, s0
 80067d8:	eeb0 7a67 	vmov.f32	s14, s15
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bfb8      	it	lt
 80067e0:	eef0 7a66 	vmovlt.f32	s15, s13
 80067e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80067e8:	4770      	bx	lr
 80067ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006850 <scalbnf+0xc0>
 80067ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80067f2:	4770      	bx	lr
 80067f4:	0dd2      	lsrs	r2, r2, #23
 80067f6:	e7e5      	b.n	80067c4 <scalbnf+0x34>
 80067f8:	4410      	add	r0, r2
 80067fa:	28fe      	cmp	r0, #254	@ 0xfe
 80067fc:	dce6      	bgt.n	80067cc <scalbnf+0x3c>
 80067fe:	2800      	cmp	r0, #0
 8006800:	dd06      	ble.n	8006810 <scalbnf+0x80>
 8006802:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006806:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800680a:	ee00 3a10 	vmov	s0, r3
 800680e:	4770      	bx	lr
 8006810:	f110 0f16 	cmn.w	r0, #22
 8006814:	da09      	bge.n	800682a <scalbnf+0x9a>
 8006816:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006850 <scalbnf+0xc0>
 800681a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006854 <scalbnf+0xc4>
 800681e:	ee10 3a10 	vmov	r3, s0
 8006822:	eeb0 7a67 	vmov.f32	s14, s15
 8006826:	2b00      	cmp	r3, #0
 8006828:	e7d9      	b.n	80067de <scalbnf+0x4e>
 800682a:	3019      	adds	r0, #25
 800682c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006830:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006834:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006858 <scalbnf+0xc8>
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	e7d7      	b.n	80067ee <scalbnf+0x5e>
 800683e:	bf00      	nop
 8006840:	ffff3cb0 	.word	0xffff3cb0
 8006844:	4c000000 	.word	0x4c000000
 8006848:	7149f2ca 	.word	0x7149f2ca
 800684c:	f149f2ca 	.word	0xf149f2ca
 8006850:	0da24260 	.word	0x0da24260
 8006854:	8da24260 	.word	0x8da24260
 8006858:	33000000 	.word	0x33000000

0800685c <with_errnof>:
 800685c:	b510      	push	{r4, lr}
 800685e:	ed2d 8b02 	vpush	{d8}
 8006862:	eeb0 8a40 	vmov.f32	s16, s0
 8006866:	4604      	mov	r4, r0
 8006868:	f7ff fc30 	bl	80060cc <__errno>
 800686c:	eeb0 0a48 	vmov.f32	s0, s16
 8006870:	ecbd 8b02 	vpop	{d8}
 8006874:	6004      	str	r4, [r0, #0]
 8006876:	bd10      	pop	{r4, pc}

08006878 <xflowf>:
 8006878:	b130      	cbz	r0, 8006888 <xflowf+0x10>
 800687a:	eef1 7a40 	vneg.f32	s15, s0
 800687e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006882:	2022      	movs	r0, #34	@ 0x22
 8006884:	f7ff bfea 	b.w	800685c <with_errnof>
 8006888:	eef0 7a40 	vmov.f32	s15, s0
 800688c:	e7f7      	b.n	800687e <xflowf+0x6>
	...

08006890 <__math_uflowf>:
 8006890:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006898 <__math_uflowf+0x8>
 8006894:	f7ff bff0 	b.w	8006878 <xflowf>
 8006898:	10000000 	.word	0x10000000

0800689c <__math_oflowf>:
 800689c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80068a4 <__math_oflowf+0x8>
 80068a0:	f7ff bfea 	b.w	8006878 <xflowf>
 80068a4:	70000000 	.word	0x70000000

080068a8 <__ieee754_sqrtf>:
 80068a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80068ac:	4770      	bx	lr
	...

080068b0 <_init>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	bf00      	nop
 80068b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b6:	bc08      	pop	{r3}
 80068b8:	469e      	mov	lr, r3
 80068ba:	4770      	bx	lr

080068bc <_fini>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	bf00      	nop
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr
