
SingleCopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008300  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cec  08008498  08008498  00009498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009184  08009184  0000b098  2**0
                  CONTENTS
  4 .ARM          00000008  08009184  08009184  0000a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800918c  0800918c  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800918c  0800918c  0000a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009190  08009190  0000a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08009194  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000098  0800922c  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  0800922c  0000b2e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e48d  00000000  00000000  0000b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226b  00000000  00000000  00019555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c56  00000000  00000000  0001c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194bc  00000000  00000000  0001d3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013542  00000000  00000000  0003686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096411  00000000  00000000  00049dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e01bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  000e0200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e497c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008480 	.word	0x08008480

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08008480 	.word	0x08008480

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_ldivmod>:
 8000b64:	b97b      	cbnz	r3, 8000b86 <__aeabi_ldivmod+0x22>
 8000b66:	b972      	cbnz	r2, 8000b86 <__aeabi_ldivmod+0x22>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bfbe      	ittt	lt
 8000b6c:	2000      	movlt	r0, #0
 8000b6e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b72:	e006      	blt.n	8000b82 <__aeabi_ldivmod+0x1e>
 8000b74:	bf08      	it	eq
 8000b76:	2800      	cmpeq	r0, #0
 8000b78:	bf1c      	itt	ne
 8000b7a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000b82:	f000 b9b5 	b.w	8000ef0 <__aeabi_idiv0>
 8000b86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8e:	2900      	cmp	r1, #0
 8000b90:	db09      	blt.n	8000ba6 <__aeabi_ldivmod+0x42>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db1a      	blt.n	8000bcc <__aeabi_ldivmod+0x68>
 8000b96:	f000 f84d 	bl	8000c34 <__udivmoddi4>
 8000b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4770      	bx	lr
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db1b      	blt.n	8000be8 <__aeabi_ldivmod+0x84>
 8000bb0:	f000 f840 	bl	8000c34 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	4770      	bx	lr
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	f000 f82f 	bl	8000c34 <__udivmoddi4>
 8000bd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bde:	b004      	add	sp, #16
 8000be0:	4240      	negs	r0, r0
 8000be2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be6:	4770      	bx	lr
 8000be8:	4252      	negs	r2, r2
 8000bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bee:	f000 f821 	bl	8000c34 <__udivmoddi4>
 8000bf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfa:	b004      	add	sp, #16
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_uldivmod>:
 8000c04:	b953      	cbnz	r3, 8000c1c <__aeabi_uldivmod+0x18>
 8000c06:	b94a      	cbnz	r2, 8000c1c <__aeabi_uldivmod+0x18>
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	2800      	cmpeq	r0, #0
 8000c0e:	bf1c      	itt	ne
 8000c10:	f04f 31ff 	movne.w	r1, #4294967295
 8000c14:	f04f 30ff 	movne.w	r0, #4294967295
 8000c18:	f000 b96a 	b.w	8000ef0 <__aeabi_idiv0>
 8000c1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c24:	f000 f806 	bl	8000c34 <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4770      	bx	lr

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9d08      	ldr	r5, [sp, #32]
 8000c3a:	460c      	mov	r4, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d14e      	bne.n	8000cde <__udivmoddi4+0xaa>
 8000c40:	4694      	mov	ip, r2
 8000c42:	458c      	cmp	ip, r1
 8000c44:	4686      	mov	lr, r0
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	d962      	bls.n	8000d12 <__udivmoddi4+0xde>
 8000c4c:	b14a      	cbz	r2, 8000c62 <__udivmoddi4+0x2e>
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	4091      	lsls	r1, r2
 8000c54:	fa20 f303 	lsr.w	r3, r0, r3
 8000c58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f f68c 	uxth.w	r6, ip
 8000c6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c72:	fb07 1114 	mls	r1, r7, r4, r1
 8000c76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7a:	fb04 f106 	mul.w	r1, r4, r6
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x64>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8a:	f080 8112 	bcs.w	8000eb2 <__udivmoddi4+0x27e>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 810f 	bls.w	8000eb2 <__udivmoddi4+0x27e>
 8000c94:	3c02      	subs	r4, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000caa:	fb00 f606 	mul.w	r6, r0, r6
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x94>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cba:	f080 80fc 	bcs.w	8000eb6 <__udivmoddi4+0x282>
 8000cbe:	429e      	cmp	r6, r3
 8000cc0:	f240 80f9 	bls.w	8000eb6 <__udivmoddi4+0x282>
 8000cc4:	4463      	add	r3, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	1b9b      	subs	r3, r3, r6
 8000cca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa6>
 8000cd2:	40d3      	lsrs	r3, r2
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xba>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb4>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa6>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x150>
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xcc>
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	f0c0 80f0 	bcc.w	8000ee0 <__udivmoddi4+0x2ac>
 8000d00:	1a86      	subs	r6, r0, r2
 8000d02:	eb64 0303 	sbc.w	r3, r4, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d0e6      	beq.n	8000cda <__udivmoddi4+0xa6>
 8000d0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d10:	e7e3      	b.n	8000cda <__udivmoddi4+0xa6>
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x204>
 8000d18:	eba1 040c 	sub.w	r4, r1, ip
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	fa1f f78c 	uxth.w	r7, ip
 8000d24:	2101      	movs	r1, #1
 8000d26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb07 f006 	mul.w	r0, r7, r6
 8000d3a:	4298      	cmp	r0, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x11c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x11a>
 8000d48:	4298      	cmp	r0, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2b4>
 8000d4e:	4626      	mov	r6, r4
 8000d50:	1a1c      	subs	r4, r3, r0
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d62:	fb00 f707 	mul.w	r7, r0, r7
 8000d66:	429f      	cmp	r7, r3
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x148>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x146>
 8000d74:	429f      	cmp	r7, r3
 8000d76:	f200 80b0 	bhi.w	8000eda <__udivmoddi4+0x2a6>
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	1bdb      	subs	r3, r3, r7
 8000d7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x9c>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d94:	fa04 f301 	lsl.w	r3, r4, r1
 8000d98:	ea43 030c 	orr.w	r3, r3, ip
 8000d9c:	40f4      	lsrs	r4, r6
 8000d9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000da2:	0c38      	lsrs	r0, r7, #16
 8000da4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dac:	fa1f fc87 	uxth.w	ip, r7
 8000db0:	fb00 441e 	mls	r4, r0, lr, r4
 8000db4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dbc:	45a1      	cmp	r9, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x1a6>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dca:	f080 8084 	bcs.w	8000ed6 <__udivmoddi4+0x2a2>
 8000dce:	45a1      	cmp	r9, r4
 8000dd0:	f240 8081 	bls.w	8000ed6 <__udivmoddi4+0x2a2>
 8000dd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	eba4 0409 	sub.w	r4, r4, r9
 8000dde:	fa1f f983 	uxth.w	r9, r3
 8000de2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000de6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x1d2>
 8000df6:	193c      	adds	r4, r7, r4
 8000df8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dfc:	d267      	bcs.n	8000ece <__udivmoddi4+0x29a>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d965      	bls.n	8000ece <__udivmoddi4+0x29a>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e0e:	eba4 040c 	sub.w	r4, r4, ip
 8000e12:	429c      	cmp	r4, r3
 8000e14:	46ce      	mov	lr, r9
 8000e16:	469c      	mov	ip, r3
 8000e18:	d351      	bcc.n	8000ebe <__udivmoddi4+0x28a>
 8000e1a:	d04e      	beq.n	8000eba <__udivmoddi4+0x286>
 8000e1c:	b155      	cbz	r5, 8000e34 <__udivmoddi4+0x200>
 8000e1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e22:	eb64 040c 	sbc.w	r4, r4, ip
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	40cb      	lsrs	r3, r1
 8000e2c:	431e      	orrs	r6, r3
 8000e2e:	40cc      	lsrs	r4, r1
 8000e30:	e9c5 6400 	strd	r6, r4, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	e750      	b.n	8000cda <__udivmoddi4+0xa6>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	fa24 f303 	lsr.w	r3, r4, r3
 8000e48:	4094      	lsls	r4, r2
 8000e4a:	430c      	orrs	r4, r1
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e54:	fa1f f78c 	uxth.w	r7, ip
 8000e58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e60:	0c23      	lsrs	r3, r4, #16
 8000e62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e66:	fb00 f107 	mul.w	r1, r0, r7
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x24c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e76:	d22c      	bcs.n	8000ed2 <__udivmoddi4+0x29e>
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	d92a      	bls.n	8000ed2 <__udivmoddi4+0x29e>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e88:	fb08 3311 	mls	r3, r8, r1, r3
 8000e8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e90:	fb01 f307 	mul.w	r3, r1, r7
 8000e94:	42a3      	cmp	r3, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x276>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea0:	d213      	bcs.n	8000eca <__udivmoddi4+0x296>
 8000ea2:	42a3      	cmp	r3, r4
 8000ea4:	d911      	bls.n	8000eca <__udivmoddi4+0x296>
 8000ea6:	3902      	subs	r1, #2
 8000ea8:	4464      	add	r4, ip
 8000eaa:	1ae4      	subs	r4, r4, r3
 8000eac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb0:	e739      	b.n	8000d26 <__udivmoddi4+0xf2>
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	e6f0      	b.n	8000c98 <__udivmoddi4+0x64>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e706      	b.n	8000cc8 <__udivmoddi4+0x94>
 8000eba:	45c8      	cmp	r8, r9
 8000ebc:	d2ae      	bcs.n	8000e1c <__udivmoddi4+0x1e8>
 8000ebe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ec6:	3801      	subs	r0, #1
 8000ec8:	e7a8      	b.n	8000e1c <__udivmoddi4+0x1e8>
 8000eca:	4631      	mov	r1, r6
 8000ecc:	e7ed      	b.n	8000eaa <__udivmoddi4+0x276>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	e799      	b.n	8000e06 <__udivmoddi4+0x1d2>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e7d4      	b.n	8000e80 <__udivmoddi4+0x24c>
 8000ed6:	46d6      	mov	lr, sl
 8000ed8:	e77f      	b.n	8000dda <__udivmoddi4+0x1a6>
 8000eda:	4463      	add	r3, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e74d      	b.n	8000d7c <__udivmoddi4+0x148>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e70f      	b.n	8000d08 <__udivmoddi4+0xd4>
 8000ee8:	3e02      	subs	r6, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	e730      	b.n	8000d50 <__udivmoddi4+0x11c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <i2c_write>:
#include "MPU6050/I2C.h"
//#include "i2c.h"
#include "stm32f4xx_hal.h"

HAL_StatusTypeDef i2c_write(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t length, uint8_t *data) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	460b      	mov	r3, r1
 8000f02:	71bb      	strb	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Write(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	797b      	ldrb	r3, [r7, #5]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	200a      	movs	r0, #10
 8000f1a:	9002      	str	r0, [sp, #8]
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <i2c_write+0x40>)
 8000f26:	f004 fe83 	bl	8005c30 <HAL_I2C_Mem_Write>
 8000f2a:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000108 	.word	0x20000108

08000f38 <i2c_read>:

HAL_StatusTypeDef i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length,
    uint8_t *data) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	460b      	mov	r3, r1
 8000f46:	71bb      	strb	r3, [r7, #6]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Read(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	797b      	ldrb	r3, [r7, #5]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	9002      	str	r0, [sp, #8]
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <i2c_read+0x40>)
 8000f6a:	f004 ff5b 	bl	8005e24 <HAL_I2C_Mem_Read>
 8000f6e:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);

}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000108 	.word	0x20000108

08000f7c <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000f86:	4b29      	ldr	r3, [pc, #164]	@ (800102c <set_int_enable+0xb0>)
 8000f88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d01c      	beq.n	8000fca <set_int_enable+0x4e>
        if (enable)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8000f96:	2302      	movs	r3, #2
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e001      	b.n	8000fa0 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <set_int_enable+0xb0>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	7818      	ldrb	r0, [r3, #0]
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <set_int_enable+0xb0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	7c59      	ldrb	r1, [r3, #17]
 8000fac:	f107 030f 	add.w	r3, r7, #15
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f7ff ff9f 	bl	8000ef4 <i2c_write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <set_int_enable+0x46>
            return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	e030      	b.n	8001024 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <set_int_enable+0xb0>)
 8000fc6:	745a      	strb	r2, [r3, #17]
 8000fc8:	e02b      	b.n	8001022 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <set_int_enable+0xb0>)
 8000fcc:	7a9b      	ldrb	r3, [r3, #10]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <set_int_enable+0x5c>
            return -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e025      	b.n	8001024 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <set_int_enable+0x6e>
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <set_int_enable+0xb0>)
 8000fe0:	7c5b      	ldrb	r3, [r3, #17]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <set_int_enable+0x6e>
            return 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e01c      	b.n	8001024 <set_int_enable+0xa8>
        if (enable)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e001      	b.n	8000ffa <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <set_int_enable+0xb0>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	7818      	ldrb	r0, [r3, #0]
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <set_int_enable+0xb0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	7c59      	ldrb	r1, [r3, #17]
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	2201      	movs	r2, #1
 800100c:	f7ff ff72 	bl	8000ef4 <i2c_write>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <set_int_enable+0xa0>
            return -1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e003      	b.n	8001024 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	4b03      	ldr	r3, [pc, #12]	@ (800102c <set_int_enable+0xb0>)
 8001020:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000

08001030 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = BIT_RESET;
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800103c:	4b7e      	ldr	r3, [pc, #504]	@ (8001238 <mpu_init+0x208>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	7818      	ldrb	r0, [r3, #0]
 8001042:	4b7d      	ldr	r3, [pc, #500]	@ (8001238 <mpu_init+0x208>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	7d59      	ldrb	r1, [r3, #21]
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2201      	movs	r2, #1
 800104e:	f7ff ff51 	bl	8000ef4 <i2c_write>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <mpu_init+0x2e>
        return -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	e0e7      	b.n	800122e <mpu_init+0x1fe>
    delay_ms(100);
 800105e:	2064      	movs	r0, #100	@ 0x64
 8001060:	f004 fa14 	bl	800548c <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001068:	4b73      	ldr	r3, [pc, #460]	@ (8001238 <mpu_init+0x208>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	7818      	ldrb	r0, [r3, #0]
 800106e:	4b72      	ldr	r3, [pc, #456]	@ (8001238 <mpu_init+0x208>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	7d59      	ldrb	r1, [r3, #21]
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2201      	movs	r2, #1
 800107a:	f7ff ff3b 	bl	8000ef4 <i2c_write>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <mpu_init+0x5a>
        return -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	e0d1      	b.n	800122e <mpu_init+0x1fe>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 800108a:	4b6b      	ldr	r3, [pc, #428]	@ (8001238 <mpu_init+0x208>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	7818      	ldrb	r0, [r3, #0]
 8001090:	4b69      	ldr	r3, [pc, #420]	@ (8001238 <mpu_init+0x208>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	7e59      	ldrb	r1, [r3, #25]
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2206      	movs	r2, #6
 800109c:	f7ff ff4c 	bl	8000f38 <i2c_read>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <mpu_init+0x7c>
        return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e0c0      	b.n	800122e <mpu_init+0x1fe>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	b25a      	sxtb	r2, r3
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 80010c8:	7a7b      	ldrb	r3, [r7, #9]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	73fb      	strb	r3, [r7, #15]

    if (rev) {
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d010      	beq.n	8001100 <mpu_init+0xd0>
        /* Congrats, these parts are better. */
        if (rev == 1)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d103      	bne.n	80010ec <mpu_init+0xbc>
            st.chip_cfg.accel_half = 1;
 80010e4:	4b54      	ldr	r3, [pc, #336]	@ (8001238 <mpu_init+0x208>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	74da      	strb	r2, [r3, #19]
 80010ea:	e02e      	b.n	800114a <mpu_init+0x11a>
        else if (rev == 2)
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d103      	bne.n	80010fa <mpu_init+0xca>
            st.chip_cfg.accel_half = 0;
 80010f2:	4b51      	ldr	r3, [pc, #324]	@ (8001238 <mpu_init+0x208>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	74da      	strb	r2, [r3, #19]
 80010f8:	e027      	b.n	800114a <mpu_init+0x11a>
        else {
            log_e("Unsupported software product rev %d.\n", rev);
            return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e096      	b.n	800122e <mpu_init+0x1fe>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 8001100:	4b4d      	ldr	r3, [pc, #308]	@ (8001238 <mpu_init+0x208>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	7818      	ldrb	r0, [r3, #0]
 8001106:	4b4c      	ldr	r3, [pc, #304]	@ (8001238 <mpu_init+0x208>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	78d9      	ldrb	r1, [r3, #3]
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2201      	movs	r2, #1
 8001112:	f7ff ff11 	bl	8000f38 <i2c_read>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <mpu_init+0xf2>
            return -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	e085      	b.n	800122e <mpu_init+0x1fe>
        rev = data[0] & 0x0F;
 8001122:	7a3b      	ldrb	r3, [r7, #8]
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	73fb      	strb	r3, [r7, #15]
        if (!rev) {
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <mpu_init+0x106>
            log_e("Product ID read as 0 indicates device is either "
                "incompatible or an MPU3050.\n");
            return -1;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	e07b      	b.n	800122e <mpu_init+0x1fe>
        } else if (rev == 4) {
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b04      	cmp	r3, #4
 800113a:	d103      	bne.n	8001144 <mpu_init+0x114>
            log_i("Half sensitivity part found.\n");
            st.chip_cfg.accel_half = 1;
 800113c:	4b3e      	ldr	r3, [pc, #248]	@ (8001238 <mpu_init+0x208>)
 800113e:	2201      	movs	r2, #1
 8001140:	74da      	strb	r2, [r3, #19]
 8001142:	e002      	b.n	800114a <mpu_init+0x11a>
        } else
            st.chip_cfg.accel_half = 0;
 8001144:	4b3c      	ldr	r3, [pc, #240]	@ (8001238 <mpu_init+0x208>)
 8001146:	2200      	movs	r2, #0
 8001148:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800114a:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <mpu_init+0x208>)
 800114c:	22ff      	movs	r2, #255	@ 0xff
 800114e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001150:	4b39      	ldr	r3, [pc, #228]	@ (8001238 <mpu_init+0x208>)
 8001152:	22ff      	movs	r2, #255	@ 0xff
 8001154:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8001156:	4b38      	ldr	r3, [pc, #224]	@ (8001238 <mpu_init+0x208>)
 8001158:	22ff      	movs	r2, #255	@ 0xff
 800115a:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800115c:	4b36      	ldr	r3, [pc, #216]	@ (8001238 <mpu_init+0x208>)
 800115e:	22ff      	movs	r2, #255	@ 0xff
 8001160:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001162:	4b35      	ldr	r3, [pc, #212]	@ (8001238 <mpu_init+0x208>)
 8001164:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001168:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800116a:	4b33      	ldr	r3, [pc, #204]	@ (8001238 <mpu_init+0x208>)
 800116c:	22ff      	movs	r2, #255	@ 0xff
 800116e:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001170:	4b31      	ldr	r3, [pc, #196]	@ (8001238 <mpu_init+0x208>)
 8001172:	22ff      	movs	r2, #255	@ 0xff
 8001174:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001176:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <mpu_init+0x208>)
 8001178:	2201      	movs	r2, #1
 800117a:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800117c:	4b2e      	ldr	r3, [pc, #184]	@ (8001238 <mpu_init+0x208>)
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 8001184:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <mpu_init+0x208>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 800118c:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <mpu_init+0x208>)
 800118e:	2200      	movs	r2, #0
 8001190:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8001192:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <mpu_init+0x208>)
 8001194:	2200      	movs	r2, #0
 8001196:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001198:	220c      	movs	r2, #12
 800119a:	2100      	movs	r1, #0
 800119c:	4827      	ldr	r0, [pc, #156]	@ (800123c <mpu_init+0x20c>)
 800119e:	f006 fea3 	bl	8007ee8 <memset>
    st.chip_cfg.dmp_on = 0;
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <mpu_init+0x208>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <mpu_init+0x208>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <mpu_init+0x208>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 80011b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011bc:	f000 f9f4 	bl	80015a8 <mpu_set_gyro_fsr>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <mpu_init+0x19c>
        return -1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e030      	b.n	800122e <mpu_init+0x1fe>
    if (mpu_set_accel_fsr(2))
 80011cc:	2002      	movs	r0, #2
 80011ce:	f000 fa79 	bl	80016c4 <mpu_set_accel_fsr>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <mpu_init+0x1ae>
        return -1;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e027      	b.n	800122e <mpu_init+0x1fe>
    if (mpu_set_lpf(42))
 80011de:	202a      	movs	r0, #42	@ 0x2a
 80011e0:	f000 fb16 	bl	8001810 <mpu_set_lpf>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <mpu_init+0x1c0>
        return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e01e      	b.n	800122e <mpu_init+0x1fe>
    if (mpu_set_sample_rate(200)) // TODO change 50 --> 200
 80011f0:	20c8      	movs	r0, #200	@ 0xc8
 80011f2:	f000 fb75 	bl	80018e0 <mpu_set_sample_rate>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <mpu_init+0x1d2>
        return -1;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	e015      	b.n	800122e <mpu_init+0x1fe>
    if (mpu_configure_fifo(0))
 8001202:	2000      	movs	r0, #0
 8001204:	f000 fc5a 	bl	8001abc <mpu_configure_fifo>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <mpu_init+0x1e4>
        return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e00c      	b.n	800122e <mpu_init+0x1fe>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8001214:	2000      	movs	r0, #0
 8001216:	f000 fda7 	bl	8001d68 <mpu_set_bypass>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <mpu_init+0x1f6>
        return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	e003      	b.n	800122e <mpu_init+0x1fe>
#endif

    mpu_set_sensors(0);
 8001226:	2000      	movs	r0, #0
 8001228:	f000 fc9a 	bl	8001b60 <mpu_set_sensors>
    return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000
 800123c:	20000016 	.word	0x20000016

08001240 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b28      	cmp	r3, #40	@ 0x28
 800124e:	d902      	bls.n	8001256 <mpu_lp_accel_mode+0x16>
        return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	e06a      	b.n	800132c <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d11c      	bne.n	8001296 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 800125c:	2000      	movs	r0, #0
 800125e:	f000 fe49 	bl	8001ef4 <mpu_set_int_latched>
        tmp[0] = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001266:	2307      	movs	r3, #7
 8001268:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800126a:	4b32      	ldr	r3, [pc, #200]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	7818      	ldrb	r0, [r3, #0]
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	7d59      	ldrb	r1, [r3, #21]
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2202      	movs	r2, #2
 800127c:	f7ff fe3a 	bl	8000ef4 <i2c_write>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <mpu_lp_accel_mode+0x4c>
            return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e04f      	b.n	800132c <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 800128c:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 800128e:	2200      	movs	r2, #0
 8001290:	751a      	strb	r2, [r3, #20]
        return 0;
 8001292:	2300      	movs	r3, #0
 8001294:	e04a      	b.n	800132c <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f000 fe2c 	bl	8001ef4 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 800129c:	2320      	movs	r3, #32
 800129e:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d105      	bne.n	80012b2 <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 80012a6:	2300      	movs	r3, #0
 80012a8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f000 fab0 	bl	8001810 <mpu_set_lpf>
 80012b0:	e016      	b.n	80012e0 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d805      	bhi.n	80012c4 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 80012b8:	2301      	movs	r3, #1
 80012ba:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 80012bc:	2005      	movs	r0, #5
 80012be:	f000 faa7 	bl	8001810 <mpu_set_lpf>
 80012c2:	e00d      	b.n	80012e0 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b14      	cmp	r3, #20
 80012c8:	d805      	bhi.n	80012d6 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 80012ca:	2302      	movs	r3, #2
 80012cc:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f000 fa9e 	bl	8001810 <mpu_set_lpf>
 80012d4:	e004      	b.n	80012e0 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 80012d6:	2303      	movs	r3, #3
 80012d8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 80012da:	2014      	movs	r0, #20
 80012dc:	f000 fa98 	bl	8001810 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 80012e0:	7b7b      	ldrb	r3, [r7, #13]
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	f043 0307 	orr.w	r3, r3, #7
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80012f0:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	7818      	ldrb	r0, [r3, #0]
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	7d59      	ldrb	r1, [r3, #21]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2202      	movs	r2, #2
 8001302:	f7ff fdf7 	bl	8000ef4 <i2c_write>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <mpu_lp_accel_mode+0xd2>
        return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	e00c      	b.n	800132c <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 8001314:	2208      	movs	r2, #8
 8001316:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 800131a:	2200      	movs	r2, #0
 800131c:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <mpu_lp_accel_mode+0xf4>)
 8001320:	2201      	movs	r2, #1
 8001322:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fbc9 	bl	8001abc <mpu_configure_fifo>

    return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000

08001338 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800133e:	4b7e      	ldr	r3, [pc, #504]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001340:	7a9b      	ldrb	r3, [r3, #10]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <mpu_reset_fifo+0x14>
        return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e0f1      	b.n	8001530 <mpu_reset_fifo+0x1f8>

    data = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001350:	4b79      	ldr	r3, [pc, #484]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	7818      	ldrb	r0, [r3, #0]
 8001356:	4b78      	ldr	r3, [pc, #480]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	7c59      	ldrb	r1, [r3, #17]
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	2201      	movs	r2, #1
 8001360:	f7ff fdc8 	bl	8000ef4 <i2c_write>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <mpu_reset_fifo+0x38>
        return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e0df      	b.n	8001530 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001370:	4b71      	ldr	r3, [pc, #452]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	7818      	ldrb	r0, [r3, #0]
 8001376:	4b70      	ldr	r3, [pc, #448]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7959      	ldrb	r1, [r3, #5]
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	2201      	movs	r2, #1
 8001380:	f7ff fdb8 	bl	8000ef4 <i2c_write>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <mpu_reset_fifo+0x58>
        return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e0cf      	b.n	8001530 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001390:	4b69      	ldr	r3, [pc, #420]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	7818      	ldrb	r0, [r3, #0]
 8001396:	4b68      	ldr	r3, [pc, #416]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	7919      	ldrb	r1, [r3, #4]
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	2201      	movs	r2, #1
 80013a0:	f7ff fda8 	bl	8000ef4 <i2c_write>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <mpu_reset_fifo+0x78>
        return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e0bf      	b.n	8001530 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 80013b0:	4b61      	ldr	r3, [pc, #388]	@ (8001538 <mpu_reset_fifo+0x200>)
 80013b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d05c      	beq.n	8001474 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80013ba:	230c      	movs	r3, #12
 80013bc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013be:	4b5e      	ldr	r3, [pc, #376]	@ (8001538 <mpu_reset_fifo+0x200>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	7818      	ldrb	r0, [r3, #0]
 80013c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001538 <mpu_reset_fifo+0x200>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	7919      	ldrb	r1, [r3, #4]
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	2201      	movs	r2, #1
 80013ce:	f7ff fd91 	bl	8000ef4 <i2c_write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <mpu_reset_fifo+0xa6>
            return -1;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	e0a8      	b.n	8001530 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80013de:	2032      	movs	r0, #50	@ 0x32
 80013e0:	f004 f854 	bl	800548c <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80013e4:	23c0      	movs	r3, #192	@ 0xc0
 80013e6:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80013e8:	4b53      	ldr	r3, [pc, #332]	@ (8001538 <mpu_reset_fifo+0x200>)
 80013ea:	7a9b      	ldrb	r3, [r3, #10]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	7818      	ldrb	r0, [r3, #0]
 8001404:	4b4c      	ldr	r3, [pc, #304]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	7919      	ldrb	r1, [r3, #4]
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	2201      	movs	r2, #1
 800140e:	f7ff fd71 	bl	8000ef4 <i2c_write>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <mpu_reset_fifo+0xe6>
            return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	e088      	b.n	8001530 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 800141e:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001420:	7c5b      	ldrb	r3, [r3, #17]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8001426:	2302      	movs	r3, #2
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	e001      	b.n	8001430 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	7818      	ldrb	r0, [r3, #0]
 8001436:	4b40      	ldr	r3, [pc, #256]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	7c59      	ldrb	r1, [r3, #17]
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	2201      	movs	r2, #1
 8001440:	f7ff fd58 	bl	8000ef4 <i2c_write>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <mpu_reset_fifo+0x118>
            return -1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e06f      	b.n	8001530 <mpu_reset_fifo+0x1f8>
        data = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001454:	4b38      	ldr	r3, [pc, #224]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <mpu_reset_fifo+0x200>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	7959      	ldrb	r1, [r3, #5]
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	2201      	movs	r2, #1
 8001464:	f7ff fd46 	bl	8000ef4 <i2c_write>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d05f      	beq.n	800152e <mpu_reset_fifo+0x1f6>
            return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e05d      	b.n	8001530 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8001474:	2304      	movs	r3, #4
 8001476:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001478:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <mpu_reset_fifo+0x200>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	7818      	ldrb	r0, [r3, #0]
 800147e:	4b2e      	ldr	r3, [pc, #184]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	7919      	ldrb	r1, [r3, #4]
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	2201      	movs	r2, #1
 8001488:	f7ff fd34 	bl	8000ef4 <i2c_write>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <mpu_reset_fifo+0x160>
            return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e04b      	b.n	8001530 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001498:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <mpu_reset_fifo+0x200>)
 800149a:	7c9b      	ldrb	r3, [r3, #18]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <mpu_reset_fifo+0x174>
 80014a0:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <mpu_reset_fifo+0x200>)
 80014a2:	7a9b      	ldrb	r3, [r3, #10]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 80014ac:	2340      	movs	r3, #64	@ 0x40
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	e001      	b.n	80014b6 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80014b2:	2360      	movs	r3, #96	@ 0x60
 80014b4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80014b6:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <mpu_reset_fifo+0x200>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	7818      	ldrb	r0, [r3, #0]
 80014bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <mpu_reset_fifo+0x200>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	7919      	ldrb	r1, [r3, #4]
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	2201      	movs	r2, #1
 80014c6:	f7ff fd15 	bl	8000ef4 <i2c_write>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <mpu_reset_fifo+0x19e>
            return -1;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	e02c      	b.n	8001530 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80014d6:	2032      	movs	r0, #50	@ 0x32
 80014d8:	f003 ffd8 	bl	800548c <HAL_Delay>
        if (st.chip_cfg.int_enable)
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <mpu_reset_fifo+0x200>)
 80014de:	7c5b      	ldrb	r3, [r3, #17]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 80014e4:	2301      	movs	r3, #1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	e001      	b.n	80014ee <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <mpu_reset_fifo+0x200>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	7818      	ldrb	r0, [r3, #0]
 80014f4:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <mpu_reset_fifo+0x200>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	7c59      	ldrb	r1, [r3, #17]
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	2201      	movs	r2, #1
 80014fe:	f7ff fcf9 	bl	8000ef4 <i2c_write>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <mpu_reset_fifo+0x1d6>
            return -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	e010      	b.n	8001530 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	7818      	ldrb	r0, [r3, #0]
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <mpu_reset_fifo+0x200>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	7959      	ldrb	r1, [r3, #5]
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <mpu_reset_fifo+0x204>)
 800151c:	2201      	movs	r2, #1
 800151e:	f7ff fce9 	bl	8000ef4 <i2c_write>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <mpu_reset_fifo+0x1f6>
            return -1;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	e000      	b.n	8001530 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	20000010 	.word	0x20000010

08001540 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <mpu_get_gyro_fsr+0x64>)
 800154a:	7a1b      	ldrb	r3, [r3, #8]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d81e      	bhi.n	800158e <mpu_get_gyro_fsr+0x4e>
 8001550:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <mpu_get_gyro_fsr+0x18>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	08001569 	.word	0x08001569
 800155c:	08001571 	.word	0x08001571
 8001560:	0800157b 	.word	0x0800157b
 8001564:	08001585 	.word	0x08001585
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	22fa      	movs	r2, #250	@ 0xfa
 800156c:	801a      	strh	r2, [r3, #0]
        break;
 800156e:	e012      	b.n	8001596 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001576:	801a      	strh	r2, [r3, #0]
        break;
 8001578:	e00d      	b.n	8001596 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001580:	801a      	strh	r2, [r3, #0]
        break;
 8001582:	e008      	b.n	8001596 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800158a:	801a      	strh	r2, [r3, #0]
        break;
 800158c:	e003      	b.n	8001596 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	801a      	strh	r2, [r3, #0]
        break;
 8001594:	bf00      	nop
    }
    return 0;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000000 	.word	0x20000000

080015a8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <mpu_set_gyro_fsr+0xa4>)
 80015b4:	7a9b      	ldrb	r3, [r3, #10]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <mpu_set_gyro_fsr+0x18>
        return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e041      	b.n	8001644 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015c6:	d017      	beq.n	80015f8 <mpu_set_gyro_fsr+0x50>
 80015c8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015cc:	dc17      	bgt.n	80015fe <mpu_set_gyro_fsr+0x56>
 80015ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015d2:	d00e      	beq.n	80015f2 <mpu_set_gyro_fsr+0x4a>
 80015d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015d8:	dc11      	bgt.n	80015fe <mpu_set_gyro_fsr+0x56>
 80015da:	2bfa      	cmp	r3, #250	@ 0xfa
 80015dc:	d003      	beq.n	80015e6 <mpu_set_gyro_fsr+0x3e>
 80015de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015e2:	d003      	beq.n	80015ec <mpu_set_gyro_fsr+0x44>
 80015e4:	e00b      	b.n	80015fe <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
        break;
 80015ea:	e00b      	b.n	8001604 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 80015ec:	2308      	movs	r3, #8
 80015ee:	73fb      	strb	r3, [r7, #15]
        break;
 80015f0:	e008      	b.n	8001604 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 80015f2:	2310      	movs	r3, #16
 80015f4:	73fb      	strb	r3, [r7, #15]
        break;
 80015f6:	e005      	b.n	8001604 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80015f8:	2318      	movs	r3, #24
 80015fa:	73fb      	strb	r3, [r7, #15]
        break;
 80015fc:	e002      	b.n	8001604 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e01f      	b.n	8001644 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <mpu_set_gyro_fsr+0xa4>)
 8001606:	7a1a      	ldrb	r2, [r3, #8]
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	429a      	cmp	r2, r3
 8001610:	d101      	bne.n	8001616 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8001612:	2300      	movs	r3, #0
 8001614:	e016      	b.n	8001644 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <mpu_set_gyro_fsr+0xa4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	7818      	ldrb	r0, [r3, #0]
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <mpu_set_gyro_fsr+0xa4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	7999      	ldrb	r1, [r3, #6]
 8001622:	f107 030f 	add.w	r3, r7, #15
 8001626:	2201      	movs	r2, #1
 8001628:	f7ff fc64 	bl	8000ef4 <i2c_write>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <mpu_set_gyro_fsr+0x90>
        return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e005      	b.n	8001644 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b03      	ldr	r3, [pc, #12]	@ (800164c <mpu_set_gyro_fsr+0xa4>)
 8001640:	721a      	strb	r2, [r3, #8]
    return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000

08001650 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <mpu_get_accel_fsr+0x70>)
 800165a:	7a5b      	ldrb	r3, [r3, #9]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d81b      	bhi.n	8001698 <mpu_get_accel_fsr+0x48>
 8001660:	a201      	add	r2, pc, #4	@ (adr r2, 8001668 <mpu_get_accel_fsr+0x18>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	08001681 	.word	0x08001681
 8001670:	08001689 	.word	0x08001689
 8001674:	08001691 	.word	0x08001691
    case INV_FSR_2G:
        fsr[0] = 2;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
        break;
 800167e:	e00e      	b.n	800169e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	701a      	strb	r2, [r3, #0]
        break;
 8001686:	e00a      	b.n	800169e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2208      	movs	r2, #8
 800168c:	701a      	strb	r2, [r3, #0]
        break;
 800168e:	e006      	b.n	800169e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2210      	movs	r2, #16
 8001694:	701a      	strb	r2, [r3, #0]
        break;
 8001696:	e002      	b.n	800169e <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	e00a      	b.n	80016b4 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <mpu_get_accel_fsr+0x70>)
 80016a0:	7cdb      	ldrb	r3, [r3, #19]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
    return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000000 	.word	0x20000000

080016c4 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80016ce:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <mpu_set_accel_fsr+0xcc>)
 80016d0:	7a9b      	ldrb	r3, [r3, #10]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <mpu_set_accel_fsr+0x18>
        return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e054      	b.n	8001786 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	3b02      	subs	r3, #2
 80016e0:	2b0e      	cmp	r3, #14
 80016e2:	d82d      	bhi.n	8001740 <mpu_set_accel_fsr+0x7c>
 80016e4:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <mpu_set_accel_fsr+0x28>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	08001729 	.word	0x08001729
 80016f0:	08001741 	.word	0x08001741
 80016f4:	0800172f 	.word	0x0800172f
 80016f8:	08001741 	.word	0x08001741
 80016fc:	08001741 	.word	0x08001741
 8001700:	08001741 	.word	0x08001741
 8001704:	08001735 	.word	0x08001735
 8001708:	08001741 	.word	0x08001741
 800170c:	08001741 	.word	0x08001741
 8001710:	08001741 	.word	0x08001741
 8001714:	08001741 	.word	0x08001741
 8001718:	08001741 	.word	0x08001741
 800171c:	08001741 	.word	0x08001741
 8001720:	08001741 	.word	0x08001741
 8001724:	0800173b 	.word	0x0800173b
    case 2:
        data = INV_FSR_2G << 3;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
        break;
 800172c:	e00b      	b.n	8001746 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800172e:	2308      	movs	r3, #8
 8001730:	73fb      	strb	r3, [r7, #15]
        break;
 8001732:	e008      	b.n	8001746 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8001734:	2310      	movs	r3, #16
 8001736:	73fb      	strb	r3, [r7, #15]
        break;
 8001738:	e005      	b.n	8001746 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800173a:	2318      	movs	r3, #24
 800173c:	73fb      	strb	r3, [r7, #15]
        break;
 800173e:	e002      	b.n	8001746 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	e01f      	b.n	8001786 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <mpu_set_accel_fsr+0xcc>)
 8001748:	7a5a      	ldrb	r2, [r3, #9]
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	429a      	cmp	r2, r3
 8001752:	d101      	bne.n	8001758 <mpu_set_accel_fsr+0x94>
        return 0;
 8001754:	2300      	movs	r3, #0
 8001756:	e016      	b.n	8001786 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <mpu_set_accel_fsr+0xcc>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	7818      	ldrb	r0, [r3, #0]
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <mpu_set_accel_fsr+0xcc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	79d9      	ldrb	r1, [r3, #7]
 8001764:	f107 030f 	add.w	r3, r7, #15
 8001768:	2201      	movs	r2, #1
 800176a:	f7ff fbc3 	bl	8000ef4 <i2c_write>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <mpu_set_accel_fsr+0xb6>
        return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	e005      	b.n	8001786 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <mpu_set_accel_fsr+0xcc>)
 8001782:	725a      	strb	r2, [r3, #9]
    return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000

08001794 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <mpu_get_lpf+0x78>)
 800179e:	7adb      	ldrb	r3, [r3, #11]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d826      	bhi.n	80017f4 <mpu_get_lpf+0x60>
 80017a6:	a201      	add	r2, pc, #4	@ (adr r2, 80017ac <mpu_get_lpf+0x18>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017cd 	.word	0x080017cd
 80017b4:	080017d5 	.word	0x080017d5
 80017b8:	080017dd 	.word	0x080017dd
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	080017ed 	.word	0x080017ed
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	22bc      	movs	r2, #188	@ 0xbc
 80017c8:	801a      	strh	r2, [r3, #0]
        break;
 80017ca:	e017      	b.n	80017fc <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2262      	movs	r2, #98	@ 0x62
 80017d0:	801a      	strh	r2, [r3, #0]
        break;
 80017d2:	e013      	b.n	80017fc <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	222a      	movs	r2, #42	@ 0x2a
 80017d8:	801a      	strh	r2, [r3, #0]
        break;
 80017da:	e00f      	b.n	80017fc <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2214      	movs	r2, #20
 80017e0:	801a      	strh	r2, [r3, #0]
        break;
 80017e2:	e00b      	b.n	80017fc <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	220a      	movs	r2, #10
 80017e8:	801a      	strh	r2, [r3, #0]
        break;
 80017ea:	e007      	b.n	80017fc <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2205      	movs	r2, #5
 80017f0:	801a      	strh	r2, [r3, #0]
        break;
 80017f2:	e003      	b.n	80017fc <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
        break;
 80017fa:	bf00      	nop
    }
    return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000

08001810 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800181a:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <mpu_set_lpf+0x98>)
 800181c:	7a9b      	ldrb	r3, [r3, #10]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <mpu_set_lpf+0x18>
        return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e03b      	b.n	80018a0 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	2bbb      	cmp	r3, #187	@ 0xbb
 800182c:	d902      	bls.n	8001834 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	e019      	b.n	8001868 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	2b61      	cmp	r3, #97	@ 0x61
 8001838:	d902      	bls.n	8001840 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800183a:	2302      	movs	r3, #2
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e013      	b.n	8001868 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	2b29      	cmp	r3, #41	@ 0x29
 8001844:	d902      	bls.n	800184c <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8001846:	2303      	movs	r3, #3
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e00d      	b.n	8001868 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	2b13      	cmp	r3, #19
 8001850:	d902      	bls.n	8001858 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001852:	2304      	movs	r3, #4
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e007      	b.n	8001868 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	2b09      	cmp	r3, #9
 800185c:	d902      	bls.n	8001864 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800185e:	2305      	movs	r3, #5
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e001      	b.n	8001868 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001864:	2306      	movs	r3, #6
 8001866:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <mpu_set_lpf+0x98>)
 800186a:	7ada      	ldrb	r2, [r3, #11]
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	429a      	cmp	r2, r3
 8001870:	d101      	bne.n	8001876 <mpu_set_lpf+0x66>
        return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e014      	b.n	80018a0 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <mpu_set_lpf+0x98>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	7818      	ldrb	r0, [r3, #0]
 800187c:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <mpu_set_lpf+0x98>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	7899      	ldrb	r1, [r3, #2]
 8001882:	f107 030f 	add.w	r3, r7, #15
 8001886:	2201      	movs	r2, #1
 8001888:	f7ff fb34 	bl	8000ef4 <i2c_write>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <mpu_set_lpf+0x88>
        return -1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e003      	b.n	80018a0 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <mpu_set_lpf+0x98>)
 800189c:	72da      	strb	r2, [r3, #11]
    return 0;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000

080018ac <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <mpu_get_sample_rate+0x30>)
 80018b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <mpu_get_sample_rate+0x18>
        return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e004      	b.n	80018ce <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <mpu_get_sample_rate+0x30>)
 80018c6:	89da      	ldrh	r2, [r3, #14]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	801a      	strh	r2, [r3, #0]
    return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000000 	.word	0x20000000

080018e0 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80018ea:	4b2f      	ldr	r3, [pc, #188]	@ (80019a8 <mpu_set_sample_rate+0xc8>)
 80018ec:	7a9b      	ldrb	r3, [r3, #10]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <mpu_set_sample_rate+0x18>
        return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e053      	b.n	80019a0 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <mpu_set_sample_rate+0xc8>)
 80018fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <mpu_set_sample_rate+0x28>
        return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e04b      	b.n	80019a0 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <mpu_set_sample_rate+0xc8>)
 800190a:	7d1b      	ldrb	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00f      	beq.n	8001930 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <mpu_set_sample_rate+0x4a>
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b28      	cmp	r3, #40	@ 0x28
 800191a:	d806      	bhi.n	800192a <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fc8d 	bl	8001240 <mpu_lp_accel_mode>
                return 0;
 8001926:	2300      	movs	r3, #0
 8001928:	e03a      	b.n	80019a0 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fc88 	bl	8001240 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d802      	bhi.n	800193c <mpu_set_sample_rate+0x5c>
            rate = 4;
 8001936:	2304      	movs	r3, #4
 8001938:	80fb      	strh	r3, [r7, #6]
 800193a:	e006      	b.n	800194a <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001942:	d902      	bls.n	800194a <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8001944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001948:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001950:	fb92 f3f3 	sdiv	r3, r2, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <mpu_set_sample_rate+0xc8>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	7818      	ldrb	r0, [r3, #0]
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <mpu_set_sample_rate+0xc8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	7859      	ldrb	r1, [r3, #1]
 8001968:	f107 030f 	add.w	r3, r7, #15
 800196c:	2201      	movs	r2, #1
 800196e:	f7ff fac1 	bl	8000ef4 <i2c_write>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <mpu_set_sample_rate+0x9e>
            return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	e010      	b.n	80019a0 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	3301      	adds	r3, #1
 8001982:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001986:	fb92 f3f3 	sdiv	r3, r2, r3
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <mpu_set_sample_rate+0xc8>)
 800198e:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <mpu_set_sample_rate+0xc8>)
 8001992:	89db      	ldrh	r3, [r3, #14]
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	b29b      	uxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff39 	bl	8001810 <mpu_set_lpf>
        return 0;
 800199e:	2300      	movs	r3, #0
    }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000000 	.word	0x20000000

080019ac <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <mpu_get_gyro_sens+0x5c>)
 80019b6:	7a1b      	ldrb	r3, [r3, #8]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d81b      	bhi.n	80019f4 <mpu_get_gyro_sens+0x48>
 80019bc:	a201      	add	r2, pc, #4	@ (adr r2, 80019c4 <mpu_get_gyro_sens+0x18>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019dd 	.word	0x080019dd
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019ed 	.word	0x080019ed
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <mpu_get_gyro_sens+0x60>)
 80019d8:	601a      	str	r2, [r3, #0]
        break;
 80019da:	e00e      	b.n	80019fa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <mpu_get_gyro_sens+0x64>)
 80019e0:	601a      	str	r2, [r3, #0]
        break;
 80019e2:	e00a      	b.n	80019fa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <mpu_get_gyro_sens+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
        break;
 80019ea:	e006      	b.n	80019fa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <mpu_get_gyro_sens+0x6c>)
 80019f0:	601a      	str	r2, [r3, #0]
        break;
 80019f2:	e002      	b.n	80019fa <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	e000      	b.n	80019fc <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	43030000 	.word	0x43030000
 8001a10:	42830000 	.word	0x42830000
 8001a14:	42033333 	.word	0x42033333
 8001a18:	41833333 	.word	0x41833333

08001a1c <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <mpu_get_accel_sens+0x78>)
 8001a26:	7a5b      	ldrb	r3, [r3, #9]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d81f      	bhi.n	8001a6c <mpu_get_accel_sens+0x50>
 8001a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <mpu_get_accel_sens+0x18>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a4f 	.word	0x08001a4f
 8001a3c:	08001a59 	.word	0x08001a59
 8001a40:	08001a63 	.word	0x08001a63
    case INV_FSR_2G:
        sens[0] = 16384;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a4a:	801a      	strh	r2, [r3, #0]
        break;
 8001a4c:	e011      	b.n	8001a72 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8001a54:	801a      	strh	r2, [r3, #0]
        break;
 8001a56:	e00c      	b.n	8001a72 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a5e:	801a      	strh	r2, [r3, #0]
        break;
 8001a60:	e007      	b.n	8001a72 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a68:	801a      	strh	r2, [r3, #0]
        break;
 8001a6a:	e002      	b.n	8001a72 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	e00a      	b.n	8001a88 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <mpu_get_accel_sens+0x78>)
 8001a74:	7cdb      	ldrb	r3, [r3, #19]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	801a      	strh	r2, [r3, #0]
    return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20000000 	.word	0x20000000

08001a98 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <mpu_get_fifo_config+0x20>)
 8001aa2:	7c1a      	ldrb	r2, [r3, #16]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	701a      	strb	r2, [r3, #0]
    return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000000 	.word	0x20000000

08001abc <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <mpu_configure_fifo+0x24>
        return 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e038      	b.n	8001b52 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001ae2:	7a9b      	ldrb	r3, [r3, #10]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <mpu_configure_fifo+0x32>
            return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e031      	b.n	8001b52 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001af0:	7c1b      	ldrb	r3, [r3, #16]
 8001af2:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001af6:	7a9a      	ldrb	r2, [r3, #10]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4013      	ands	r3, r2
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001b00:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001b04:	7c1b      	ldrb	r3, [r3, #16]
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d003      	beq.n	8001b14 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e001      	b.n	8001b18 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <mpu_configure_fifo+0x6a>
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001b20:	7d1b      	ldrb	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff fa28 	bl	8000f7c <set_int_enable>
 8001b2c:	e002      	b.n	8001b34 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff fa24 	bl	8000f7c <set_int_enable>
        if (sensors) {
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8001b3a:	f7ff fbfd 	bl	8001338 <mpu_reset_fifo>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8001b44:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <mpu_configure_fifo+0xa0>)
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	7413      	strb	r3, [r2, #16]
                return -1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e000      	b.n	8001b52 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000

08001b60 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e007      	b.n	8001b8a <mpu_set_sensors+0x2a>
    else if (sensors)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <mpu_set_sensors+0x26>
        data = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e001      	b.n	8001b8a <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8001b86:	2340      	movs	r3, #64	@ 0x40
 8001b88:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001b8a:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	7818      	ldrb	r0, [r3, #0]
 8001b90:	4b35      	ldr	r3, [pc, #212]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	7d59      	ldrb	r1, [r3, #21]
 8001b96:	f107 030f 	add.w	r3, r7, #15
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f7ff f9aa 	bl	8000ef4 <i2c_write>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8001ba6:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	729a      	strb	r2, [r3, #10]
        return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb0:	e056      	b.n	8001c60 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001bbc:	731a      	strb	r2, [r3, #12]

    data = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d104      	bne.n	8001bea <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d104      	bne.n	8001c12 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	7818      	ldrb	r0, [r3, #0]
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	7d99      	ldrb	r1, [r3, #22]
 8001c1e:	f107 030f 	add.w	r3, r7, #15
 8001c22:	2201      	movs	r2, #1
 8001c24:	f7ff f966 	bl	8000ef4 <i2c_write>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	729a      	strb	r2, [r3, #10]
        return -1;
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	e012      	b.n	8001c60 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <mpu_set_sensors+0xec>
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d002      	beq.n	8001c4c <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 f954 	bl	8001ef4 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <mpu_set_sensors+0x108>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8001c58:	2032      	movs	r0, #50	@ 0x32
 8001c5a:	f003 fc17 	bl	800548c <HAL_Delay>
    return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000000 	.word	0x20000000

08001c6c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <mpu_read_fifo_stream+0x1e>
        return -1;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	e068      	b.n	8001d5c <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8001c8a:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001c8c:	7a9b      	ldrb	r3, [r3, #10]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <mpu_read_fifo_stream+0x2c>
        return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e061      	b.n	8001d5c <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001c98:	4b32      	ldr	r3, [pc, #200]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	7818      	ldrb	r0, [r3, #0]
 8001c9e:	4b31      	ldr	r3, [pc, #196]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	7b19      	ldrb	r1, [r3, #12]
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f7ff f945 	bl	8000f38 <i2c_read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <mpu_read_fifo_stream+0x4e>
        return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb8:	e050      	b.n	8001d5c <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001cba:	7d3b      	ldrb	r3, [r7, #20]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	7d7b      	ldrb	r3, [r7, #21]
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8001cca:	8afa      	ldrh	r2, [r7, #22]
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d205      	bcs.n	8001cde <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
        return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	e03e      	b.n	8001d5c <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	885b      	ldrh	r3, [r3, #2]
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	8afa      	ldrh	r2, [r7, #22]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d91a      	bls.n	8001d24 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001cee:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	7818      	ldrb	r0, [r3, #0]
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	7cd9      	ldrb	r1, [r3, #19]
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f7ff f91a 	bl	8000f38 <i2c_read>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <mpu_read_fifo_stream+0xa4>
            return -1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e025      	b.n	8001d5c <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001d10:	7d3b      	ldrb	r3, [r7, #20]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 8001d1a:	f7ff fb0d 	bl	8001338 <mpu_reset_fifo>
            return -2;
 8001d1e:	f06f 0301 	mvn.w	r3, #1
 8001d22:	e01b      	b.n	8001d5c <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001d24:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	7818      	ldrb	r0, [r3, #0]
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <mpu_read_fifo_stream+0xf8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	7b59      	ldrb	r1, [r3, #13]
 8001d30:	89fb      	ldrh	r3, [r7, #14]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f7ff f8ff 	bl	8000f38 <i2c_read>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <mpu_read_fifo_stream+0xda>
        return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	e00a      	b.n	8001d5c <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 8001d46:	8afa      	ldrh	r2, [r7, #22]
 8001d48:	89fb      	ldrh	r3, [r7, #14]
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000000 	.word	0x20000000

08001d68 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8001d72:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001d74:	7c9b      	ldrb	r3, [r3, #18]
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d101      	bne.n	8001d80 <mpu_set_bypass+0x18>
        return 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e0b2      	b.n	8001ee6 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d050      	beq.n	8001e28 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001d86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	7818      	ldrb	r0, [r3, #0]
 8001d8c:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	7919      	ldrb	r1, [r3, #4]
 8001d92:	f107 030f 	add.w	r3, r7, #15
 8001d96:	2201      	movs	r2, #1
 8001d98:	f7ff f8ce 	bl	8000f38 <i2c_read>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <mpu_set_bypass+0x40>
            return -1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e09e      	b.n	8001ee6 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	f023 0320 	bic.w	r3, r3, #32
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001db2:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	7818      	ldrb	r0, [r3, #0]
 8001db8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	7919      	ldrb	r1, [r3, #4]
 8001dbe:	f107 030f 	add.w	r3, r7, #15
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f7ff f896 	bl	8000ef4 <i2c_write>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <mpu_set_bypass+0x6c>
            return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e088      	b.n	8001ee6 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f003 fb59 	bl	800548c <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8001dde:	4b44      	ldr	r3, [pc, #272]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001de0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8001df2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001df4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001e06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	7818      	ldrb	r0, [r3, #0]
 8001e0c:	4b38      	ldr	r3, [pc, #224]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	7dd9      	ldrb	r1, [r3, #23]
 8001e12:	f107 030f 	add.w	r3, r7, #15
 8001e16:	2201      	movs	r2, #1
 8001e18:	f7ff f86c 	bl	8000ef4 <i2c_write>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d05d      	beq.n	8001ede <mpu_set_bypass+0x176>
            return -1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e05e      	b.n	8001ee6 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001e28:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	7818      	ldrb	r0, [r3, #0]
 8001e2e:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	7919      	ldrb	r1, [r3, #4]
 8001e34:	f107 030f 	add.w	r3, r7, #15
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f7ff f87d 	bl	8000f38 <i2c_read>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <mpu_set_bypass+0xe2>
            return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
 8001e48:	e04d      	b.n	8001ee6 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001e4a:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e4c:	7a9b      	ldrb	r3, [r3, #10]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e004      	b.n	8001e6c <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	f023 0320 	bic.w	r3, r3, #32
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001e6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	7818      	ldrb	r0, [r3, #0]
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	7919      	ldrb	r1, [r3, #4]
 8001e78:	f107 030f 	add.w	r3, r7, #15
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f7ff f839 	bl	8000ef4 <i2c_write>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <mpu_set_bypass+0x126>
            return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	e02b      	b.n	8001ee6 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f003 fafc 	bl	800548c <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001e96:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e001      	b.n	8001ea8 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001eaa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	7818      	ldrb	r0, [r3, #0]
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	7dd9      	ldrb	r1, [r3, #23]
 8001ec8:	f107 030f 	add.w	r3, r7, #15
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f7ff f811 	bl	8000ef4 <i2c_write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <mpu_set_bypass+0x176>
            return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	e003      	b.n	8001ee6 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <mpu_set_bypass+0x188>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	7493      	strb	r3, [r2, #18]
    return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8001efe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <mpu_set_int_latched+0x84>)
 8001f00:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001f04:	79fa      	ldrb	r2, [r7, #7]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d101      	bne.n	8001f0e <mpu_set_int_latched+0x1a>
        return 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e030      	b.n	8001f70 <mpu_set_int_latched+0x7c>

    if (enable)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001f14:	2330      	movs	r3, #48	@ 0x30
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e001      	b.n	8001f1e <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <mpu_set_int_latched+0x84>)
 8001f20:	7c9b      	ldrb	r3, [r3, #18]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <mpu_set_int_latched+0x84>)
 8001f32:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <mpu_set_int_latched+0x84>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	7818      	ldrb	r0, [r3, #0]
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <mpu_set_int_latched+0x84>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	7dd9      	ldrb	r1, [r3, #23]
 8001f50:	f107 030f 	add.w	r3, r7, #15
 8001f54:	2201      	movs	r2, #1
 8001f56:	f7fe ffcd 	bl	8000ef4 <i2c_write>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <mpu_set_int_latched+0x72>
        return -1;
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	e004      	b.n	8001f70 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8001f66:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <mpu_set_int_latched+0x84>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000000 	.word	0x20000000

08001f7c <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8001f84:	4b41      	ldr	r3, [pc, #260]	@ (800208c <get_accel_prod_shift+0x110>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	7818      	ldrb	r0, [r3, #0]
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	2204      	movs	r2, #4
 8001f90:	210d      	movs	r1, #13
 8001f92:	f7fe ffd1 	bl	8000f38 <i2c_read>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <get_accel_prod_shift+0x24>
        return 0x07;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	e071      	b.n	8002084 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8001fa0:	7c3b      	ldrb	r3, [r7, #16]
 8001fa2:	10db      	asrs	r3, r3, #3
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	f003 031c 	and.w	r3, r3, #28
 8001faa:	b25a      	sxtb	r2, r3
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	111b      	asrs	r3, r3, #4
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8001fc0:	7c7b      	ldrb	r3, [r7, #17]
 8001fc2:	10db      	asrs	r3, r3, #3
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	f003 031c 	and.w	r3, r3, #28
 8001fca:	b25a      	sxtb	r2, r3
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	109b      	asrs	r3, r3, #2
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8001fe0:	7cbb      	ldrb	r3, [r7, #18]
 8001fe2:	10db      	asrs	r3, r3, #3
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	f003 031c 	and.w	r3, r3, #28
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]
 8002002:	e03b      	b.n	800207c <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	3318      	adds	r3, #24
 8002008:	443b      	add	r3, r7
 800200a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
            continue;
 8002020:	e029      	b.n	8002076 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a19      	ldr	r2, [pc, #100]	@ (8002090 <get_accel_prod_shift+0x114>)
 800202c:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 800202e:	e00f      	b.n	8002050 <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002094 <get_accel_prod_shift+0x118>
 8002048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204c:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	f103 0218 	add.w	r2, r3, #24
 8002056:	443a      	add	r2, r7
 8002058:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800205c:	3a01      	subs	r2, #1
 800205e:	b2d1      	uxtb	r1, r2
 8002060:	f103 0218 	add.w	r2, r3, #24
 8002064:	443a      	add	r2, r7
 8002066:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800206a:	3318      	adds	r3, #24
 800206c:	443b      	add	r3, r7
 800206e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1dc      	bne.n	8002030 <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	3301      	adds	r3, #1
 800207a:	75fb      	strb	r3, [r7, #23]
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d9c0      	bls.n	8002004 <get_accel_prod_shift+0x88>
    }
    return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000000 	.word	0x20000000
 8002090:	3eae147b 	.word	0x3eae147b
 8002094:	3f845a1d 	.word	0x3f845a1d

08002098 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff66 	bl	8001f7c <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b4:	e063      	b.n	800217e <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	440b      	add	r3, r1
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bfb8      	it	lt
 80020d0:	425b      	neglt	r3, r3
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020da:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002190 <accel_self_test+0xf8>
 80020de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e2:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3328      	adds	r3, #40	@ 0x28
 80020ec:	443b      	add	r3, r7
 80020ee:	3b1c      	subs	r3, #28
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	d023      	beq.n	8002146 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	3328      	adds	r3, #40	@ 0x28
 8002104:	443b      	add	r3, r7
 8002106:	3b1c      	subs	r3, #28
 8002108:	ed93 7a00 	vldr	s14, [r3]
 800210c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800211c:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8002120:	edd7 7a06 	vldr	s15, [r7, #24]
 8002124:	eef0 7ae7 	vabs.f32	s15, s15
 8002128:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002194 <accel_self_test+0xfc>
 800212c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	dd20      	ble.n	8002178 <accel_self_test+0xe0>
                result |= 1 << jj;
 8002136:	2201      	movs	r2, #1
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	4313      	orrs	r3, r2
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	e018      	b.n	8002178 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 8002146:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002198 <accel_self_test+0x100>
 800214a:	edd7 7a07 	vldr	s15, [r7, #28]
 800214e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	d408      	bmi.n	800216a <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002158:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800219c <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 800215c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	dd06      	ble.n	8002178 <accel_self_test+0xe0>
            result |= 1 << jj;
 800216a:	2201      	movs	r2, #1
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	4313      	orrs	r3, r2
 8002176:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	3301      	adds	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	2b02      	cmp	r3, #2
 8002182:	dd98      	ble.n	80020b6 <accel_self_test+0x1e>
    }

    return result;
 8002184:	6a3b      	ldr	r3, [r7, #32]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3728      	adds	r7, #40	@ 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	47800000 	.word	0x47800000
 8002194:	3e0f5c29 	.word	0x3e0f5c29
 8002198:	3e99999a 	.word	0x3e99999a
 800219c:	3f733333 	.word	0x3f733333

080021a0 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 80021ae:	4b55      	ldr	r3, [pc, #340]	@ (8002304 <gyro_self_test+0x164>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	7818      	ldrb	r0, [r3, #0]
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	2203      	movs	r2, #3
 80021ba:	210d      	movs	r1, #13
 80021bc:	f7fe febc 	bl	8000f38 <i2c_read>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <gyro_self_test+0x2a>
        return 0x07;
 80021c6:	2307      	movs	r3, #7
 80021c8:	e097      	b.n	80022fa <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 80021ca:	7a3b      	ldrb	r3, [r7, #8]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 80021d4:	7a7b      	ldrb	r3, [r7, #9]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 80021de:	7abb      	ldrb	r3, [r7, #10]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e080      	b.n	80022f0 <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	440b      	add	r3, r1
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	bfb8      	it	lt
 8002208:	425b      	neglt	r3, r3
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002212:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002308 <gyro_self_test+0x168>
 8002216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221a:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 800221e:	f107 0208 	add.w	r2, r7, #8
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d045      	beq.n	80022b8 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 800222c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800230c <gyro_self_test+0x16c>
 8002230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002234:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002310 <gyro_self_test+0x170>
 8002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223c:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002240:	e007      	b.n	8002252 <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 8002242:	edd7 7a05 	vldr	s15, [r7, #20]
 8002246:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002314 <gyro_self_test+0x174>
 800224a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224e:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002252:	f107 0208 	add.w	r2, r7, #8
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	3b01      	subs	r3, #1
 800225e:	b2d9      	uxtb	r1, r3
 8002260:	f107 0208 	add.w	r2, r7, #8
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	460a      	mov	r2, r1
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	f107 0208 	add.w	r2, r7, #8
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e3      	bne.n	8002242 <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 800227a:	edd7 6a04 	vldr	s13, [r7, #16]
 800227e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800228a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800228e:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8002292:	edd7 7a03 	vldr	s15, [r7, #12]
 8002296:	eef0 7ae7 	vabs.f32	s15, s15
 800229a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002318 <gyro_self_test+0x178>
 800229e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a6:	dd20      	ble.n	80022ea <gyro_self_test+0x14a>
                result |= 1 << jj;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	e018      	b.n	80022ea <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 80022b8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80022c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c8:	d408      	bmi.n	80022dc <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 80022ca:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800231c <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 80022ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80022d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	dd06      	ble.n	80022ea <gyro_self_test+0x14a>
            result |= 1 << jj;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f77f af7b 	ble.w	80021ee <gyro_self_test+0x4e>
    }
    return result;
 80022f8:	69bb      	ldr	r3, [r7, #24]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000000 	.word	0x20000000
 8002308:	47800000 	.word	0x47800000
 800230c:	00000083 	.word	0x00000083
 8002310:	454cb000 	.word	0x454cb000
 8002314:	3f85e354 	.word	0x3f85e354
 8002318:	3e0f5c29 	.word	0x3e0f5c29
 800231c:	42d20000 	.word	0x42d20000

08002320 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8002320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002324:	b0b8      	sub	sp, #224	@ 0xe0
 8002326:	af00      	add	r7, sp, #0
 8002328:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 800232c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8002330:	4613      	mov	r3, r2
 8002332:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8002342:	4ba5      	ldr	r3, [pc, #660]	@ (80025d8 <get_st_biases+0x2b8>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	7818      	ldrb	r0, [r3, #0]
 8002348:	4ba3      	ldr	r3, [pc, #652]	@ (80025d8 <get_st_biases+0x2b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	7d59      	ldrb	r1, [r3, #21]
 800234e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002352:	2202      	movs	r2, #2
 8002354:	f7fe fdce 	bl	8000ef4 <i2c_write>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <get_st_biases+0x44>
        return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	e34b      	b.n	80029fc <get_st_biases+0x6dc>
    delay_ms(200);
 8002364:	20c8      	movs	r0, #200	@ 0xc8
 8002366:	f003 f891 	bl	800548c <HAL_Delay>
    data[0] = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8002370:	4b99      	ldr	r3, [pc, #612]	@ (80025d8 <get_st_biases+0x2b8>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	7818      	ldrb	r0, [r3, #0]
 8002376:	4b98      	ldr	r3, [pc, #608]	@ (80025d8 <get_st_biases+0x2b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	7c59      	ldrb	r1, [r3, #17]
 800237c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002380:	2201      	movs	r2, #1
 8002382:	f7fe fdb7 	bl	8000ef4 <i2c_write>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <get_st_biases+0x72>
        return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	e334      	b.n	80029fc <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002392:	4b91      	ldr	r3, [pc, #580]	@ (80025d8 <get_st_biases+0x2b8>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	7818      	ldrb	r0, [r3, #0]
 8002398:	4b8f      	ldr	r3, [pc, #572]	@ (80025d8 <get_st_biases+0x2b8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	7959      	ldrb	r1, [r3, #5]
 800239e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023a2:	2201      	movs	r2, #1
 80023a4:	f7fe fda6 	bl	8000ef4 <i2c_write>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <get_st_biases+0x94>
        return -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e323      	b.n	80029fc <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80023b4:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <get_st_biases+0x2b8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	7818      	ldrb	r0, [r3, #0]
 80023ba:	4b87      	ldr	r3, [pc, #540]	@ (80025d8 <get_st_biases+0x2b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	7d59      	ldrb	r1, [r3, #21]
 80023c0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023c4:	2201      	movs	r2, #1
 80023c6:	f7fe fd95 	bl	8000ef4 <i2c_write>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <get_st_biases+0xb6>
        return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e312      	b.n	80029fc <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80023d6:	4b80      	ldr	r3, [pc, #512]	@ (80025d8 <get_st_biases+0x2b8>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	7818      	ldrb	r0, [r3, #0]
 80023dc:	4b7e      	ldr	r3, [pc, #504]	@ (80025d8 <get_st_biases+0x2b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	7e99      	ldrb	r1, [r3, #26]
 80023e2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023e6:	2201      	movs	r2, #1
 80023e8:	f7fe fd84 	bl	8000ef4 <i2c_write>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <get_st_biases+0xd8>
        return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	e301      	b.n	80029fc <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80023f8:	4b77      	ldr	r3, [pc, #476]	@ (80025d8 <get_st_biases+0x2b8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	7818      	ldrb	r0, [r3, #0]
 80023fe:	4b76      	ldr	r3, [pc, #472]	@ (80025d8 <get_st_biases+0x2b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	7919      	ldrb	r1, [r3, #4]
 8002404:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002408:	2201      	movs	r2, #1
 800240a:	f7fe fd73 	bl	8000ef4 <i2c_write>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <get_st_biases+0xfa>
        return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	e2f0      	b.n	80029fc <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 800241a:	230c      	movs	r3, #12
 800241c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002420:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <get_st_biases+0x2b8>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	7818      	ldrb	r0, [r3, #0]
 8002426:	4b6c      	ldr	r3, [pc, #432]	@ (80025d8 <get_st_biases+0x2b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	7919      	ldrb	r1, [r3, #4]
 800242c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002430:	2201      	movs	r2, #1
 8002432:	f7fe fd5f 	bl	8000ef4 <i2c_write>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <get_st_biases+0x122>
        return -1;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	e2dc      	b.n	80029fc <get_st_biases+0x6dc>
    delay_ms(15);
 8002442:	200f      	movs	r0, #15
 8002444:	f003 f822 	bl	800548c <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002448:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <get_st_biases+0x2b8>)
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	7a5b      	ldrb	r3, [r3, #9]
 800244e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8002452:	4b61      	ldr	r3, [pc, #388]	@ (80025d8 <get_st_biases+0x2b8>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	7818      	ldrb	r0, [r3, #0]
 8002458:	4b5f      	ldr	r3, [pc, #380]	@ (80025d8 <get_st_biases+0x2b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	7899      	ldrb	r1, [r3, #2]
 800245e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002462:	2201      	movs	r2, #1
 8002464:	f7fe fd46 	bl	8000ef4 <i2c_write>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <get_st_biases+0x154>
        return -1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e2c3      	b.n	80029fc <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8002474:	4b58      	ldr	r3, [pc, #352]	@ (80025d8 <get_st_biases+0x2b8>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	7a1b      	ldrb	r3, [r3, #8]
 800247a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800247e:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <get_st_biases+0x2b8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	7818      	ldrb	r0, [r3, #0]
 8002484:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <get_st_biases+0x2b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	7859      	ldrb	r1, [r3, #1]
 800248a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800248e:	2201      	movs	r2, #1
 8002490:	f7fe fd30 	bl	8000ef4 <i2c_write>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <get_st_biases+0x180>
        return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e2ad      	b.n	80029fc <get_st_biases+0x6dc>
    if (hw_test)
 80024a0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 80024a8:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <get_st_biases+0x2b8>)
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	7a9b      	ldrb	r3, [r3, #10]
 80024ae:	f063 031f 	orn	r3, r3, #31
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 80024b8:	e004      	b.n	80024c4 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 80024ba:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <get_st_biases+0x2b8>)
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	7a9b      	ldrb	r3, [r3, #10]
 80024c0:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 80024c4:	4b44      	ldr	r3, [pc, #272]	@ (80025d8 <get_st_biases+0x2b8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	7818      	ldrb	r0, [r3, #0]
 80024ca:	4b43      	ldr	r3, [pc, #268]	@ (80025d8 <get_st_biases+0x2b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	7999      	ldrb	r1, [r3, #6]
 80024d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80024d4:	2201      	movs	r2, #1
 80024d6:	f7fe fd0d 	bl	8000ef4 <i2c_write>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <get_st_biases+0x1c6>
        return -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	e28a      	b.n	80029fc <get_st_biases+0x6dc>

    if (hw_test)
 80024e6:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 80024ee:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <get_st_biases+0x2b8>)
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	7adb      	ldrb	r3, [r3, #11]
 80024f4:	f063 031f 	orn	r3, r3, #31
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 80024fe:	e002      	b.n	8002506 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 8002500:	2318      	movs	r3, #24
 8002502:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8002506:	4b34      	ldr	r3, [pc, #208]	@ (80025d8 <get_st_biases+0x2b8>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	7818      	ldrb	r0, [r3, #0]
 800250c:	4b32      	ldr	r3, [pc, #200]	@ (80025d8 <get_st_biases+0x2b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	79d9      	ldrb	r1, [r3, #7]
 8002512:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002516:	2201      	movs	r2, #1
 8002518:	f7fe fcec 	bl	8000ef4 <i2c_write>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <get_st_biases+0x208>
        return -1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	e269      	b.n	80029fc <get_st_biases+0x6dc>
    if (hw_test)
 8002528:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <get_st_biases+0x216>
        delay_ms(200);
 8002530:	20c8      	movs	r0, #200	@ 0xc8
 8002532:	f002 ffab 	bl	800548c <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8002536:	2340      	movs	r3, #64	@ 0x40
 8002538:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800253c:	4b26      	ldr	r3, [pc, #152]	@ (80025d8 <get_st_biases+0x2b8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	7818      	ldrb	r0, [r3, #0]
 8002542:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <get_st_biases+0x2b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	7919      	ldrb	r1, [r3, #4]
 8002548:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800254c:	2201      	movs	r2, #1
 800254e:	f7fe fcd1 	bl	8000ef4 <i2c_write>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <get_st_biases+0x23e>
        return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
 800255c:	e24e      	b.n	80029fc <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800255e:	2378      	movs	r3, #120	@ 0x78
 8002560:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002564:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <get_st_biases+0x2b8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	7818      	ldrb	r0, [r3, #0]
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <get_st_biases+0x2b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	7959      	ldrb	r1, [r3, #5]
 8002570:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002574:	2201      	movs	r2, #1
 8002576:	f7fe fcbd 	bl	8000ef4 <i2c_write>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <get_st_biases+0x266>
        return -1;
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	e23a      	b.n	80029fc <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 8002586:	2332      	movs	r3, #50	@ 0x32
 8002588:	4618      	mov	r0, r3
 800258a:	f002 ff7f 	bl	800548c <HAL_Delay>
    data[0] = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002594:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <get_st_biases+0x2b8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	7818      	ldrb	r0, [r3, #0]
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <get_st_biases+0x2b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	7959      	ldrb	r1, [r3, #5]
 80025a0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025a4:	2201      	movs	r2, #1
 80025a6:	f7fe fca5 	bl	8000ef4 <i2c_write>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <get_st_biases+0x296>
        return -1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	e222      	b.n	80029fc <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <get_st_biases+0x2b8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	7818      	ldrb	r0, [r3, #0]
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <get_st_biases+0x2b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	7b19      	ldrb	r1, [r3, #12]
 80025c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c6:	2202      	movs	r2, #2
 80025c8:	f7fe fcb6 	bl	8000f38 <i2c_read>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <get_st_biases+0x2bc>
        return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e211      	b.n	80029fc <get_st_biases+0x6dc>
 80025d8:	20000000 	.word	0x20000000

    fifo_count = (data[0] << 8) | data[1];
 80025dc:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b21b      	sxth	r3, r3
 80025ee:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 80025f2:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <get_st_biases+0x34c>)
 80025f8:	fba3 2302 	umull	r2, r3, r3, r2
 80025fc:	08db      	lsrs	r3, r3, #3
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8002604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	2300      	movs	r3, #0
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002614:	1d1a      	adds	r2, r3, #4
 8002616:	680b      	ldr	r3, [r1, #0]
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002620:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8002622:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002626:	f103 0108 	add.w	r1, r3, #8
 800262a:	2300      	movs	r3, #0
 800262c:	600b      	str	r3, [r1, #0]
 800262e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	680b      	ldr	r3, [r1, #0]
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800263e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8002640:	2300      	movs	r3, #0
 8002642:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002646:	e0a0      	b.n	800278a <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <get_st_biases+0x350>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	7818      	ldrb	r0, [r3, #0]
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <get_st_biases+0x350>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	7b59      	ldrb	r1, [r3, #13]
 8002654:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002658:	220c      	movs	r2, #12
 800265a:	f7fe fc6d 	bl	8000f38 <i2c_read>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <get_st_biases+0x354>
            return -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e1c8      	b.n	80029fc <get_st_biases+0x6dc>
 800266a:	bf00      	nop
 800266c:	aaaaaaab 	.word	0xaaaaaaab
 8002670:	20000000 	.word	0x20000000
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8002674:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	b21a      	sxth	r2, r3
 800267c:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002680:	b21b      	sxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b21b      	sxth	r3, r3
 8002686:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800268a:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002696:	b21b      	sxth	r3, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	b21b      	sxth	r3, r3
 800269c:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 80026a0:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 80026b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 80026c0:	441a      	add	r2, r3
 80026c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026c6:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026cc:	3304      	adds	r3, #4
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 80026d4:	4618      	mov	r0, r3
 80026d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026da:	1d1a      	adds	r2, r3, #4
 80026dc:	180b      	adds	r3, r1, r0
 80026de:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 80026e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026e4:	3308      	adds	r3, #8
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 80026ec:	4618      	mov	r0, r3
 80026ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026f2:	f103 0208 	add.w	r2, r3, #8
 80026f6:	180b      	adds	r3, r1, r0
 80026f8:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 80026fa:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	b21a      	sxth	r2, r3
 8002702:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002706:	b21b      	sxth	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b21b      	sxth	r3, r3
 800270c:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8002710:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b21a      	sxth	r2, r3
 8002718:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800271c:	b21b      	sxth	r3, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	b21b      	sxth	r3, r3
 8002722:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8002726:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	b21a      	sxth	r2, r3
 800272e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21b      	sxth	r3, r3
 8002738:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 800273c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8002746:	441a      	add	r2, r3
 8002748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800274c:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800274e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002752:	3304      	adds	r3, #4
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 800275a:	4618      	mov	r0, r3
 800275c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002760:	1d1a      	adds	r2, r3, #4
 8002762:	180b      	adds	r3, r1, r0
 8002764:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8002766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800276a:	3308      	adds	r3, #8
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002772:	4618      	mov	r0, r3
 8002774:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002778:	f103 0208 	add.w	r2, r3, #8
 800277c:	180b      	adds	r3, r1, r0
 800277e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8002780:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002784:	3301      	adds	r3, #1
 8002786:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800278a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800278e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002792:	429a      	cmp	r2, r3
 8002794:	f4ff af58 	bcc.w	8002648 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8002798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	17da      	asrs	r2, r3, #31
 80027a0:	461c      	mov	r4, r3
 80027a2:	4615      	mov	r5, r2
 80027a4:	1423      	asrs	r3, r4, #16
 80027a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80027aa:	0423      	lsls	r3, r4, #16
 80027ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027b0:	2283      	movs	r2, #131	@ 0x83
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80027b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027bc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80027c0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80027c4:	f7fe f9ce 	bl	8000b64 <__aeabi_ldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027de:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80027e2:	f7fe f9bf 	bl	8000b64 <__aeabi_ldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ee:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 80027f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027f4:	3304      	adds	r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	17da      	asrs	r2, r3, #31
 80027fa:	4698      	mov	r8, r3
 80027fc:	4691      	mov	r9, r2
 80027fe:	ea4f 4328 	mov.w	r3, r8, asr #16
 8002802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002806:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800280a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800280e:	2283      	movs	r2, #131	@ 0x83
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800281a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800281e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002822:	f7fe f99f 	bl	8000b64 <__aeabi_ldivmod>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002832:	2200      	movs	r2, #0
 8002834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002838:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800283c:	f7fe f992 	bl	8000b64 <__aeabi_ldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800284c:	1d1a      	adds	r2, r3, #4
 800284e:	4603      	mov	r3, r0
 8002850:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8002852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002856:	3308      	adds	r3, #8
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	17da      	asrs	r2, r3, #31
 800285c:	469a      	mov	sl, r3
 800285e:	4693      	mov	fp, r2
 8002860:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002864:	677b      	str	r3, [r7, #116]	@ 0x74
 8002866:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800286a:	673b      	str	r3, [r7, #112]	@ 0x70
 800286c:	2283      	movs	r2, #131	@ 0x83
 800286e:	2300      	movs	r3, #0
 8002870:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002874:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002878:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800287c:	f7fe f972 	bl	8000b64 <__aeabi_ldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800288c:	2200      	movs	r2, #0
 800288e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002890:	667a      	str	r2, [r7, #100]	@ 0x64
 8002892:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002896:	f7fe f965 	bl	8000b64 <__aeabi_ldivmod>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028a6:	f103 0208 	add.w	r2, r3, #8
 80028aa:	4603      	mov	r3, r0
 80028ac:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 80028ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	17da      	asrs	r2, r3, #31
 80028b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028b8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80028be:	460b      	mov	r3, r1
 80028c0:	141b      	asrs	r3, r3, #16
 80028c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80028c4:	460b      	mov	r3, r1
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028ce:	2300      	movs	r3, #0
 80028d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80028d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80028dc:	f7fe f942 	bl	8000b64 <__aeabi_ldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80028ec:	2200      	movs	r2, #0
 80028ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80028f0:	647a      	str	r2, [r7, #68]	@ 0x44
 80028f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028f6:	f7fe f935 	bl	8000b64 <__aeabi_ldivmod>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002902:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8002904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002908:	3304      	adds	r3, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	17da      	asrs	r2, r3, #31
 800290e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002910:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002912:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002916:	460b      	mov	r3, r1
 8002918:	141b      	asrs	r3, r3, #16
 800291a:	637b      	str	r3, [r7, #52]	@ 0x34
 800291c:	460b      	mov	r3, r1
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	633b      	str	r3, [r7, #48]	@ 0x30
 8002922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002926:	2300      	movs	r3, #0
 8002928:	62ba      	str	r2, [r7, #40]	@ 0x28
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800292c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002930:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002934:	f7fe f916 	bl	8000b64 <__aeabi_ldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002944:	2200      	movs	r2, #0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	627a      	str	r2, [r7, #36]	@ 0x24
 800294a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800294e:	f7fe f909 	bl	8000b64 <__aeabi_ldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800295e:	3304      	adds	r3, #4
 8002960:	4602      	mov	r2, r0
 8002962:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8002964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002968:	3308      	adds	r3, #8
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	17da      	asrs	r2, r3, #31
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	61fa      	str	r2, [r7, #28]
 8002972:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002976:	460b      	mov	r3, r1
 8002978:	141b      	asrs	r3, r3, #16
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	460b      	mov	r3, r1
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002986:	2300      	movs	r3, #0
 8002988:	60ba      	str	r2, [r7, #8]
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002990:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002994:	f7fe f8e6 	bl	8000b64 <__aeabi_ldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80029a4:	2200      	movs	r2, #0
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029ae:	f7fe f8d9 	bl	8000b64 <__aeabi_ldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029be:	3308      	adds	r3, #8
 80029c0:	4602      	mov	r2, r0
 80029c2:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 80029c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029c8:	3308      	adds	r3, #8
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	dd0a      	ble.n	80029e6 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 80029d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029d4:	3308      	adds	r3, #8
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029dc:	3308      	adds	r3, #8
 80029de:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e009      	b.n	80029fa <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 80029e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029ea:	3308      	adds	r3, #8
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029f2:	3308      	adds	r3, #8
 80029f4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 80029f8:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	37e0      	adds	r7, #224	@ 0xe0
 8002a00:	46bd      	mov	sp, r7
 8002a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a06:	bf00      	nop

08002a08 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08e      	sub	sp, #56	@ 0x38
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8002a12:	2302      	movs	r3, #2
 8002a14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8002a18:	4b68      	ldr	r3, [pc, #416]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f000 f9ee 	bl	8002e04 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002a2e:	e002      	b.n	8002a36 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fd80 	bl	8001540 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8002a40:	f107 030f 	add.w	r3, r7, #15
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fe03 	bl	8001650 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fea0 	bl	8001794 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002a54:	f107 030a 	add.w	r3, r7, #10
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe ff27 	bl	80018ac <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8002a5e:	4b57      	ldr	r3, [pc, #348]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002a60:	7a9b      	ldrb	r3, [r3, #10]
 8002a62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8002a66:	f107 030e 	add.w	r3, r7, #14
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f814 	bl	8001a98 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a74:	e00a      	b.n	8002a8c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8002a76:	2200      	movs	r2, #0
 8002a78:	6839      	ldr	r1, [r7, #0]
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fc50 	bl	8002320 <get_st_biases>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8002a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a88:	3301      	adds	r3, #1
 8002a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dbef      	blt.n	8002a76 <mpu_run_self_test+0x6e>
 8002a96:	e000      	b.n	8002a9a <mpu_run_self_test+0x92>
            break;
 8002a98:	bf00      	nop
    if (ii == tries) {
 8002a9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002a9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d102      	bne.n	8002aaa <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002aa8:	e045      	b.n	8002b36 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aae:	e00d      	b.n	8002acc <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002ab0:	f107 0110 	add.w	r1, r7, #16
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fc30 	bl	8002320 <get_st_biases>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac8:	3301      	adds	r3, #1
 8002aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002acc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dbec      	blt.n	8002ab0 <mpu_run_self_test+0xa8>
 8002ad6:	e000      	b.n	8002ada <mpu_run_self_test+0xd2>
            break;
 8002ad8:	bf00      	nop
    if (ii == tries) {
 8002ada:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d102      	bne.n	8002aea <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002ae8:	e025      	b.n	8002b36 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	4619      	mov	r1, r3
 8002af0:	6838      	ldr	r0, [r7, #0]
 8002af2:	f7ff fad1 	bl	8002098 <accel_self_test>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fb4c 	bl	80021a0 <gyro_self_test>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 8002b12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <mpu_run_self_test+0x11a>
        result |= 0x01;
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 8002b22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <mpu_run_self_test+0x12c>
        result |= 0x02;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b32:	e000      	b.n	8002b36 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8002b34:	bf00      	nop
#if defined MPU6050
    /* For now, this function will return a "pass" result for all three sensors
     * for compatibility with current test applications.
     */
    get_st_biases(gyro, accel, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fbf0 	bl	8002320 <get_st_biases>
    result = 0x7;
 8002b40:	2307      	movs	r3, #7
 8002b42:	633b      	str	r3, [r7, #48]	@ 0x30
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002b46:	22ff      	movs	r2, #255	@ 0xff
 8002b48:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002b4c:	22ff      	movs	r2, #255	@ 0xff
 8002b4e:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002b52:	22ff      	movs	r2, #255	@ 0xff
 8002b54:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5c:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002b60:	22ff      	movs	r2, #255	@ 0xff
 8002b62:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8002b64:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002b66:	22ff      	movs	r2, #255	@ 0xff
 8002b68:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8002b6a:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <mpu_run_self_test+0x1b4>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8002b70:	89bb      	ldrh	r3, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fd18 	bl	80015a8 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fda2 	bl	80016c4 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8002b80:	893b      	ldrh	r3, [r7, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fe44 	bl	8001810 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fea8 	bl	80018e0 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8002b90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe ffe3 	bl	8001b60 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8002b9a:	7bbb      	ldrb	r3, [r7, #14]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe ff8d 	bl	8001abc <mpu_configure_fifo>

    if (dmp_was_on)
 8002ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <mpu_run_self_test+0x1a8>
        mpu_set_dmp_state(1);
 8002baa:	2001      	movs	r0, #1
 8002bac:	f000 f92a 	bl	8002e04 <mpu_set_dmp_state>

    return result;
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3738      	adds	r7, #56	@ 0x38
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000000 	.word	0x20000000

08002bc0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	603a      	str	r2, [r7, #0]
 8002bca:	80fb      	strh	r3, [r7, #6]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <mpu_write_mem+0x1c>
        return -1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	e03d      	b.n	8002c58 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8002bdc:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <mpu_write_mem+0xa0>)
 8002bde:	7a9b      	ldrb	r3, [r3, #10]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <mpu_write_mem+0x2a>
        return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	e036      	b.n	8002c58 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002bfa:	7b7b      	ldrb	r3, [r7, #13]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	88bb      	ldrh	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a17      	ldr	r2, [pc, #92]	@ (8002c60 <mpu_write_mem+0xa0>)
 8002c04:	6852      	ldr	r2, [r2, #4]
 8002c06:	8952      	ldrh	r2, [r2, #10]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	dd02      	ble.n	8002c12 <mpu_write_mem+0x52>
        return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	e022      	b.n	8002c58 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <mpu_write_mem+0xa0>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	7818      	ldrb	r0, [r3, #0]
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <mpu_write_mem+0xa0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	7ed9      	ldrb	r1, [r3, #27]
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	2202      	movs	r2, #2
 8002c24:	f7fe f966 	bl	8000ef4 <i2c_write>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <mpu_write_mem+0x74>
        return -1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e011      	b.n	8002c58 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8002c34:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <mpu_write_mem+0xa0>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	7818      	ldrb	r0, [r3, #0]
 8002c3a:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <mpu_write_mem+0xa0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	7e19      	ldrb	r1, [r3, #24]
 8002c40:	88bb      	ldrh	r3, [r7, #4]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f7fe f955 	bl	8000ef4 <i2c_write>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <mpu_write_mem+0x96>
        return -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	e000      	b.n	8002c58 <mpu_write_mem+0x98>
    return 0;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000000 	.word	0x20000000

08002c64 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	603a      	str	r2, [r7, #0]
 8002c6e:	80fb      	strh	r3, [r7, #6]
 8002c70:	460b      	mov	r3, r1
 8002c72:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <mpu_read_mem+0x1c>
        return -1;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e03d      	b.n	8002cfc <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8002c80:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <mpu_read_mem+0xa0>)
 8002c82:	7a9b      	ldrb	r3, [r3, #10]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <mpu_read_mem+0x2a>
        return -1;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8c:	e036      	b.n	8002cfc <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002c9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	88bb      	ldrh	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <mpu_read_mem+0xa0>)
 8002ca8:	6852      	ldr	r2, [r2, #4]
 8002caa:	8952      	ldrh	r2, [r2, #10]
 8002cac:	4293      	cmp	r3, r2
 8002cae:	dd02      	ble.n	8002cb6 <mpu_read_mem+0x52>
        return -1;
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb4:	e022      	b.n	8002cfc <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8002cb6:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <mpu_read_mem+0xa0>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	7818      	ldrb	r0, [r3, #0]
 8002cbc:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <mpu_read_mem+0xa0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	7ed9      	ldrb	r1, [r3, #27]
 8002cc2:	f107 030c 	add.w	r3, r7, #12
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f7fe f914 	bl	8000ef4 <i2c_write>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <mpu_read_mem+0x74>
        return -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e011      	b.n	8002cfc <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <mpu_read_mem+0xa0>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	7818      	ldrb	r0, [r3, #0]
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <mpu_read_mem+0xa0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	7e19      	ldrb	r1, [r3, #24]
 8002ce4:	88bb      	ldrh	r3, [r7, #4]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f7fe f925 	bl	8000f38 <i2c_read>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <mpu_read_mem+0x96>
        return -1;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	e000      	b.n	8002cfc <mpu_read_mem+0x98>
    return 0;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000000 	.word	0x20000000

08002d08 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	4611      	mov	r1, r2
 8002d12:	461a      	mov	r2, r3
 8002d14:	4603      	mov	r3, r0
 8002d16:	81fb      	strh	r3, [r7, #14]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	81bb      	strh	r3, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8002d20:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <mpu_load_firmware+0xf8>)
 8002d22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e062      	b.n	8002df6 <mpu_load_firmware+0xee>

    if (!firmware)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <mpu_load_firmware+0x34>
        return -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e05c      	b.n	8002df6 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d40:	e034      	b.n	8002dac <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8002d42:	89fa      	ldrh	r2, [r7, #14]
 8002d44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	bfa8      	it	ge
 8002d4c:	2310      	movge	r3, #16
 8002d4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8002d50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	441a      	add	r2, r3
 8002d56:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002d58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff30 	bl	8002bc0 <mpu_write_mem>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <mpu_load_firmware+0x64>
            return -1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	e044      	b.n	8002df6 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8002d6c:	f107 0214 	add.w	r2, r7, #20
 8002d70:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002d72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff75 	bl	8002c64 <mpu_read_mem>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <mpu_load_firmware+0x7e>
            return -1;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	e037      	b.n	8002df6 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8002d86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d8e:	f107 0114 	add.w	r1, r7, #20
 8002d92:	4618      	mov	r0, r3
 8002d94:	f005 f898 	bl	8007ec8 <memcmp>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <mpu_load_firmware+0x9c>
            return -2;
 8002d9e:	f06f 0301 	mvn.w	r3, #1
 8002da2:	e028      	b.n	8002df6 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8002da4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002da6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002da8:	4413      	add	r3, r2
 8002daa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002dac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002dae:	89fb      	ldrh	r3, [r7, #14]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3c6      	bcc.n	8002d42 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8002db4:	89bb      	ldrh	r3, [r7, #12]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8002dbe:	89bb      	ldrh	r3, [r7, #12]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <mpu_load_firmware+0xf8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	7818      	ldrb	r0, [r3, #0]
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <mpu_load_firmware+0xf8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	7f59      	ldrb	r1, [r3, #29]
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f7fe f88d 	bl	8000ef4 <i2c_write>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <mpu_load_firmware+0xde>
        return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	e007      	b.n	8002df6 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <mpu_load_firmware+0xf8>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8002dee:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <mpu_load_firmware+0xf8>)
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3728      	adds	r7, #40	@ 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000

08002e04 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8002e0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d101      	bne.n	8002e1e <mpu_set_dmp_state+0x1a>
        return 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e040      	b.n	8002ea0 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d027      	beq.n	8002e74 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8002e24:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <mpu_set_dmp_state+0x30>
            return -1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e035      	b.n	8002ea0 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fe f8a1 	bl	8000f7c <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe ff94 	bl	8001d68 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8002e40:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fd4b 	bl	80018e0 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002e4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	7818      	ldrb	r0, [r3, #0]
 8002e54:	f107 030f 	add.w	r3, r7, #15
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2123      	movs	r1, #35	@ 0x23
 8002e5c:	f7fe f84a 	bl	8000ef4 <i2c_write>
        st.chip_cfg.dmp_on = 1;
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7fe f887 	bl	8000f7c <set_int_enable>
        mpu_reset_fifo();
 8002e6e:	f7fe fa63 	bl	8001338 <mpu_reset_fifo>
 8002e72:	e014      	b.n	8002e9e <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fe f881 	bl	8000f7c <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e7c:	7c1b      	ldrb	r3, [r3, #16]
 8002e7e:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	7818      	ldrb	r0, [r3, #0]
 8002e86:	f107 030f 	add.w	r3, r7, #15
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	2123      	movs	r1, #35	@ 0x23
 8002e8e:	f7fe f831 	bl	8000ef4 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8002e92:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <mpu_set_dmp_state+0xa4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 8002e9a:	f7fe fa4d 	bl	8001338 <mpu_reset_fifo>
    }
    return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000000 	.word	0x20000000

08002eac <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8002eb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eb4:	23c8      	movs	r3, #200	@ 0xc8
 8002eb6:	4904      	ldr	r1, [pc, #16]	@ (8002ec8 <dmp_load_motion_driver_firmware+0x1c>)
 8002eb8:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8002ebc:	f7ff ff24 	bl	8002d08 <mpu_load_firmware>
 8002ec0:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	08008538 	.word	0x08008538

08002ecc <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8002ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <dmp_set_orientation+0x1c4>)
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	8019      	strh	r1, [r3, #0]
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	0c12      	lsrs	r2, r2, #16
 8002ee6:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8002ee8:	4a6a      	ldr	r2, [pc, #424]	@ (8003094 <dmp_set_orientation+0x1c8>)
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	8019      	strh	r1, [r3, #0]
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	0c12      	lsrs	r2, r2, #16
 8002ef8:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8002efa:	4a67      	ldr	r2, [pc, #412]	@ (8003098 <dmp_set_orientation+0x1cc>)
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	4611      	mov	r1, r2
 8002f04:	8019      	strh	r1, [r3, #0]
 8002f06:	3302      	adds	r3, #2
 8002f08:	0c12      	lsrs	r2, r2, #16
 8002f0a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8002f0c:	4a63      	ldr	r2, [pc, #396]	@ (800309c <dmp_set_orientation+0x1d0>)
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4611      	mov	r1, r2
 8002f16:	8019      	strh	r1, [r3, #0]
 8002f18:	3302      	adds	r3, #2
 8002f1a:	0c12      	lsrs	r2, r2, #16
 8002f1c:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	3320      	adds	r3, #32
 8002f26:	443b      	add	r3, r7
 8002f28:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f2c:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	08db      	lsrs	r3, r3, #3
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	3320      	adds	r3, #32
 8002f3a:	443b      	add	r3, r7
 8002f3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f40:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	3320      	adds	r3, #32
 8002f4e:	443b      	add	r3, r7
 8002f50:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f54:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	3320      	adds	r3, #32
 8002f5e:	443b      	add	r3, r7
 8002f60:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f64:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	08db      	lsrs	r3, r3, #3
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	3320      	adds	r3, #32
 8002f72:	443b      	add	r3, r7
 8002f74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f78:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	3320      	adds	r3, #32
 8002f86:	443b      	add	r3, r7
 8002f88:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f8c:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002f8e:	f107 031c 	add.w	r3, r7, #28
 8002f92:	461a      	mov	r2, r3
 8002f94:	2103      	movs	r1, #3
 8002f96:	f240 4026 	movw	r0, #1062	@ 0x426
 8002f9a:	f7ff fe11 	bl	8002bc0 <mpu_write_mem>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <dmp_set_orientation+0xde>
        return -1;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	e06e      	b.n	8003088 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8002faa:	f107 0318 	add.w	r3, r7, #24
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2103      	movs	r1, #3
 8002fb2:	f240 402a 	movw	r0, #1066	@ 0x42a
 8002fb6:	f7ff fe03 	bl	8002bc0 <mpu_write_mem>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <dmp_set_orientation+0xfa>
        return -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	e060      	b.n	8003088 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	f107 020c 	add.w	r2, r7, #12
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	8019      	strh	r1, [r3, #0]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	0c12      	lsrs	r2, r2, #16
 8002fd8:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8002fda:	f107 0318 	add.w	r3, r7, #24
 8002fde:	f107 0208 	add.w	r2, r7, #8
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	8019      	strh	r1, [r3, #0]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	0c12      	lsrs	r2, r2, #16
 8002fec:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8002ff8:	7f3b      	ldrb	r3, [r7, #28]
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8003002:	7e3b      	ldrb	r3, [r7, #24]
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8003016:	7f7b      	ldrb	r3, [r7, #29]
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8003020:	7e7b      	ldrb	r3, [r7, #25]
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8003034:	7fbb      	ldrb	r3, [r7, #30]
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800303e:	7ebb      	ldrb	r3, [r7, #26]
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8003048:	f107 031c 	add.w	r3, r7, #28
 800304c:	461a      	mov	r2, r3
 800304e:	2103      	movs	r1, #3
 8003050:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8003054:	f7ff fdb4 	bl	8002bc0 <mpu_write_mem>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <dmp_set_orientation+0x198>
        return -1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e011      	b.n	8003088 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8003064:	f107 0318 	add.w	r3, r7, #24
 8003068:	461a      	mov	r2, r3
 800306a:	2103      	movs	r1, #3
 800306c:	f240 4031 	movw	r0, #1073	@ 0x431
 8003070:	f7ff fda6 	bl	8002bc0 <mpu_write_mem>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <dmp_set_orientation+0x1b4>
        return -1;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	e003      	b.n	8003088 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8003080:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <dmp_set_orientation+0x1d4>)
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	8113      	strh	r3, [r2, #8]
    return 0;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	08008498 	.word	0x08008498
 8003094:	0800849c 	.word	0x0800849c
 8003098:	080084a0 	.word	0x080084a0
 800309c:	080084a4 	.word	0x080084a4
 80030a0:	200000b4 	.word	0x200000b4

080030a4 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 80030a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a8:	b08c      	sub	sp, #48	@ 0x30
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 80030ae:	4b80      	ldr	r3, [pc, #512]	@ (80032b0 <dmp_set_gyro_bias+0x20c>)
 80030b0:	891b      	ldrh	r3, [r3, #8]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 80030c0:	4b7b      	ldr	r3, [pc, #492]	@ (80032b0 <dmp_set_gyro_bias+0x20c>)
 80030c2:	891b      	ldrh	r3, [r3, #8]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	425b      	negs	r3, r3
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80030d2:	4b77      	ldr	r3, [pc, #476]	@ (80032b0 <dmp_set_gyro_bias+0x20c>)
 80030d4:	891b      	ldrh	r3, [r3, #8]
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 80030e8:	4b71      	ldr	r3, [pc, #452]	@ (80032b0 <dmp_set_gyro_bias+0x20c>)
 80030ea:	891b      	ldrh	r3, [r3, #8]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 80030f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f6:	425b      	negs	r3, r3
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80030fa:	4b6d      	ldr	r3, [pc, #436]	@ (80032b0 <dmp_set_gyro_bias+0x20c>)
 80030fc:	891b      	ldrh	r3, [r3, #8]
 80030fe:	099b      	lsrs	r3, r3, #6
 8003100:	b29b      	uxth	r3, r3
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 8003110:	4b67      	ldr	r3, [pc, #412]	@ (80032b0 <dmp_set_gyro_bias+0x20c>)
 8003112:	891b      	ldrh	r3, [r3, #8]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311e:	425b      	negs	r3, r3
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	17da      	asrs	r2, r3, #31
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	617a      	str	r2, [r7, #20]
 800312a:	4b62      	ldr	r3, [pc, #392]	@ (80032b4 <dmp_set_gyro_bias+0x210>)
 800312c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003130:	460a      	mov	r2, r1
 8003132:	fb03 f202 	mul.w	r2, r3, r2
 8003136:	2300      	movs	r3, #0
 8003138:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800313c:	4601      	mov	r1, r0
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	4a5b      	ldr	r2, [pc, #364]	@ (80032b4 <dmp_set_gyro_bias+0x210>)
 8003146:	6939      	ldr	r1, [r7, #16]
 8003148:	fba1 ab02 	umull	sl, fp, r1, r2
 800314c:	445b      	add	r3, fp
 800314e:	469b      	mov	fp, r3
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800315c:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8003160:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003164:	4613      	mov	r3, r2
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8003168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316a:	17da      	asrs	r2, r3, #31
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	4b50      	ldr	r3, [pc, #320]	@ (80032b4 <dmp_set_gyro_bias+0x210>)
 8003172:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003176:	465a      	mov	r2, fp
 8003178:	fb03 f202 	mul.w	r2, r3, r2
 800317c:	2300      	movs	r3, #0
 800317e:	4651      	mov	r1, sl
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	4a4b      	ldr	r2, [pc, #300]	@ (80032b4 <dmp_set_gyro_bias+0x210>)
 8003188:	4651      	mov	r1, sl
 800318a:	fba1 8902 	umull	r8, r9, r1, r2
 800318e:	444b      	add	r3, r9
 8003190:	4699      	mov	r9, r3
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800319e:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 80031a2:	ea4f 73a9 	mov.w	r3, r9, asr #30
 80031a6:	4613      	mov	r3, r2
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 80031aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ac:	17da      	asrs	r2, r3, #31
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	4b40      	ldr	r3, [pc, #256]	@ (80032b4 <dmp_set_gyro_bias+0x210>)
 80031b4:	e9d7 8900 	ldrd	r8, r9, [r7]
 80031b8:	464a      	mov	r2, r9
 80031ba:	fb03 f202 	mul.w	r2, r3, r2
 80031be:	2300      	movs	r3, #0
 80031c0:	4641      	mov	r1, r8
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	4a3a      	ldr	r2, [pc, #232]	@ (80032b4 <dmp_set_gyro_bias+0x210>)
 80031ca:	4641      	mov	r1, r8
 80031cc:	fba1 4502 	umull	r4, r5, r1, r2
 80031d0:	442b      	add	r3, r5
 80031d2:	461d      	mov	r5, r3
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	0fa2      	lsrs	r2, r4, #30
 80031de:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80031e2:	17ab      	asrs	r3, r5, #30
 80031e4:	4613      	mov	r3, r2
 80031e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	161b      	asrs	r3, r3, #24
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	141b      	asrs	r3, r3, #16
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	121b      	asrs	r3, r3, #8
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800320e:	f107 0320 	add.w	r3, r7, #32
 8003212:	461a      	mov	r2, r3
 8003214:	2104      	movs	r1, #4
 8003216:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 800321a:	f7ff fcd1 	bl	8002bc0 <mpu_write_mem>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <dmp_set_gyro_bias+0x186>
        return -1;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	e03c      	b.n	80032a4 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	161b      	asrs	r3, r3, #24
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	141b      	asrs	r3, r3, #16
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 800323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003240:	121b      	asrs	r3, r3, #8
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8003250:	f107 0320 	add.w	r3, r7, #32
 8003254:	461a      	mov	r2, r3
 8003256:	2104      	movs	r1, #4
 8003258:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 800325c:	f7ff fcb0 	bl	8002bc0 <mpu_write_mem>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <dmp_set_gyro_bias+0x1c8>
        return -1;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	e01b      	b.n	80032a4 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326e:	161b      	asrs	r3, r3, #24
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003278:	141b      	asrs	r3, r3, #16
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8003280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003282:	121b      	asrs	r3, r3, #8
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 800328a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8003292:	f107 0320 	add.w	r3, r7, #32
 8003296:	461a      	mov	r2, r3
 8003298:	2104      	movs	r1, #4
 800329a:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800329e:	f7ff fc8f 	bl	8002bc0 <mpu_write_mem>
 80032a2:	4603      	mov	r3, r0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3730      	adds	r7, #48	@ 0x30
 80032a8:	46bd      	mov	sp, r7
 80032aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ae:	bf00      	nop
 80032b0:	200000b4 	.word	0x200000b4
 80032b4:	02cae309 	.word	0x02cae309

080032b8 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b094      	sub	sp, #80	@ 0x50
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 80032c2:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fba8 	bl	8001a1c <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 80032cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	61fa      	str	r2, [r7, #28]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	69f9      	ldr	r1, [r7, #28]
 80032e0:	03cb      	lsls	r3, r1, #15
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	03ca      	lsls	r2, r1, #15
 80032ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 80032f0:	4b71      	ldr	r3, [pc, #452]	@ (80034b8 <dmp_set_accel_bias+0x200>)
 80032f2:	891b      	ldrh	r3, [r3, #8]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032fc:	4413      	add	r3, r2
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 8003302:	4b6d      	ldr	r3, [pc, #436]	@ (80034b8 <dmp_set_accel_bias+0x200>)
 8003304:	891b      	ldrh	r3, [r3, #8]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800330e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003310:	425b      	negs	r3, r3
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003314:	4b68      	ldr	r3, [pc, #416]	@ (80034b8 <dmp_set_accel_bias+0x200>)
 8003316:	891b      	ldrh	r3, [r3, #8]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	b29b      	uxth	r3, r3
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	4413      	add	r3, r2
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 800332a:	4b63      	ldr	r3, [pc, #396]	@ (80034b8 <dmp_set_accel_bias+0x200>)
 800332c:	891b      	ldrh	r3, [r3, #8]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 8003336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003338:	425b      	negs	r3, r3
 800333a:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800333c:	4b5e      	ldr	r3, [pc, #376]	@ (80034b8 <dmp_set_accel_bias+0x200>)
 800333e:	891b      	ldrh	r3, [r3, #8]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	b29b      	uxth	r3, r3
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334c:	4413      	add	r3, r2
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 8003352:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <dmp_set_accel_bias+0x200>)
 8003354:	891b      	ldrh	r3, [r3, #8]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 800335e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003360:	425b      	negs	r3, r3
 8003362:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8003364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003366:	17da      	asrs	r2, r3, #31
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	617a      	str	r2, [r7, #20]
 800336c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800336e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003372:	460a      	mov	r2, r1
 8003374:	fb02 f203 	mul.w	r2, r2, r3
 8003378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800337a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800337e:	4601      	mov	r1, r0
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	fba2 ab01 	umull	sl, fp, r2, r1
 800338e:	445b      	add	r3, fp
 8003390:	469b      	mov	fp, r3
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800339e:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80033a2:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80033a6:	4613      	mov	r3, r2
 80033a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 80033aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ac:	17da      	asrs	r2, r3, #31
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	60fa      	str	r2, [r7, #12]
 80033b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80033b8:	465a      	mov	r2, fp
 80033ba:	fb02 f203 	mul.w	r2, r2, r3
 80033be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c0:	4651      	mov	r1, sl
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033ca:	4651      	mov	r1, sl
 80033cc:	fba2 8901 	umull	r8, r9, r2, r1
 80033d0:	444b      	add	r3, r9
 80033d2:	4699      	mov	r9, r3
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80033e0:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 80033e4:	ea4f 73a9 	mov.w	r3, r9, asr #30
 80033e8:	4613      	mov	r3, r2
 80033ea:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 80033ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ee:	17da      	asrs	r2, r3, #31
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f6:	e9d7 8900 	ldrd	r8, r9, [r7]
 80033fa:	464a      	mov	r2, r9
 80033fc:	fb02 f203 	mul.w	r2, r2, r3
 8003400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003402:	4641      	mov	r1, r8
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800340c:	4641      	mov	r1, r8
 800340e:	fba2 4501 	umull	r4, r5, r2, r1
 8003412:	442b      	add	r3, r5
 8003414:	461d      	mov	r5, r3
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	0fa2      	lsrs	r2, r4, #30
 8003420:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003424:	17ab      	asrs	r3, r5, #30
 8003426:	4613      	mov	r3, r2
 8003428:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 800342a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342c:	161b      	asrs	r3, r3, #24
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8003434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003436:	141b      	asrs	r3, r3, #16
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800343e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003440:	121b      	asrs	r3, r3, #8
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8003448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8003450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003452:	161b      	asrs	r3, r3, #24
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 800345a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345c:	141b      	asrs	r3, r3, #16
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8003464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003466:	121b      	asrs	r3, r3, #8
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 800346e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003478:	161b      	asrs	r3, r3, #24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003482:	141b      	asrs	r3, r3, #16
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 800348a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800348c:	121b      	asrs	r3, r3, #8
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 800349c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034a0:	461a      	mov	r2, r3
 80034a2:	210c      	movs	r1, #12
 80034a4:	f44f 7025 	mov.w	r0, #660	@ 0x294
 80034a8:	f7ff fb8a 	bl	8002bc0 <mpu_write_mem>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3750      	adds	r7, #80	@ 0x50
 80034b2:	46bd      	mov	sp, r7
 80034b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b8:	200000b4 	.word	0x200000b4

080034bc <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80034c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <dmp_set_fifo_rate+0x88>)
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80034d6:	d902      	bls.n	80034de <dmp_set_fifo_rate+0x22>
        return -1;
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	e02e      	b.n	800353c <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	22c8      	movs	r2, #200	@ 0xc8
 80034e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 80034ec:	8bfb      	ldrh	r3, [r7, #30]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 80034f6:	8bfb      	ldrh	r3, [r7, #30]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	461a      	mov	r2, r3
 8003502:	2102      	movs	r1, #2
 8003504:	f240 2016 	movw	r0, #534	@ 0x216
 8003508:	f7ff fb5a 	bl	8002bc0 <mpu_write_mem>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e011      	b.n	800353c <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	461a      	mov	r2, r3
 800351e:	210c      	movs	r1, #12
 8003520:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8003524:	f7ff fb4c 	bl	8002bc0 <mpu_write_mem>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <dmp_set_fifo_rate+0x78>
        return -1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e003      	b.n	800353c <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <dmp_set_fifo_rate+0x8c>)
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	8193      	strh	r3, [r2, #12]
    return 0;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	080084a8 	.word	0x080084a8
 8003548:	200000b4 	.word	0x200000b4

0800354c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	460a      	mov	r2, r1
 8003556:	71fb      	strb	r3, [r7, #7]
 8003558:	4613      	mov	r3, r2
 800355a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <dmp_set_tap_thresh+0x22>
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800356c:	d902      	bls.n	8003574 <dmp_set_tap_thresh+0x28>
        return -1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e10b      	b.n	800378c <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003574:	88bb      	ldrh	r3, [r7, #4]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800357e:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003794 <dmp_set_tap_thresh+0x248>
 8003582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003586:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800358a:	f107 030b 	add.w	r3, r7, #11
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe f85e 	bl	8001650 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	3b02      	subs	r3, #2
 8003598:	2b0e      	cmp	r3, #14
 800359a:	d87d      	bhi.n	8003698 <dmp_set_tap_thresh+0x14c>
 800359c:	a201      	add	r2, pc, #4	@ (adr r2, 80035a4 <dmp_set_tap_thresh+0x58>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035e1 	.word	0x080035e1
 80035a8:	08003699 	.word	0x08003699
 80035ac:	0800360f 	.word	0x0800360f
 80035b0:	08003699 	.word	0x08003699
 80035b4:	08003699 	.word	0x08003699
 80035b8:	08003699 	.word	0x08003699
 80035bc:	0800363d 	.word	0x0800363d
 80035c0:	08003699 	.word	0x08003699
 80035c4:	08003699 	.word	0x08003699
 80035c8:	08003699 	.word	0x08003699
 80035cc:	08003699 	.word	0x08003699
 80035d0:	08003699 	.word	0x08003699
 80035d4:	08003699 	.word	0x08003699
 80035d8:	08003699 	.word	0x08003699
 80035dc:	0800366b 	.word	0x0800366b
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 80035e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80035e4:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003798 <dmp_set_tap_thresh+0x24c>
 80035e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f0:	ee17 3a90 	vmov	r3, s15
 80035f4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 80035f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035fa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800379c <dmp_set_tap_thresh+0x250>
 80035fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003606:	ee17 3a90 	vmov	r3, s15
 800360a:	82bb      	strh	r3, [r7, #20]
        break;
 800360c:	e047      	b.n	800369e <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800360e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003612:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80037a0 <dmp_set_tap_thresh+0x254>
 8003616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800361a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361e:	ee17 3a90 	vmov	r3, s15
 8003622:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003624:	edd7 7a04 	vldr	s15, [r7, #16]
 8003628:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80037a4 <dmp_set_tap_thresh+0x258>
 800362c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003634:	ee17 3a90 	vmov	r3, s15
 8003638:	82bb      	strh	r3, [r7, #20]
        break;
 800363a:	e030      	b.n	800369e <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800363c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003640:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80037a8 <dmp_set_tap_thresh+0x25c>
 8003644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364c:	ee17 3a90 	vmov	r3, s15
 8003650:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003652:	edd7 7a04 	vldr	s15, [r7, #16]
 8003656:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80037ac <dmp_set_tap_thresh+0x260>
 800365a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800365e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003662:	ee17 3a90 	vmov	r3, s15
 8003666:	82bb      	strh	r3, [r7, #20]
        break;
 8003668:	e019      	b.n	800369e <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800366a:	edd7 7a04 	vldr	s15, [r7, #16]
 800366e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80037b0 <dmp_set_tap_thresh+0x264>
 8003672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800367a:	ee17 3a90 	vmov	r3, s15
 800367e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8003680:	edd7 7a04 	vldr	s15, [r7, #16]
 8003684:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80037b4 <dmp_set_tap_thresh+0x268>
 8003688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800368c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003690:	ee17 3a90 	vmov	r3, s15
 8003694:	82bb      	strh	r3, [r7, #20]
        break;
 8003696:	e002      	b.n	800369e <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	e076      	b.n	800378c <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800369e:	8afb      	ldrh	r3, [r7, #22]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80036a8:	8afb      	ldrh	r3, [r7, #22]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80036ae:	8abb      	ldrh	r3, [r7, #20]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80036b8:	8abb      	ldrh	r3, [r7, #20]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01c      	beq.n	8003702 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 80036c8:	f107 030c 	add.w	r3, r7, #12
 80036cc:	461a      	mov	r2, r3
 80036ce:	2102      	movs	r1, #2
 80036d0:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 80036d4:	f7ff fa74 	bl	8002bc0 <mpu_write_mem>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <dmp_set_tap_thresh+0x198>
            return -1;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e053      	b.n	800378c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	3302      	adds	r3, #2
 80036ea:	461a      	mov	r2, r3
 80036ec:	2102      	movs	r1, #2
 80036ee:	f44f 7092 	mov.w	r0, #292	@ 0x124
 80036f2:	f7ff fa65 	bl	8002bc0 <mpu_write_mem>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <dmp_set_tap_thresh+0x1b6>
            return -1;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003700:	e044      	b.n	800378c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01c      	beq.n	8003746 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	461a      	mov	r2, r3
 8003712:	2102      	movs	r1, #2
 8003714:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 8003718:	f7ff fa52 	bl	8002bc0 <mpu_write_mem>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	e031      	b.n	800378c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	3302      	adds	r3, #2
 800372e:	461a      	mov	r2, r3
 8003730:	2102      	movs	r1, #2
 8003732:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8003736:	f7ff fa43 	bl	8002bc0 <mpu_write_mem>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e022      	b.n	800378c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01c      	beq.n	800378a <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	461a      	mov	r2, r3
 8003756:	2102      	movs	r1, #2
 8003758:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 800375c:	f7ff fa30 	bl	8002bc0 <mpu_write_mem>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <dmp_set_tap_thresh+0x220>
            return -1;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	e00f      	b.n	800378c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	3302      	adds	r3, #2
 8003772:	461a      	mov	r2, r3
 8003774:	2102      	movs	r1, #2
 8003776:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800377a:	f7ff fa21 	bl	8002bc0 <mpu_write_mem>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <dmp_set_tap_thresh+0x23e>
            return -1;
 8003784:	f04f 33ff 	mov.w	r3, #4294967295
 8003788:	e000      	b.n	800378c <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	43480000 	.word	0x43480000
 8003798:	46800000 	.word	0x46800000
 800379c:	46400000 	.word	0x46400000
 80037a0:	46000000 	.word	0x46000000
 80037a4:	45c00000 	.word	0x45c00000
 80037a8:	45800000 	.word	0x45800000
 80037ac:	45400000 	.word	0x45400000
 80037b0:	45000000 	.word	0x45000000
 80037b4:	44c00000 	.word	0x44c00000

080037b8 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	f043 030c 	orr.w	r3, r3, #12
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	f043 0303 	orr.w	r3, r3, #3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8003802:	f107 030f 	add.w	r3, r7, #15
 8003806:	461a      	mov	r2, r3
 8003808:	2101      	movs	r1, #1
 800380a:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 800380e:	f7ff f9d7 	bl	8002bc0 <mpu_write_mem>
 8003812:	4603      	mov	r3, r0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <dmp_set_tap_count+0x16>
        min_taps = 1;
 800382c:	2301      	movs	r3, #1
 800382e:	71fb      	strb	r3, [r7, #7]
 8003830:	e004      	b.n	800383c <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d901      	bls.n	800383c <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003838:	2304      	movs	r3, #4
 800383a:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	3b01      	subs	r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8003844:	f107 030f 	add.w	r3, r7, #15
 8003848:	461a      	mov	r2, r3
 800384a:	2101      	movs	r1, #1
 800384c:	f240 104f 	movw	r0, #335	@ 0x14f
 8003850:	f7ff f9b6 	bl	8002bc0 <mpu_write_mem>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	4a0c      	ldr	r2, [pc, #48]	@ (80038a0 <dmp_set_tap_time+0x40>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003876:	89fb      	ldrh	r3, [r7, #14]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	b29b      	uxth	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003880:	89fb      	ldrh	r3, [r7, #14]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	461a      	mov	r2, r3
 800388c:	2102      	movs	r1, #2
 800388e:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8003892:	f7ff f995 	bl	8002bc0 <mpu_write_mem>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	cccccccd 	.word	0xcccccccd

080038a4 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <dmp_set_tap_time_multi+0x40>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80038ba:	89fb      	ldrh	r3, [r7, #14]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80038c4:	89fb      	ldrh	r3, [r7, #14]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80038ca:	f107 030c 	add.w	r3, r7, #12
 80038ce:	461a      	mov	r2, r3
 80038d0:	2102      	movs	r1, #2
 80038d2:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 80038d6:	f7ff f973 	bl	8002bc0 <mpu_write_mem>
 80038da:	4603      	mov	r3, r0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	cccccccd 	.word	0xcccccccd

080038e8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a13      	ldr	r2, [pc, #76]	@ (8003944 <dmp_set_shake_reject_thresh+0x5c>)
 80038f8:	fb82 1203 	smull	r1, r2, r2, r3
 80038fc:	1192      	asrs	r2, r2, #6
 80038fe:	17db      	asrs	r3, r3, #31
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	161b      	asrs	r3, r3, #24
 800390e:	b2db      	uxtb	r3, r3
 8003910:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	141b      	asrs	r3, r3, #16
 8003916:	b2db      	uxtb	r3, r3
 8003918:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	121b      	asrs	r3, r3, #8
 800391e:	b2db      	uxtb	r3, r3
 8003920:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	461a      	mov	r2, r3
 800392e:	2104      	movs	r1, #4
 8003930:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8003934:	f7ff f944 	bl	8002bc0 <mpu_write_mem>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	4a0c      	ldr	r2, [pc, #48]	@ (8003988 <dmp_set_shake_reject_time+0x40>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	b29b      	uxth	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	461a      	mov	r2, r3
 8003974:	2102      	movs	r1, #2
 8003976:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 800397a:	f7ff f921 	bl	8002bc0 <mpu_write_mem>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	cccccccd 	.word	0xcccccccd

0800398c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	4a0c      	ldr	r2, [pc, #48]	@ (80039cc <dmp_set_shake_reject_timeout+0x40>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 80039b2:	f107 030c 	add.w	r3, r7, #12
 80039b6:	461a      	mov	r2, r3
 80039b8:	2102      	movs	r1, #2
 80039ba:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 80039be:	f7ff f8ff 	bl	8002bc0 <mpu_write_mem>
 80039c2:	4603      	mov	r3, r0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	cccccccd 	.word	0xcccccccd

080039d0 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80039da:	2302      	movs	r3, #2
 80039dc:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80039de:	23ca      	movs	r3, #202	@ 0xca
 80039e0:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80039e2:	23e3      	movs	r3, #227	@ 0xe3
 80039e4:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80039e6:	2309      	movs	r3, #9
 80039e8:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	461a      	mov	r2, r3
 80039f0:	2104      	movs	r1, #4
 80039f2:	2068      	movs	r0, #104	@ 0x68
 80039f4:	f7ff f8e4 	bl	8002bc0 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80039f8:	23a3      	movs	r3, #163	@ 0xa3
 80039fa:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8003a06:	23c0      	movs	r3, #192	@ 0xc0
 8003a08:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8003a0a:	23c8      	movs	r3, #200	@ 0xc8
 8003a0c:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8003a0e:	23c2      	movs	r3, #194	@ 0xc2
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e005      	b.n	8003a20 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8003a14:	23a3      	movs	r3, #163	@ 0xa3
 8003a16:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8003a18:	23a3      	movs	r3, #163	@ 0xa3
 8003a1a:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8003a1c:	23a3      	movs	r3, #163	@ 0xa3
 8003a1e:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8003a2a:	23c4      	movs	r3, #196	@ 0xc4
 8003a2c:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8003a2e:	23cc      	movs	r3, #204	@ 0xcc
 8003a30:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8003a32:	23c6      	movs	r3, #198	@ 0xc6
 8003a34:	74bb      	strb	r3, [r7, #18]
 8003a36:	e005      	b.n	8003a44 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003a38:	23a3      	movs	r3, #163	@ 0xa3
 8003a3a:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8003a3c:	23a3      	movs	r3, #163	@ 0xa3
 8003a3e:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003a40:	23a3      	movs	r3, #163	@ 0xa3
 8003a42:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8003a44:	23a3      	movs	r3, #163	@ 0xa3
 8003a46:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003a48:	23a3      	movs	r3, #163	@ 0xa3
 8003a4a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8003a4c:	23a3      	movs	r3, #163	@ 0xa3
 8003a4e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	461a      	mov	r2, r3
 8003a56:	210a      	movs	r1, #10
 8003a58:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 8003a5c:	f7ff f8b0 	bl	8002bc0 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	733b      	strb	r3, [r7, #12]
 8003a6e:	e001      	b.n	8003a74 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003a70:	23d8      	movs	r3, #216	@ 0xd8
 8003a72:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	f640 20b6 	movw	r0, #2742	@ 0xab6
 8003a80:	f7ff f89e 	bl	8002bc0 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 f8c6 	bl	8003c20 <dmp_enable_gyro_cal>
 8003a94:	e002      	b.n	8003a9c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8003a96:	2000      	movs	r0, #0
 8003a98:	f000 f8c2 	bl	8003c20 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01d      	beq.n	8003ae2 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8003ab0:	23b2      	movs	r3, #178	@ 0xb2
 8003ab2:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8003ab4:	238b      	movs	r3, #139	@ 0x8b
 8003ab6:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8003ab8:	23b6      	movs	r3, #182	@ 0xb6
 8003aba:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8003abc:	239b      	movs	r3, #155	@ 0x9b
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e007      	b.n	8003ad2 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8003ac2:	23b0      	movs	r3, #176	@ 0xb0
 8003ac4:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8003aca:	23b4      	movs	r3, #180	@ 0xb4
 8003acc:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8003ace:	2390      	movs	r3, #144	@ 0x90
 8003ad0:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2104      	movs	r1, #4
 8003ada:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 8003ade:	f7ff f86f 	bl	8002bc0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d025      	beq.n	8003b38 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8003aec:	23f8      	movs	r3, #248	@ 0xf8
 8003aee:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	461a      	mov	r2, r3
 8003af6:	2101      	movs	r1, #1
 8003af8:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8003afc:	f7ff f860 	bl	8002bc0 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8003b00:	21fa      	movs	r1, #250	@ 0xfa
 8003b02:	2007      	movs	r0, #7
 8003b04:	f7ff fd22 	bl	800354c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8003b08:	2007      	movs	r0, #7
 8003b0a:	f7ff fe55 	bl	80037b8 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f7ff fe84 	bl	800381c <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8003b14:	2064      	movs	r0, #100	@ 0x64
 8003b16:	f7ff fea3 	bl	8003860 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8003b1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b1e:	f7ff fec1 	bl	80038a4 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8003b22:	21c8      	movs	r1, #200	@ 0xc8
 8003b24:	483c      	ldr	r0, [pc, #240]	@ (8003c18 <dmp_enable_feature+0x248>)
 8003b26:	f7ff fedf 	bl	80038e8 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8003b2a:	2028      	movs	r0, #40	@ 0x28
 8003b2c:	f7ff ff0c 	bl	8003948 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8003b30:	200a      	movs	r0, #10
 8003b32:	f7ff ff2b 	bl	800398c <dmp_set_shake_reject_timeout>
 8003b36:	e009      	b.n	8003b4c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8003b38:	23d8      	movs	r3, #216	@ 0xd8
 8003b3a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8003b3c:	f107 030c 	add.w	r3, r7, #12
 8003b40:	461a      	mov	r2, r3
 8003b42:	2101      	movs	r1, #1
 8003b44:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8003b48:	f7ff f83a 	bl	8002bc0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8003b56:	23d9      	movs	r3, #217	@ 0xd9
 8003b58:	733b      	strb	r3, [r7, #12]
 8003b5a:	e001      	b.n	8003b60 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8003b5c:	23d8      	movs	r3, #216	@ 0xd8
 8003b5e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	461a      	mov	r2, r3
 8003b66:	2101      	movs	r1, #1
 8003b68:	f240 703d 	movw	r0, #1853	@ 0x73d
 8003b6c:	f7ff f828 	bl	8002bc0 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f000 f880 	bl	8003c80 <dmp_enable_lp_quat>
 8003b80:	e002      	b.n	8003b88 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f000 f87c 	bl	8003c80 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f000 f89b 	bl	8003cce <dmp_enable_6x_lp_quat>
 8003b98:	e002      	b.n	8003ba0 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f000 f897 	bl	8003cce <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	f043 0308 	orr.w	r3, r3, #8
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003baa:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8003bac:	f7fd fbc4 	bl	8001338 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8003bc0:	4b16      	ldr	r3, [pc, #88]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003bc2:	7b9b      	ldrb	r3, [r3, #14]
 8003bc4:	3306      	adds	r3, #6
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003bca:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8003bd6:	4b11      	ldr	r3, [pc, #68]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003bd8:	7b9b      	ldrb	r3, [r3, #14]
 8003bda:	3306      	adds	r3, #6
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b0f      	ldr	r3, [pc, #60]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003be0:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	f003 0314 	and.w	r3, r3, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003bee:	7b9b      	ldrb	r3, [r3, #14]
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b09      	ldr	r3, [pc, #36]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003bf6:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003c04:	7b9b      	ldrb	r3, [r3, #14]
 8003c06:	3304      	adds	r3, #4
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <dmp_enable_feature+0x24c>)
 8003c0c:	739a      	strb	r2, [r3, #14]

    return 0;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	02cae309 	.word	0x02cae309
 8003c1c:	200000b4 	.word	0x200000b4

08003c20 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00f      	beq.n	8003c50 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8003c30:	4a11      	ldr	r2, [pc, #68]	@ (8003c78 <dmp_enable_gyro_cal+0x58>)
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c38:	c303      	stmia	r3!, {r0, r1}
 8003c3a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	461a      	mov	r2, r3
 8003c42:	2109      	movs	r1, #9
 8003c44:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8003c48:	f7fe ffba 	bl	8002bc0 <mpu_write_mem>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	e00e      	b.n	8003c6e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8003c50:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <dmp_enable_gyro_cal+0x5c>)
 8003c52:	f107 0308 	add.w	r3, r7, #8
 8003c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c58:	c303      	stmia	r3!, {r0, r1}
 8003c5a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8003c5c:	f107 0308 	add.w	r3, r7, #8
 8003c60:	461a      	mov	r2, r3
 8003c62:	2109      	movs	r1, #9
 8003c64:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8003c68:	f7fe ffaa 	bl	8002bc0 <mpu_write_mem>
 8003c6c:	4603      	mov	r3, r0
    }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	080084b4 	.word	0x080084b4
 8003c7c:	080084c0 	.word	0x080084c0

08003c80 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8003c90:	23c0      	movs	r3, #192	@ 0xc0
 8003c92:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8003c94:	23c2      	movs	r3, #194	@ 0xc2
 8003c96:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8003c98:	23c4      	movs	r3, #196	@ 0xc4
 8003c9a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8003c9c:	23c6      	movs	r3, #198	@ 0xc6
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e006      	b.n	8003cb0 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	218b      	movs	r1, #139	@ 0x8b
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 f91c 	bl	8007ee8 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8003cb0:	f107 030c 	add.w	r3, r7, #12
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	f640 2098 	movw	r0, #2712	@ 0xa98
 8003cbc:	f7fe ff80 	bl	8002bc0 <mpu_write_mem>

    return mpu_reset_fifo();
 8003cc0:	f7fd fb3a 	bl	8001338 <mpu_reset_fifo>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8003cde:	2320      	movs	r3, #32
 8003ce0:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8003ce2:	2328      	movs	r3, #40	@ 0x28
 8003ce4:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8003ce6:	2330      	movs	r3, #48	@ 0x30
 8003ce8:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8003cea:	2338      	movs	r3, #56	@ 0x38
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	e006      	b.n	8003cfe <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	21a3      	movs	r1, #163	@ 0xa3
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 f8f5 	bl	8007ee8 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8003cfe:	f107 030c 	add.w	r3, r7, #12
 8003d02:	461a      	mov	r2, r3
 8003d04:	2104      	movs	r1, #4
 8003d06:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8003d0a:	f7fe ff59 	bl	8002bc0 <mpu_write_mem>

    return mpu_reset_fifo();
 8003d0e:	f7fd fb13 	bl	8001338 <mpu_reset_fifo>
 8003d12:	4603      	mov	r3, r0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3303      	adds	r3, #3
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d2e:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3303      	adds	r3, #3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d3a:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8003d4a:	7bbb      	ldrb	r3, [r7, #14]
 8003d4c:	08db      	lsrs	r3, r3, #3
 8003d4e:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8003d50:	7bbb      	ldrb	r3, [r7, #14]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8003d5c:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <decode_gesture+0x84>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8003d64:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <decode_gesture+0x84>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	7b39      	ldrb	r1, [r7, #12]
 8003d6a:	7b7a      	ldrb	r2, [r7, #13]
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3301      	adds	r3, #1
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8003d7e:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <decode_gesture+0x84>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d006      	beq.n	8003d94 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <decode_gesture+0x84>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	0992      	lsrs	r2, r2, #6
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	4610      	mov	r0, r2
 8003d92:	4798      	blx	r3
    }

    return 0;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200000b4 	.word	0x200000b4

08003da4 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b092      	sub	sp, #72	@ 0x48
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8003db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dba:	2200      	movs	r2, #0
 8003dbc:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8003dbe:	4baf      	ldr	r3, [pc, #700]	@ (800407c <dmp_read_fifo+0x2d8>)
 8003dc0:	7b9b      	ldrb	r3, [r3, #14]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f107 0320 	add.w	r3, r7, #32
 8003dc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f7fd ff4e 	bl	8001c6c <mpu_read_fifo_stream>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <dmp_read_fifo+0x38>
        return -1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e14a      	b.n	8004072 <dmp_read_fifo+0x2ce>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8003ddc:	4ba7      	ldr	r3, [pc, #668]	@ (800407c <dmp_read_fifo+0x2d8>)
 8003dde:	895b      	ldrh	r3, [r3, #10]
 8003de0:	f003 0314 	and.w	r3, r3, #20
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 808a 	beq.w	8003efe <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dee:	061a      	lsls	r2, r3, #24
 8003df0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8003df8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003dfc:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003dfe:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8003e00:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003e04:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e0e:	061a      	lsls	r2, r3, #24
 8003e10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003e18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e1c:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003e1e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e24:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003e2a:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003e2c:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e32:	061a      	lsls	r2, r3, #24
 8003e34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003e3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e40:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003e42:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003e44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e48:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003e4e:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003e50:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003e52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003e56:	061a      	lsls	r2, r3, #24
 8003e58:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003e60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e64:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003e66:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003e68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e6c:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003e72:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003e74:	601a      	str	r2, [r3, #0]
        ii += 16;
 8003e76:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e7a:	3310      	adds	r3, #16
 8003e7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	141b      	asrs	r3, r3, #16
 8003e86:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	141b      	asrs	r3, r3, #16
 8003e90:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3308      	adds	r3, #8
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	141b      	asrs	r3, r3, #16
 8003e9a:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	141b      	asrs	r3, r3, #16
 8003ea4:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	fb03 f202 	mul.w	r2, r3, r2
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	6979      	ldr	r1, [r7, #20]
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	69b9      	ldr	r1, [r7, #24]
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003ec0:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	69f9      	ldr	r1, [r7, #28]
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003eca:	4413      	add	r3, r2
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8003ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ed4:	db03      	blt.n	8003ede <dmp_read_fifo+0x13a>
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed8:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8003edc:	dd07      	ble.n	8003eee <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8003ede:	f7fd fa2b 	bl	8001338 <mpu_reset_fifo>
            sensors[0] = 0;
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	801a      	strh	r2, [r3, #0]
            return -1;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	e0c1      	b.n	8004072 <dmp_read_fifo+0x2ce>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8003eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef8:	b21a      	sxth	r2, r3
 8003efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003efc:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003efe:	4b5f      	ldr	r3, [pc, #380]	@ (800407c <dmp_read_fifo+0x2d8>)
 8003f00:	895b      	ldrh	r3, [r3, #10]
 8003f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04c      	beq.n	8003fa4 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003f0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f0e:	3348      	adds	r3, #72	@ 0x48
 8003f10:	443b      	add	r3, r7
 8003f12:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	b21a      	sxth	r2, r3
 8003f1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f1e:	3301      	adds	r3, #1
 8003f20:	3348      	adds	r3, #72	@ 0x48
 8003f22:	443b      	add	r3, r7
 8003f24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f28:	b21b      	sxth	r3, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8003f32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f36:	3302      	adds	r3, #2
 8003f38:	3348      	adds	r3, #72	@ 0x48
 8003f3a:	443b      	add	r3, r7
 8003f3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	b219      	sxth	r1, r3
 8003f44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f48:	3303      	adds	r3, #3
 8003f4a:	3348      	adds	r3, #72	@ 0x48
 8003f4c:	443b      	add	r3, r7
 8003f4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3302      	adds	r3, #2
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	b212      	sxth	r2, r2
 8003f5c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8003f5e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f62:	3304      	adds	r3, #4
 8003f64:	3348      	adds	r3, #72	@ 0x48
 8003f66:	443b      	add	r3, r7
 8003f68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	b219      	sxth	r1, r3
 8003f70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f74:	3305      	adds	r3, #5
 8003f76:	3348      	adds	r3, #72	@ 0x48
 8003f78:	443b      	add	r3, r7
 8003f7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	3304      	adds	r3, #4
 8003f84:	430a      	orrs	r2, r1
 8003f86:	b212      	sxth	r2, r2
 8003f88:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8003f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f8e:	3306      	adds	r3, #6
 8003f90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8003f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f9a:	f043 0308 	orr.w	r3, r3, #8
 8003f9e:	b21a      	sxth	r2, r3
 8003fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa2:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003fa4:	4b35      	ldr	r3, [pc, #212]	@ (800407c <dmp_read_fifo+0x2d8>)
 8003fa6:	895b      	ldrh	r3, [r3, #10]
 8003fa8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d04c      	beq.n	800404a <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fb4:	3348      	adds	r3, #72	@ 0x48
 8003fb6:	443b      	add	r3, r7
 8003fb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	3348      	adds	r3, #72	@ 0x48
 8003fc8:	443b      	add	r3, r7
 8003fca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fce:	b21b      	sxth	r3, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b21a      	sxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8003fd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fdc:	3302      	adds	r3, #2
 8003fde:	3348      	adds	r3, #72	@ 0x48
 8003fe0:	443b      	add	r3, r7
 8003fe2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	b219      	sxth	r1, r3
 8003fea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fee:	3303      	adds	r3, #3
 8003ff0:	3348      	adds	r3, #72	@ 0x48
 8003ff2:	443b      	add	r3, r7
 8003ff4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ff8:	b21a      	sxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	430a      	orrs	r2, r1
 8004000:	b212      	sxth	r2, r2
 8004002:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004004:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004008:	3304      	adds	r3, #4
 800400a:	3348      	adds	r3, #72	@ 0x48
 800400c:	443b      	add	r3, r7
 800400e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	b219      	sxth	r1, r3
 8004016:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800401a:	3305      	adds	r3, #5
 800401c:	3348      	adds	r3, #72	@ 0x48
 800401e:	443b      	add	r3, r7
 8004020:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004024:	b21a      	sxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3304      	adds	r3, #4
 800402a:	430a      	orrs	r2, r1
 800402c:	b212      	sxth	r2, r2
 800402e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004030:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004034:	3306      	adds	r3, #6
 8004036:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004040:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8004044:	b21a      	sxth	r2, r3
 8004046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004048:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800404a:	4b0c      	ldr	r3, [pc, #48]	@ (800407c <dmp_read_fifo+0x2d8>)
 800404c:	895b      	ldrh	r3, [r3, #10]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8004056:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800405a:	f107 0220 	add.w	r2, r7, #32
 800405e:	4413      	add	r3, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fe5b 	bl	8003d1c <decode_gesture>

    get_ms(timestamp);
 8004066:	f001 fa05 	bl	8005474 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	601a      	str	r2, [r3, #0]
    return 0;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3748      	adds	r7, #72	@ 0x48
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200000b4 	.word	0x200000b4

08004080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004084:	f3bf 8f4f 	dsb	sy
}
 8004088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <__NVIC_SystemReset+0x24>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004092:	4904      	ldr	r1, [pc, #16]	@ (80040a4 <__NVIC_SystemReset+0x24>)
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <__NVIC_SystemReset+0x28>)
 8004096:	4313      	orrs	r3, r2
 8004098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800409a:	f3bf 8f4f 	dsb	sy
}
 800409e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80040a0:	bf00      	nop
 80040a2:	e7fd      	b.n	80040a0 <__NVIC_SystemReset+0x20>
 80040a4:	e000ed00 	.word	0xe000ed00
 80040a8:	05fa0004 	.word	0x05fa0004

080040ac <inv_row_2_scale>:
float pitch, roll, yaw;
float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
float dcm[3][3];
static signed char gyro_orientation[9] = { -1, 0, 0, 0, -1, 0, 0, 0, 1 };

static unsigned short inv_row_2_scale(const signed char *row) {
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  unsigned short b;

  if (row[0] > 0)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f993 3000 	ldrsb.w	r3, [r3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dd02      	ble.n	80040c4 <inv_row_2_scale+0x18>
    b = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	81fb      	strh	r3, [r7, #14]
 80040c2:	e02d      	b.n	8004120 <inv_row_2_scale+0x74>
  else if (row[0] < 0)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f993 3000 	ldrsb.w	r3, [r3]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da02      	bge.n	80040d4 <inv_row_2_scale+0x28>
    b = 4;
 80040ce:	2304      	movs	r3, #4
 80040d0:	81fb      	strh	r3, [r7, #14]
 80040d2:	e025      	b.n	8004120 <inv_row_2_scale+0x74>
  else if (row[1] > 0)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3301      	adds	r3, #1
 80040d8:	f993 3000 	ldrsb.w	r3, [r3]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	dd02      	ble.n	80040e6 <inv_row_2_scale+0x3a>
    b = 1;
 80040e0:	2301      	movs	r3, #1
 80040e2:	81fb      	strh	r3, [r7, #14]
 80040e4:	e01c      	b.n	8004120 <inv_row_2_scale+0x74>
  else if (row[1] < 0)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3301      	adds	r3, #1
 80040ea:	f993 3000 	ldrsb.w	r3, [r3]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da02      	bge.n	80040f8 <inv_row_2_scale+0x4c>
    b = 5;
 80040f2:	2305      	movs	r3, #5
 80040f4:	81fb      	strh	r3, [r7, #14]
 80040f6:	e013      	b.n	8004120 <inv_row_2_scale+0x74>
  else if (row[2] > 0)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3302      	adds	r3, #2
 80040fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004100:	2b00      	cmp	r3, #0
 8004102:	dd02      	ble.n	800410a <inv_row_2_scale+0x5e>
    b = 2;
 8004104:	2302      	movs	r3, #2
 8004106:	81fb      	strh	r3, [r7, #14]
 8004108:	e00a      	b.n	8004120 <inv_row_2_scale+0x74>
  else if (row[2] < 0)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3302      	adds	r3, #2
 800410e:	f993 3000 	ldrsb.w	r3, [r3]
 8004112:	2b00      	cmp	r3, #0
 8004114:	da02      	bge.n	800411c <inv_row_2_scale+0x70>
    b = 6;
 8004116:	2306      	movs	r3, #6
 8004118:	81fb      	strh	r3, [r7, #14]
 800411a:	e001      	b.n	8004120 <inv_row_2_scale+0x74>
  else
    b = 7;      // error
 800411c:	2307      	movs	r3, #7
 800411e:	81fb      	strh	r3, [r7, #14]
  return b;
 8004120:	89fb      	ldrh	r3, [r7, #14]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <inv_orientation_matrix_to_scalar>:

static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx) {
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  unsigned short scalar;
  scalar = inv_row_2_scale(mtx);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffb8 	bl	80040ac <inv_row_2_scale>
 800413c:	4603      	mov	r3, r0
 800413e:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3303      	adds	r3, #3
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ffb1 	bl	80040ac <inv_row_2_scale>
 800414a:	4603      	mov	r3, r0
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	b21a      	sxth	r2, r3
 8004150:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004154:	4313      	orrs	r3, r2
 8004156:	b21b      	sxth	r3, r3
 8004158:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 6) << 6;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3306      	adds	r3, #6
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ffa4 	bl	80040ac <inv_row_2_scale>
 8004164:	4603      	mov	r3, r0
 8004166:	019b      	lsls	r3, r3, #6
 8004168:	b21a      	sxth	r2, r3
 800416a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800416e:	4313      	orrs	r3, r2
 8004170:	b21b      	sxth	r3, r3
 8004172:	81fb      	strh	r3, [r7, #14]

  return scalar;
 8004174:	89fb      	ldrh	r3, [r7, #14]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <run_self_test>:

static void run_self_test(void) {
 800417e:	b580      	push	{r7, lr}
 8004180:	b08a      	sub	sp, #40	@ 0x28
 8004182:	af00      	add	r7, sp, #0
  int result;
  long gyro[3], accel[3];

  result = mpu_run_self_test(gyro, accel);
 8004184:	f107 020c 	add.w	r2, r7, #12
 8004188:	f107 0318 	add.w	r3, r7, #24
 800418c:	4611      	mov	r1, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fc3a 	bl	8002a08 <mpu_run_self_test>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24
  if (result == 0x7) {
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	2b07      	cmp	r3, #7
 800419a:	d14b      	bne.n	8004234 <run_self_test+0xb6>
    /* Test passed. We can trust the gyro data here, so let's push it down
     * to the DMP.
     */
    float sens;
    unsigned short accel_sens;
    mpu_get_gyro_sens(&sens);
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fc03 	bl	80019ac <mpu_get_gyro_sens>
    gyro[0] = (long) (gyro[0] * sens);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80041b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041bc:	ee17 3a90 	vmov	r3, s15
 80041c0:	61bb      	str	r3, [r7, #24]
    gyro[1] = (long) (gyro[1] * sens);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d8:	ee17 3a90 	vmov	r3, s15
 80041dc:	61fb      	str	r3, [r7, #28]
    gyro[2] = (long) (gyro[2] * sens);
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80041ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041f4:	ee17 3a90 	vmov	r3, s15
 80041f8:	623b      	str	r3, [r7, #32]
    dmp_set_gyro_bias(gyro);
 80041fa:	f107 0318 	add.w	r3, r7, #24
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe ff50 	bl	80030a4 <dmp_set_gyro_bias>
    mpu_get_accel_sens(&accel_sens);
 8004204:	1dbb      	adds	r3, r7, #6
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd fc08 	bl	8001a1c <mpu_get_accel_sens>
    accel[0] *= accel_sens;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	60fb      	str	r3, [r7, #12]
    accel[1] *= accel_sens;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	613b      	str	r3, [r7, #16]
    accel[2] *= accel_sens;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
    dmp_set_accel_bias(accel);
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f842 	bl	80032b8 <dmp_set_accel_bias>
    log_i("setting bias succesfully ......\r\n");
  }
}
 8004234:	bf00      	nop
 8004236:	3728      	adds	r7, #40	@ 0x28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <MPU6050_getDeviceID>:

/**************************实现函数********************************************
 *函数原型:		uint8_t MPU6050_getDeviceID(void)
 *功　　能:	    读取  MPU6050 WHO_AM_I 标识	 将返回 0x68
 *******************************************************************************/
uint8_t MPU6050_getDeviceID(void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  memset(buffer,0,sizeof(buffer));
 8004240:	220e      	movs	r2, #14
 8004242:	2100      	movs	r1, #0
 8004244:	4806      	ldr	r0, [pc, #24]	@ (8004260 <MPU6050_getDeviceID+0x24>)
 8004246:	f003 fe4f 	bl	8007ee8 <memset>
  i2c_read(devAddr, MPU6050_RA_WHO_AM_I, 1, buffer);
 800424a:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <MPU6050_getDeviceID+0x24>)
 800424c:	2201      	movs	r2, #1
 800424e:	2175      	movs	r1, #117	@ 0x75
 8004250:	2068      	movs	r0, #104	@ 0x68
 8004252:	f7fc fe71 	bl	8000f38 <i2c_read>
  return buffer[0];
 8004256:	4b02      	ldr	r3, [pc, #8]	@ (8004260 <MPU6050_getDeviceID+0x24>)
 8004258:	781b      	ldrb	r3, [r3, #0]
}
 800425a:	4618      	mov	r0, r3
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	200000f8 	.word	0x200000f8

08004264 <DMP_Init>:
 函数功能：MPU6050内置DMP的初始化
 入口参数：无
 返回  值：无
 作    者：平衡小车之家
 **************************************************************************/
void DMP_Init(void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  if (MPU6050_getDeviceID() != 0x68)
 8004268:	f7ff ffe8 	bl	800423c <MPU6050_getDeviceID>
 800426c:	4603      	mov	r3, r0
 800426e:	2b68      	cmp	r3, #104	@ 0x68
 8004270:	d001      	beq.n	8004276 <DMP_Init+0x12>
    NVIC_SystemReset();
 8004272:	f7ff ff05 	bl	8004080 <__NVIC_SystemReset>
  if (!mpu_init(NULL)) {
 8004276:	2000      	movs	r0, #0
 8004278:	f7fc feda 	bl	8001030 <mpu_init>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11d      	bne.n	80042be <DMP_Init+0x5a>
    if (!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8004282:	2078      	movs	r0, #120	@ 0x78
 8004284:	f7fd fc6c 	bl	8001b60 <mpu_set_sensors>
      log_i("mpu_set_sensor complete ......\r\n");
    if (!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8004288:	2078      	movs	r0, #120	@ 0x78
 800428a:	f7fd fc17 	bl	8001abc <mpu_configure_fifo>
      log_i("mpu_configure_fifo complete ......\r\n");
    if (!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 800428e:	20c8      	movs	r0, #200	@ 0xc8
 8004290:	f7fd fb26 	bl	80018e0 <mpu_set_sample_rate>
      log_i("mpu_set_sample_rate complete ......\r\n");
    if (!dmp_load_motion_driver_firmware())
 8004294:	f7fe fe0a 	bl	8002eac <dmp_load_motion_driver_firmware>
      log_i("dmp_load_motion_driver_firmware complete ......\r\n");
    if (!dmp_set_orientation(
 8004298:	480a      	ldr	r0, [pc, #40]	@ (80042c4 <DMP_Init+0x60>)
 800429a:	f7ff ff48 	bl	800412e <inv_orientation_matrix_to_scalar>
 800429e:	4603      	mov	r3, r0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fe13 	bl	8002ecc <dmp_set_orientation>
        inv_orientation_matrix_to_scalar(gyro_orientation)))
      log_i("dmp_set_orientation complete ......\r\n");
    if (!dmp_enable_feature(
 80042a6:	f240 1073 	movw	r0, #371	@ 0x173
 80042aa:	f7ff fb91 	bl	80039d0 <dmp_enable_feature>
        DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL
            | DMP_FEATURE_SEND_CAL_GYRO |
            DMP_FEATURE_GYRO_CAL))
      log_i("dmp_enable_feature complete ......\r\n");
    if (!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 80042ae:	20c8      	movs	r0, #200	@ 0xc8
 80042b0:	f7ff f904 	bl	80034bc <dmp_set_fifo_rate>
      log_i("dmp_set_fifo_rate complete ......\r\n");
    run_self_test();
 80042b4:	f7ff ff63 	bl	800417e <run_self_test>
    if (!mpu_set_dmp_state(1))
 80042b8:	2001      	movs	r0, #1
 80042ba:	f7fe fda3 	bl	8002e04 <mpu_set_dmp_state>
      log_i("mpu_set_dmp_state complete ......\r\n");
  }
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000030 	.word	0x20000030

080042c8 <Read_DMP>:
 函数功能：读取MPU6050内置DMP的姿态信息
 入口参数：无
 返回  值：无
 作    者：平衡小车之家
 **************************************************************************/
void Read_DMP(void) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af02      	add	r7, sp, #8
  unsigned long sensor_timestamp;
  unsigned char more;
  long quat[4];

  dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 80042ce:	f107 0114 	add.w	r1, r7, #20
 80042d2:	463a      	mov	r2, r7
 80042d4:	f107 0313 	add.w	r3, r7, #19
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	4b8f      	ldr	r3, [pc, #572]	@ (8004518 <Read_DMP+0x250>)
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	460b      	mov	r3, r1
 80042e0:	498e      	ldr	r1, [pc, #568]	@ (800451c <Read_DMP+0x254>)
 80042e2:	488f      	ldr	r0, [pc, #572]	@ (8004520 <Read_DMP+0x258>)
 80042e4:	f7ff fd5e 	bl	8003da4 <dmp_read_fifo>
  if (sensors & INV_WXYZ_QUAT) {
 80042e8:	4b8b      	ldr	r3, [pc, #556]	@ (8004518 <Read_DMP+0x250>)
 80042ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8107 	beq.w	8004508 <Read_DMP+0x240>
    q0 = quat[0] / q30;   // w
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	ee07 3a90 	vmov	s15, r3
 8004300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004304:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8004524 <Read_DMP+0x25c>
 8004308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800430c:	4b86      	ldr	r3, [pc, #536]	@ (8004528 <Read_DMP+0x260>)
 800430e:	edc3 7a00 	vstr	s15, [r3]
    q1 = quat[1] / q30;   // x
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800431c:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8004524 <Read_DMP+0x25c>
 8004320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004324:	4b81      	ldr	r3, [pc, #516]	@ (800452c <Read_DMP+0x264>)
 8004326:	edc3 7a00 	vstr	s15, [r3]
    q2 = quat[2] / q30;   // y
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004334:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8004524 <Read_DMP+0x25c>
 8004338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800433c:	4b7c      	ldr	r3, [pc, #496]	@ (8004530 <Read_DMP+0x268>)
 800433e:	edc3 7a00 	vstr	s15, [r3]
    q3 = quat[3] / q30;   // z
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800434c:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004524 <Read_DMP+0x25c>
 8004350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004354:	4b77      	ldr	r3, [pc, #476]	@ (8004534 <Read_DMP+0x26c>)
 8004356:	edc3 7a00 	vstr	s15, [r3]

    // Formulas from: https://www.sedris.org/wg8home/Documents/WG80485.pdf, page 39
    phi   = atan2f(q0 * q1 +  q2 * q3, 0.5 - (q1 * q1 + q2 * q2) );
 800435a:	4b73      	ldr	r3, [pc, #460]	@ (8004528 <Read_DMP+0x260>)
 800435c:	ed93 7a00 	vldr	s14, [r3]
 8004360:	4b72      	ldr	r3, [pc, #456]	@ (800452c <Read_DMP+0x264>)
 8004362:	edd3 7a00 	vldr	s15, [r3]
 8004366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800436a:	4b71      	ldr	r3, [pc, #452]	@ (8004530 <Read_DMP+0x268>)
 800436c:	edd3 6a00 	vldr	s13, [r3]
 8004370:	4b70      	ldr	r3, [pc, #448]	@ (8004534 <Read_DMP+0x26c>)
 8004372:	edd3 7a00 	vldr	s15, [r3]
 8004376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800437a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800437e:	4b6b      	ldr	r3, [pc, #428]	@ (800452c <Read_DMP+0x264>)
 8004380:	ed93 7a00 	vldr	s14, [r3]
 8004384:	4b69      	ldr	r3, [pc, #420]	@ (800452c <Read_DMP+0x264>)
 8004386:	edd3 7a00 	vldr	s15, [r3]
 800438a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800438e:	4b68      	ldr	r3, [pc, #416]	@ (8004530 <Read_DMP+0x268>)
 8004390:	edd3 6a00 	vldr	s13, [r3]
 8004394:	4b66      	ldr	r3, [pc, #408]	@ (8004530 <Read_DMP+0x268>)
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043aa:	eef0 0a67 	vmov.f32	s1, s15
 80043ae:	eeb0 0a46 	vmov.f32	s0, s12
 80043b2:	f003 fdf7 	bl	8007fa4 <atan2f>
 80043b6:	eef0 7a40 	vmov.f32	s15, s0
 80043ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004538 <Read_DMP+0x270>)
 80043bc:	edc3 7a00 	vstr	s15, [r3]
    theta = asinf(2  * (q0 * q2 - q3 * q1 )); // TODO
 80043c0:	4b59      	ldr	r3, [pc, #356]	@ (8004528 <Read_DMP+0x260>)
 80043c2:	ed93 7a00 	vldr	s14, [r3]
 80043c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004530 <Read_DMP+0x268>)
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043d0:	4b58      	ldr	r3, [pc, #352]	@ (8004534 <Read_DMP+0x26c>)
 80043d2:	edd3 6a00 	vldr	s13, [r3]
 80043d6:	4b55      	ldr	r3, [pc, #340]	@ (800452c <Read_DMP+0x264>)
 80043d8:	edd3 7a00 	vldr	s15, [r3]
 80043dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043e8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ec:	f003 fdae 	bl	8007f4c <asinf>
 80043f0:	eef0 7a40 	vmov.f32	s15, s0
 80043f4:	4b51      	ldr	r3, [pc, #324]	@ (800453c <Read_DMP+0x274>)
 80043f6:	edc3 7a00 	vstr	s15, [r3]
    psi   = atan2f(q0 * q3 + q1* q2, 0.5 - 1 * (q2 * q2 + q3 * q3)   );
 80043fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <Read_DMP+0x260>)
 80043fc:	ed93 7a00 	vldr	s14, [r3]
 8004400:	4b4c      	ldr	r3, [pc, #304]	@ (8004534 <Read_DMP+0x26c>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800440a:	4b48      	ldr	r3, [pc, #288]	@ (800452c <Read_DMP+0x264>)
 800440c:	edd3 6a00 	vldr	s13, [r3]
 8004410:	4b47      	ldr	r3, [pc, #284]	@ (8004530 <Read_DMP+0x268>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800441a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800441e:	4b44      	ldr	r3, [pc, #272]	@ (8004530 <Read_DMP+0x268>)
 8004420:	ed93 7a00 	vldr	s14, [r3]
 8004424:	4b42      	ldr	r3, [pc, #264]	@ (8004530 <Read_DMP+0x268>)
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800442e:	4b41      	ldr	r3, [pc, #260]	@ (8004534 <Read_DMP+0x26c>)
 8004430:	edd3 6a00 	vldr	s13, [r3]
 8004434:	4b3f      	ldr	r3, [pc, #252]	@ (8004534 <Read_DMP+0x26c>)
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800443e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004442:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444a:	eef0 0a67 	vmov.f32	s1, s15
 800444e:	eeb0 0a46 	vmov.f32	s0, s12
 8004452:	f003 fda7 	bl	8007fa4 <atan2f>
 8004456:	eef0 7a40 	vmov.f32	s15, s0
 800445a:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <Read_DMP+0x278>)
 800445c:	edc3 7a00 	vstr	s15, [r3]

    // angle in degrees:
    roll  = rad2deg(phi);
 8004460:	4b35      	ldr	r3, [pc, #212]	@ (8004538 <Read_DMP+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc f81b 	bl	80004a0 <__aeabi_f2d>
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	4b35      	ldr	r3, [pc, #212]	@ (8004544 <Read_DMP+0x27c>)
 8004470:	f7fc f86e 	bl	8000550 <__aeabi_dmul>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	a324      	add	r3, pc, #144	@ (adr r3, 8004510 <Read_DMP+0x248>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fc f98f 	bl	80007a4 <__aeabi_ddiv>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	f7fc fb19 	bl	8000ac4 <__aeabi_d2f>
 8004492:	4603      	mov	r3, r0
 8004494:	4a2c      	ldr	r2, [pc, #176]	@ (8004548 <Read_DMP+0x280>)
 8004496:	6013      	str	r3, [r2, #0]
    pitch = rad2deg(theta);
 8004498:	4b28      	ldr	r3, [pc, #160]	@ (800453c <Read_DMP+0x274>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb ffff 	bl	80004a0 <__aeabi_f2d>
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	4b27      	ldr	r3, [pc, #156]	@ (8004544 <Read_DMP+0x27c>)
 80044a8:	f7fc f852 	bl	8000550 <__aeabi_dmul>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	a316      	add	r3, pc, #88	@ (adr r3, 8004510 <Read_DMP+0x248>)
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f7fc f973 	bl	80007a4 <__aeabi_ddiv>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	f7fc fafd 	bl	8000ac4 <__aeabi_d2f>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <Read_DMP+0x284>)
 80044ce:	6013      	str	r3, [r2, #0]
    yaw   = rad2deg(psi);
 80044d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <Read_DMP+0x278>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fb ffe3 	bl	80004a0 <__aeabi_f2d>
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	4b19      	ldr	r3, [pc, #100]	@ (8004544 <Read_DMP+0x27c>)
 80044e0:	f7fc f836 	bl	8000550 <__aeabi_dmul>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	a308      	add	r3, pc, #32	@ (adr r3, 8004510 <Read_DMP+0x248>)
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f7fc f957 	bl	80007a4 <__aeabi_ddiv>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	f7fc fae1 	bl	8000ac4 <__aeabi_d2f>
 8004502:	4603      	mov	r3, r0
 8004504:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <Read_DMP+0x288>)
 8004506:	6013      	str	r3, [r2, #0]

  }

}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	54442d18 	.word	0x54442d18
 8004514:	400921fb 	.word	0x400921fb
 8004518:	200000d2 	.word	0x200000d2
 800451c:	200000cc 	.word	0x200000cc
 8004520:	200000c4 	.word	0x200000c4
 8004524:	4e800000 	.word	0x4e800000
 8004528:	2000002c 	.word	0x2000002c
 800452c:	200000ec 	.word	0x200000ec
 8004530:	200000f0 	.word	0x200000f0
 8004534:	200000f4 	.word	0x200000f4
 8004538:	200000d4 	.word	0x200000d4
 800453c:	200000d8 	.word	0x200000d8
 8004540:	200000dc 	.word	0x200000dc
 8004544:	40668000 	.word	0x40668000
 8004548:	200000e4 	.word	0x200000e4
 800454c:	200000e0 	.word	0x200000e0
 8004550:	200000e8 	.word	0x200000e8

08004554 <Calubration_DMP>:
 Function: Wait to active the DMP mode and set up.
 Entry parameters: none
 Return value: none
 **************************************************************************/
void Calubration_DMP(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
  float avg_gyro_x, avg_gyro_y, avg_gyro_z;

  do
  {
	  avg_gyro_x=avg_gyro_y=avg_gyro_z=0;
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	60fb      	str	r3, [r7, #12]
	  for (uint32_t i =0; i<100 ;i++)
 8004568:	2300      	movs	r3, #0
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	e04c      	b.n	8004608 <Calubration_DMP+0xb4>
	  {
		  Read_DMP();
 800456e:	f7ff feab 	bl	80042c8 <Read_DMP>
		  avg_gyro_x += abs((float)gyro[0]);
 8004572:	4b44      	ldr	r3, [pc, #272]	@ (8004684 <Calubration_DMP+0x130>)
 8004574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004584:	ee17 3a90 	vmov	r3, s15
 8004588:	2b00      	cmp	r3, #0
 800458a:	bfb8      	it	lt
 800458c:	425b      	neglt	r3, r3
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004596:	ed97 7a03 	vldr	s14, [r7, #12]
 800459a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459e:	edc7 7a03 	vstr	s15, [r7, #12]
		  avg_gyro_y += abs((float)gyro[1]);
 80045a2:	4b38      	ldr	r3, [pc, #224]	@ (8004684 <Calubration_DMP+0x130>)
 80045a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045b4:	ee17 3a90 	vmov	r3, s15
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bfb8      	it	lt
 80045bc:	425b      	neglt	r3, r3
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80045ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ce:	edc7 7a02 	vstr	s15, [r7, #8]
		  avg_gyro_z += abs((float)gyro[2]);
 80045d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004684 <Calubration_DMP+0x130>)
 80045d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e4:	ee17 3a90 	vmov	r3, s15
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfb8      	it	lt
 80045ec:	425b      	neglt	r3, r3
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80045fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045fe:	edc7 7a01 	vstr	s15, [r7, #4]
	  for (uint32_t i =0; i<100 ;i++)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b63      	cmp	r3, #99	@ 0x63
 800460c:	d9af      	bls.n	800456e <Calubration_DMP+0x1a>
	  }
	  avg_gyro_x/=100;
 800460e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004612:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8004688 <Calubration_DMP+0x134>
 8004616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800461a:	edc7 7a03 	vstr	s15, [r7, #12]
	  avg_gyro_y/=100;
 800461e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004622:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8004688 <Calubration_DMP+0x134>
 8004626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800462a:	edc7 7a02 	vstr	s15, [r7, #8]
	  avg_gyro_z/=100;
 800462e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004632:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8004688 <Calubration_DMP+0x134>
 8004636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800463a:	edc7 7a01 	vstr	s15, [r7, #4]

  } while(avg_gyro_x>5 || avg_gyro_y>5 || avg_gyro_z>5);
 800463e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004642:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464e:	dc84      	bgt.n	800455a <Calubration_DMP+0x6>
 8004650:	edd7 7a02 	vldr	s15, [r7, #8]
 8004654:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	f73f af7b 	bgt.w	800455a <Calubration_DMP+0x6>
 8004664:	edd7 7a01 	vldr	s15, [r7, #4]
 8004668:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800466c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	f73f af71 	bgt.w	800455a <Calubration_DMP+0x6>
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200000c4 	.word	0x200000c4
 8004688:	42c80000 	.word	0x42c80000

0800468c <DMP_get_gyro_offsets>:


void DMP_get_gyro_offsets(float* gx_offset, float* gy_offset, float* gz_offset)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
	  *gx_offset = 0.0;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
	  *gy_offset = 0.0;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
	  *gz_offset = 0.0;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
	  for(uint32_t i=0 ; i<100; i++)
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e031      	b.n	800471a <DMP_get_gyro_offsets+0x8e>
	  {
		  Read_DMP();
 80046b6:	f7ff fe07 	bl	80042c8 <Read_DMP>
		  *gx_offset = *gx_offset + (float)gyro[0];
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	ed93 7a00 	vldr	s14, [r3]
 80046c0:	4b28      	ldr	r3, [pc, #160]	@ (8004764 <DMP_get_gyro_offsets+0xd8>)
 80046c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	edc3 7a00 	vstr	s15, [r3]
		  *gy_offset = *gy_offset + (float)gyro[1];
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	ed93 7a00 	vldr	s14, [r3]
 80046de:	4b21      	ldr	r3, [pc, #132]	@ (8004764 <DMP_get_gyro_offsets+0xd8>)
 80046e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	edc3 7a00 	vstr	s15, [r3]
		  *gz_offset = *gz_offset + (float)gyro[2];
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	ed93 7a00 	vldr	s14, [r3]
 80046fc:	4b19      	ldr	r3, [pc, #100]	@ (8004764 <DMP_get_gyro_offsets+0xd8>)
 80046fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	edc3 7a00 	vstr	s15, [r3]
	  for(uint32_t i=0 ; i<100; i++)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3301      	adds	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b63      	cmp	r3, #99	@ 0x63
 800471e:	d9ca      	bls.n	80046b6 <DMP_get_gyro_offsets+0x2a>
	  }

	  *gx_offset=*gx_offset/100;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	ed93 7a00 	vldr	s14, [r3]
 8004726:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8004768 <DMP_get_gyro_offsets+0xdc>
 800472a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	edc3 7a00 	vstr	s15, [r3]
	  *gy_offset=*gy_offset/100;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	ed93 7a00 	vldr	s14, [r3]
 800473a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004768 <DMP_get_gyro_offsets+0xdc>
 800473e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	edc3 7a00 	vstr	s15, [r3]
	  *gz_offset=*gz_offset/100;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	ed93 7a00 	vldr	s14, [r3]
 800474e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8004768 <DMP_get_gyro_offsets+0xdc>
 8004752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	edc3 7a00 	vstr	s15, [r3]
}
 800475c:	bf00      	nop
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	200000c4 	.word	0x200000c4
 8004768:	42c80000 	.word	0x42c80000

0800476c <initializePID>:
				   float Kd,
				   float T,
				   float min_integral_limit,
				   float max_integral_limit,
				   float min_output_limit,
				   float max_output_limit) {
 800476c:	b480      	push	{r7}
 800476e:	b08b      	sub	sp, #44	@ 0x2c
 8004770:	af00      	add	r7, sp, #0
 8004772:	6278      	str	r0, [r7, #36]	@ 0x24
 8004774:	ed87 0a08 	vstr	s0, [r7, #32]
 8004778:	edc7 0a07 	vstr	s1, [r7, #28]
 800477c:	ed87 1a06 	vstr	s2, [r7, #24]
 8004780:	edc7 1a05 	vstr	s3, [r7, #20]
 8004784:	ed87 2a04 	vstr	s4, [r7, #16]
 8004788:	edc7 2a03 	vstr	s5, [r7, #12]
 800478c:	ed87 3a02 	vstr	s6, [r7, #8]
 8004790:	edc7 3a01 	vstr	s7, [r7, #4]

    pid->Kp = Kp;
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	609a      	str	r2, [r3, #8]
    pid->T = T;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	60da      	str	r2, [r3, #12]

    pid->prev_setpoint = 0.0f;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]

    pid->prev_error      = 0.0f;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	611a      	str	r2, [r3, #16]
    pid->prev_derivative = 0.0f;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	61da      	str	r2, [r3, #28]
    pid->integral        = 0.0f;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	619a      	str	r2, [r3, #24]

    pid->min_integral_limit = min_integral_limit;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	621a      	str	r2, [r3, #32]
    pid->max_integral_limit = max_integral_limit;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->min_output_limit = min_output_limit;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->max_output_limit = max_output_limit;
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80047e4:	bf00      	nop
 80047e6:	372c      	adds	r7, #44	@ 0x2c
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <updatePID>:
// Update the PID controller
float updatePID(PIDController *pid,
		        float setpoint,
				float measurement,
				float measurement_dot)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b08b      	sub	sp, #44	@ 0x2c
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80047fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8004800:	ed87 1a00 	vstr	s2, [r7]
	float error = setpoint - measurement;
 8004804:	ed97 7a02 	vldr	s14, [r7, #8]
 8004808:	edd7 7a01 	vldr	s15, [r7, #4]
 800480c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004810:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // Proportional term
    float P = pid->Kp * error;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	edd3 7a00 	vldr	s15, [r3]
 800481a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004822:	edc7 7a08 	vstr	s15, [r7, #32]
    // Integral term
    pid->integral += (pid->T / 2) * (error + pid->prev_error);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	ed93 7a06 	vldr	s14, [r3, #24]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004832:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8004836:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	ed93 6a04 	vldr	s12, [r3, #16]
 8004840:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004844:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800484c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	edc3 7a06 	vstr	s15, [r3, #24]
    // constrain integral output
    float I = CLIP(pid->Ki * pid->integral, pid->min_integral_limit, pid->max_integral_limit);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	ed93 7a01 	vldr	s14, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	edd3 7a08 	vldr	s15, [r3, #32]
 800486c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004874:	d503      	bpl.n	800487e <updatePID+0x8e>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	edd3 7a08 	vldr	s15, [r3, #32]
 800487c:	e01b      	b.n	80048b6 <updatePID+0xc6>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	ed93 7a01 	vldr	s14, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	edd3 7a06 	vldr	s15, [r3, #24]
 800488a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	dd03      	ble.n	80048a6 <updatePID+0xb6>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80048a4:	e007      	b.n	80048b6 <updatePID+0xc6>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
    // Derivative term
    float D = 2 * pid->Kd * (((setpoint - pid->prev_setpoint) / pid->T) - measurement_dot) - pid->prev_derivative;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80048c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80048ca:	edd7 6a02 	vldr	s13, [r7, #8]
 80048ce:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80048d8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80048dc:	edd7 7a00 	vldr	s15, [r7]
 80048e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80048ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f2:	edc7 7a06 	vstr	s15, [r7, #24]
    // Compute the control output, constrain output
    float output = CLIP(P + I + D, pid->min_output_limit, pid->max_output_limit);
 80048f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80048fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80048fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004902:	edd7 7a06 	vldr	s15, [r7, #24]
 8004906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d503      	bpl.n	8004922 <updatePID+0x132>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004920:	e01f      	b.n	8004962 <updatePID+0x172>
 8004922:	ed97 7a08 	vldr	s14, [r7, #32]
 8004926:	edd7 7a07 	vldr	s15, [r7, #28]
 800492a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800492e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800493c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004944:	dd03      	ble.n	800494e <updatePID+0x15e>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800494c:	e009      	b.n	8004962 <updatePID+0x172>
 800494e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004952:	edd7 7a07 	vldr	s15, [r7, #28]
 8004956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800495a:	edd7 7a06 	vldr	s15, [r7, #24]
 800495e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004962:	edc7 7a05 	vstr	s15, [r7, #20]
    // Save the current error for the next iteration, e[k-1]
    pid->prev_error = error;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496a:	611a      	str	r2, [r3, #16]
    // Save the current error for the next iteration,  D[k-1]
    pid->prev_derivative = D;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	61da      	str	r2, [r3, #28]

    return output;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	ee07 3a90 	vmov	s15, r3
}
 8004978:	eeb0 0a67 	vmov.f32	s0, s15
 800497c:	372c      	adds	r7, #44	@ 0x2c
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b0b2      	sub	sp, #200	@ 0xc8
 800498c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800498e:	f000 fd0b 	bl	80053a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004992:	f000 fa51 	bl	8004e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004996:	f000 fb81 	bl	800509c <MX_GPIO_Init>
  MX_I2C1_Init();
 800499a:	f000 fab7 	bl	8004f0c <MX_I2C1_Init>
  MX_TIM3_Init();
 800499e:	f000 fae3 	bl	8004f68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /*Initialize PWM motors and servos */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  /* Motor CW    */
 80049a2:	2100      	movs	r1, #0
 80049a4:	48d4      	ldr	r0, [pc, #848]	@ (8004cf8 <main+0x370>)
 80049a6:	f002 fd0f 	bl	80073c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  /* Motor CCW   */
 80049aa:	2104      	movs	r1, #4
 80049ac:	48d2      	ldr	r0, [pc, #840]	@ (8004cf8 <main+0x370>)
 80049ae:	f002 fd0b 	bl	80073c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  /* Servo Roll  */
 80049b2:	2108      	movs	r1, #8
 80049b4:	48d0      	ldr	r0, [pc, #832]	@ (8004cf8 <main+0x370>)
 80049b6:	f002 fd07 	bl	80073c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);  /* Servo Pitch */
 80049ba:	210c      	movs	r1, #12
 80049bc:	48ce      	ldr	r0, [pc, #824]	@ (8004cf8 <main+0x370>)
 80049be:	f002 fd03 	bl	80073c8 <HAL_TIM_PWM_Start>
 /*turn off motors and center servos */
  htim3.Instance->CCR1 = (uint32_t)DUTY_CYCLE_MOTOR_MIN; 	 /*  Channel 1 motor CW    */
 80049c2:	4bcd      	ldr	r3, [pc, #820]	@ (8004cf8 <main+0x370>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049ca:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2 = (uint32_t)DUTY_CYCLE_MOTOR_MIN;	 /*  Channel 2 motor CCW   */
 80049cc:	4bca      	ldr	r3, [pc, #808]	@ (8004cf8 <main+0x370>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049d4:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3 = (uint32_t)DUTY_CYCLE_SERVO_CENTER;	 /*  Channel 1 motor CW    */
 80049d6:	4bc8      	ldr	r3, [pc, #800]	@ (8004cf8 <main+0x370>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80049de:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4 = (uint32_t)DUTY_CYCLE_SERVO_CENTER;	 /*  Channel 2 motor CCW   */
 80049e0:	4bc5      	ldr	r3, [pc, #788]	@ (8004cf8 <main+0x370>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80049e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMP MPU initialize */
  DMP_Init();
 80049ea:	f7ff fc3b 	bl	8004264 <DMP_Init>
  // Wait 10s for calibration, don't move the IMU!
  Calubration_DMP();
 80049ee:	f7ff fdb1 	bl	8004554 <Calubration_DMP>
  float gx_offset, gy_offset, gz_offset;
  DMP_get_gyro_offsets(&gx_offset, &gy_offset, &gz_offset);
 80049f2:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80049f6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80049fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fe44 	bl	800468c <DMP_get_gyro_offsets>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PIDController pid_roll, pid_pitch, pid_yaw;
  /* PID ROLL */
  initializePID(&pid_roll,
 8004a04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a08:	eddf 3abc 	vldr	s7, [pc, #752]	@ 8004cfc <main+0x374>
 8004a0c:	ed9f 3abc 	vldr	s6, [pc, #752]	@ 8004d00 <main+0x378>
 8004a10:	eddf 2abc 	vldr	s5, [pc, #752]	@ 8004d04 <main+0x37c>
 8004a14:	ed9f 2abc 	vldr	s4, [pc, #752]	@ 8004d08 <main+0x380>
 8004a18:	eddf 1abc 	vldr	s3, [pc, #752]	@ 8004d0c <main+0x384>
 8004a1c:	ed9f 1abc 	vldr	s2, [pc, #752]	@ 8004d10 <main+0x388>
 8004a20:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8004d10 <main+0x388>
 8004a24:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fe9f 	bl	800476c <initializePID>
				  PID_LIM_MIN_INT_ROLL,
				  PID_LIM_MAX_INT_ROLL,
				  PID_LIM_MIN_ROLL,
				  PID_LIM_MAX_ROLL);
  /* PID PITCH */
  initializePID(&pid_pitch,
 8004a2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a32:	eddf 3ab2 	vldr	s7, [pc, #712]	@ 8004cfc <main+0x374>
 8004a36:	ed9f 3ab2 	vldr	s6, [pc, #712]	@ 8004d00 <main+0x378>
 8004a3a:	eddf 2ab2 	vldr	s5, [pc, #712]	@ 8004d04 <main+0x37c>
 8004a3e:	ed9f 2ab2 	vldr	s4, [pc, #712]	@ 8004d08 <main+0x380>
 8004a42:	eddf 1ab2 	vldr	s3, [pc, #712]	@ 8004d0c <main+0x384>
 8004a46:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 8004d10 <main+0x388>
 8004a4a:	eddf 0ab1 	vldr	s1, [pc, #708]	@ 8004d10 <main+0x388>
 8004a4e:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fe8a 	bl	800476c <initializePID>
  				  PID_LIM_MIN_INT_PITCH,
  				  PID_LIM_MAX_INT_PITCH,
  				  PID_LIM_MIN_PITCH,
  				  PID_LIM_MAX_PITCH);
  /* PID YAW */
  initializePID(&pid_yaw,
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	eddf 3aae 	vldr	s7, [pc, #696]	@ 8004d14 <main+0x38c>
 8004a5e:	ed9f 3aae 	vldr	s6, [pc, #696]	@ 8004d18 <main+0x390>
 8004a62:	eddf 2aae 	vldr	s5, [pc, #696]	@ 8004d1c <main+0x394>
 8004a66:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 8004d20 <main+0x398>
 8004a6a:	eddf 1aa8 	vldr	s3, [pc, #672]	@ 8004d0c <main+0x384>
 8004a6e:	ed9f 1aa8 	vldr	s2, [pc, #672]	@ 8004d10 <main+0x388>
 8004a72:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 8004d10 <main+0x388>
 8004a76:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fe76 	bl	800476c <initializePID>
				  PID_LIM_MIN_INT_YAW,
				  PID_LIM_MAX_INT_YAW,
				  PID_LIM_MIN_YAW,
				  PID_LIM_MAX_YAW);

  float setpoint_roll   =0;
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  float setpoint_pitch  =0;
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  float setpoint_yaw    =0;
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  float pid_roll_output  =0;
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  float pid_pitch_output =0;
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  float pid_yaw_output   =0;
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  float rate_roll, rate_pitch, rate_yaw;
  float thrust_radio=1000;
 8004ab0:	4b9c      	ldr	r3, [pc, #624]	@ (8004d24 <main+0x39c>)
 8004ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	loop_timer = HAL_GetTick();
 8004ab6:	f000 fcdd 	bl	8005474 <HAL_GetTick>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4a9a      	ldr	r2, [pc, #616]	@ (8004d28 <main+0x3a0>)
 8004abe:	6013      	str	r3, [r2, #0]
	Read_DMP();
 8004ac0:	f7ff fc02 	bl	80042c8 <Read_DMP>
	// get angle rates degrees / seconds
	rate_roll  = (((float)gyro[0]) - gx_offset) / LSB_Sensitivity;
 8004ac4:	4b99      	ldr	r3, [pc, #612]	@ (8004d2c <main+0x3a4>)
 8004ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ad2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ada:	ee17 0a90 	vmov	r0, s15
 8004ade:	f7fb fcdf 	bl	80004a0 <__aeabi_f2d>
 8004ae2:	a381      	add	r3, pc, #516	@ (adr r3, 8004ce8 <main+0x360>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fe5c 	bl	80007a4 <__aeabi_ddiv>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	f7fb ffe6 	bl	8000ac4 <__aeabi_d2f>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	rate_pitch = (((float)gyro[1]) - gy_offset) / LSB_Sensitivity;
 8004afe:	4b8b      	ldr	r3, [pc, #556]	@ (8004d2c <main+0x3a4>)
 8004b00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b0c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b14:	ee17 0a90 	vmov	r0, s15
 8004b18:	f7fb fcc2 	bl	80004a0 <__aeabi_f2d>
 8004b1c:	a372      	add	r3, pc, #456	@ (adr r3, 8004ce8 <main+0x360>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fe3f 	bl	80007a4 <__aeabi_ddiv>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f7fb ffc9 	bl	8000ac4 <__aeabi_d2f>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	rate_yaw   = (((float)gyro[2]) - gz_offset) / LSB_Sensitivity;
 8004b38:	4b7c      	ldr	r3, [pc, #496]	@ (8004d2c <main+0x3a4>)
 8004b3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b46:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4e:	ee17 0a90 	vmov	r0, s15
 8004b52:	f7fb fca5 	bl	80004a0 <__aeabi_f2d>
 8004b56:	a364      	add	r3, pc, #400	@ (adr r3, 8004ce8 <main+0x360>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f7fb fe22 	bl	80007a4 <__aeabi_ddiv>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	f7fb ffac 	bl	8000ac4 <__aeabi_d2f>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	pid_roll_output  = updatePID(&pid_roll, setpoint_roll, roll, rate_roll);
 8004b72:	4b6f      	ldr	r3, [pc, #444]	@ (8004d30 <main+0x3a8>)
 8004b74:	edd3 7a00 	vldr	s15, [r3]
 8004b78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b7c:	ed97 1a2a 	vldr	s2, [r7, #168]	@ 0xa8
 8004b80:	eef0 0a67 	vmov.f32	s1, s15
 8004b84:	ed97 0a31 	vldr	s0, [r7, #196]	@ 0xc4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fe31 	bl	80047f0 <updatePID>
 8004b8e:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
	pid_pitch_output = updatePID(&pid_pitch, setpoint_pitch, pitch, rate_pitch);
 8004b92:	4b68      	ldr	r3, [pc, #416]	@ (8004d34 <main+0x3ac>)
 8004b94:	edd3 7a00 	vldr	s15, [r3]
 8004b98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b9c:	ed97 1a29 	vldr	s2, [r7, #164]	@ 0xa4
 8004ba0:	eef0 0a67 	vmov.f32	s1, s15
 8004ba4:	ed97 0a30 	vldr	s0, [r7, #192]	@ 0xc0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fe21 	bl	80047f0 <updatePID>
 8004bae:	ed87 0a2d 	vstr	s0, [r7, #180]	@ 0xb4
	pid_yaw_output   = updatePID(&pid_yaw, setpoint_yaw, roll, rate_yaw);
 8004bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8004d30 <main+0x3a8>)
 8004bb4:	edd3 7a00 	vldr	s15, [r3]
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	ed97 1a28 	vldr	s2, [r7, #160]	@ 0xa0
 8004bbe:	eef0 0a67 	vmov.f32	s1, s15
 8004bc2:	ed97 0a2f 	vldr	s0, [r7, #188]	@ 0xbc
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fe12 	bl	80047f0 <updatePID>
 8004bcc:	ed87 0a2c 	vstr	s0, [r7, #176]	@ 0xb0
	/* set PWM Duty cycle */
	htim3.Instance->CCR1 = (uint32_t)CLIP(thrust_radio + pid_yaw_output, 1200, 2000);	/* Channel 1 motor CW    */
 8004bd0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004bd4:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bdc:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8004d38 <main+0x3b0>
 8004be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	d502      	bpl.n	8004bf0 <main+0x268>
 8004bea:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8004bee:	e019      	b.n	8004c24 <main+0x29c>
 8004bf0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004bf4:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bfc:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8004d3c <main+0x3b4>
 8004c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c08:	dd02      	ble.n	8004c10 <main+0x288>
 8004c0a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004c0e:	e009      	b.n	8004c24 <main+0x29c>
 8004c10:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004c14:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c20:	ee17 3a90 	vmov	r3, s15
 8004c24:	4a34      	ldr	r2, [pc, #208]	@ (8004cf8 <main+0x370>)
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	6353      	str	r3, [r2, #52]	@ 0x34
	htim3.Instance->CCR2 = (uint32_t)CLIP(thrust_radio - pid_yaw_output, 1200, 2000);	/* Channel 2 motor CCW   */
 8004c2a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004c2e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c36:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8004d38 <main+0x3b0>
 8004c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	d502      	bpl.n	8004c4a <main+0x2c2>
 8004c44:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8004c48:	e019      	b.n	8004c7e <main+0x2f6>
 8004c4a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004c4e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c56:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8004d3c <main+0x3b4>
 8004c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	dd02      	ble.n	8004c6a <main+0x2e2>
 8004c64:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004c68:	e009      	b.n	8004c7e <main+0x2f6>
 8004c6a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004c6e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7a:	ee17 3a90 	vmov	r3, s15
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <main+0x370>)
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	6393      	str	r3, [r2, #56]	@ 0x38
	htim3.Instance->CCR3 = (uint32_t)CLIP(1500.0  + pid_roll_output, 500, 2000);	  	/* Channel 3 serve roll  */
 8004c84:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8004c88:	f7fb fc0a 	bl	80004a0 <__aeabi_f2d>
 8004c8c:	a318      	add	r3, pc, #96	@ (adr r3, 8004cf0 <main+0x368>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb faa7 	bl	80001e4 <__adddf3>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	4b27      	ldr	r3, [pc, #156]	@ (8004d40 <main+0x3b8>)
 8004ca4:	f7fb fec6 	bl	8000a34 <__aeabi_dcmplt>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <main+0x32c>
 8004cae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004cb2:	e059      	b.n	8004d68 <main+0x3e0>
 8004cb4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8004cb8:	f7fb fbf2 	bl	80004a0 <__aeabi_f2d>
 8004cbc:	a30c      	add	r3, pc, #48	@ (adr r3, 8004cf0 <main+0x368>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fa8f 	bl	80001e4 <__adddf3>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d44 <main+0x3bc>)
 8004cd4:	f7fb fecc 	bl	8000a70 <__aeabi_dcmpgt>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d034      	beq.n	8004d48 <main+0x3c0>
 8004cde:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004ce2:	e041      	b.n	8004d68 <main+0x3e0>
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	66666666 	.word	0x66666666
 8004cec:	40306666 	.word	0x40306666
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	40977000 	.word	0x40977000
 8004cf8:	2000015c 	.word	0x2000015c
 8004cfc:	43480000 	.word	0x43480000
 8004d00:	c3480000 	.word	0xc3480000
 8004d04:	42480000 	.word	0x42480000
 8004d08:	c2480000 	.word	0xc2480000
 8004d0c:	3ba3d70a 	.word	0x3ba3d70a
 8004d10:	00000000 	.word	0x00000000
 8004d14:	43c80000 	.word	0x43c80000
 8004d18:	c3c80000 	.word	0xc3c80000
 8004d1c:	42c80000 	.word	0x42c80000
 8004d20:	c2c80000 	.word	0xc2c80000
 8004d24:	447a0000 	.word	0x447a0000
 8004d28:	200001a4 	.word	0x200001a4
 8004d2c:	200000c4 	.word	0x200000c4
 8004d30:	200000e4 	.word	0x200000e4
 8004d34:	200000e0 	.word	0x200000e0
 8004d38:	44960000 	.word	0x44960000
 8004d3c:	44fa0000 	.word	0x44fa0000
 8004d40:	407f4000 	.word	0x407f4000
 8004d44:	409f4000 	.word	0x409f4000
 8004d48:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8004d4c:	f7fb fba8 	bl	80004a0 <__aeabi_f2d>
 8004d50:	a333      	add	r3, pc, #204	@ (adr r3, 8004e20 <main+0x498>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fa45 	bl	80001e4 <__adddf3>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fb fe8f 	bl	8000a84 <__aeabi_d2uiz>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4a2f      	ldr	r2, [pc, #188]	@ (8004e28 <main+0x4a0>)
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	htim3.Instance->CCR4 = (uint32_t)CLIP(1500.0  + pid_pitch_output,500, 2000);    	/* Channel 4 serve pitch */
 8004d6e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8004d72:	f7fb fb95 	bl	80004a0 <__aeabi_f2d>
 8004d76:	a32a      	add	r3, pc, #168	@ (adr r3, 8004e20 <main+0x498>)
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f7fb fa32 	bl	80001e4 <__adddf3>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	4b27      	ldr	r3, [pc, #156]	@ (8004e2c <main+0x4a4>)
 8004d8e:	f7fb fe51 	bl	8000a34 <__aeabi_dcmplt>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <main+0x416>
 8004d98:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004d9c:	e027      	b.n	8004dee <main+0x466>
 8004d9e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8004da2:	f7fb fb7d 	bl	80004a0 <__aeabi_f2d>
 8004da6:	a31e      	add	r3, pc, #120	@ (adr r3, 8004e20 <main+0x498>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fa1a 	bl	80001e4 <__adddf3>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e30 <main+0x4a8>)
 8004dbe:	f7fb fe57 	bl	8000a70 <__aeabi_dcmpgt>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <main+0x446>
 8004dc8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004dcc:	e00f      	b.n	8004dee <main+0x466>
 8004dce:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8004dd2:	f7fb fb65 	bl	80004a0 <__aeabi_f2d>
 8004dd6:	a312      	add	r3, pc, #72	@ (adr r3, 8004e20 <main+0x498>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fa02 	bl	80001e4 <__adddf3>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	f7fb fe4c 	bl	8000a84 <__aeabi_d2uiz>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4a0e      	ldr	r2, [pc, #56]	@ (8004e28 <main+0x4a0>)
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	6413      	str	r3, [r2, #64]	@ 0x40

	//integrate the pitch, roll, yaw angle every 5 milliseconds.
	while (HAL_GetTick() - loop_timer < sec2milliseconds(SAMPLE_TIME_S));
 8004df4:	bf00      	nop
 8004df6:	f000 fb3d 	bl	8005474 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <main+0x4ac>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e16:	d4ee      	bmi.n	8004df6 <main+0x46e>
	loop_timer = HAL_GetTick();
 8004e18:	e64d      	b.n	8004ab6 <main+0x12e>
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w
 8004e20:	00000000 	.word	0x00000000
 8004e24:	40977000 	.word	0x40977000
 8004e28:	2000015c 	.word	0x2000015c
 8004e2c:	407f4000 	.word	0x407f4000
 8004e30:	409f4000 	.word	0x409f4000
 8004e34:	200001a4 	.word	0x200001a4

08004e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b094      	sub	sp, #80	@ 0x50
 8004e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e3e:	f107 0320 	add.w	r3, r7, #32
 8004e42:	2230      	movs	r2, #48	@ 0x30
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f003 f84e 	bl	8007ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e4c:	f107 030c 	add.w	r3, r7, #12
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	60da      	str	r2, [r3, #12]
 8004e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	4b28      	ldr	r3, [pc, #160]	@ (8004f04 <SystemClock_Config+0xcc>)
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	4a27      	ldr	r2, [pc, #156]	@ (8004f04 <SystemClock_Config+0xcc>)
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e6c:	4b25      	ldr	r3, [pc, #148]	@ (8004f04 <SystemClock_Config+0xcc>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e78:	2300      	movs	r3, #0
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	4b22      	ldr	r3, [pc, #136]	@ (8004f08 <SystemClock_Config+0xd0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004e84:	4a20      	ldr	r2, [pc, #128]	@ (8004f08 <SystemClock_Config+0xd0>)
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f08 <SystemClock_Config+0xd0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004eac:	2308      	movs	r3, #8
 8004eae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004eb0:	2354      	movs	r3, #84	@ 0x54
 8004eb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004eb8:	2304      	movs	r3, #4
 8004eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ebc:	f107 0320 	add.w	r3, r7, #32
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fd95 	bl	80069f0 <HAL_RCC_OscConfig>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004ecc:	f000 f90e 	bl	80050ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ed0:	230f      	movs	r3, #15
 8004ed2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	2102      	movs	r1, #2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fff7 	bl	8006ee0 <HAL_RCC_ClockConfig>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004ef8:	f000 f8f8 	bl	80050ec <Error_Handler>
  }
}
 8004efc:	bf00      	nop
 8004efe:	3750      	adds	r7, #80	@ 0x50
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40007000 	.word	0x40007000

08004f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004f10:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f12:	4a13      	ldr	r2, [pc, #76]	@ (8004f60 <MX_I2C1_Init+0x54>)
 8004f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004f16:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f18:	4a12      	ldr	r2, [pc, #72]	@ (8004f64 <MX_I2C1_Init+0x58>)
 8004f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004f22:	4b0e      	ldr	r3, [pc, #56]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f28:	4b0c      	ldr	r3, [pc, #48]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f30:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004f36:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f3c:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f48:	4804      	ldr	r0, [pc, #16]	@ (8004f5c <MX_I2C1_Init+0x50>)
 8004f4a:	f000 fd2d 	bl	80059a8 <HAL_I2C_Init>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004f54:	f000 f8ca 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000108 	.word	0x20000108
 8004f60:	40005400 	.word	0x40005400
 8004f64:	00061a80 	.word	0x00061a80

08004f68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08e      	sub	sp, #56	@ 0x38
 8004f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	609a      	str	r2, [r3, #8]
 8004f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f7c:	f107 0320 	add.w	r3, r7, #32
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	611a      	str	r2, [r3, #16]
 8004f94:	615a      	str	r2, [r3, #20]
 8004f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f98:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005098 <MX_TIM3_Init+0x130>)
 8004f9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8004f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fa0:	2253      	movs	r2, #83	@ 0x53
 8004fa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999 ;
 8004faa:	4b3a      	ldr	r3, [pc, #232]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fac:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8004fb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fb2:	4b38      	ldr	r3, [pc, #224]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fb8:	4b36      	ldr	r3, [pc, #216]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fba:	2280      	movs	r2, #128	@ 0x80
 8004fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004fbe:	4835      	ldr	r0, [pc, #212]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fc0:	f002 f95a 	bl	8007278 <HAL_TIM_Base_Init>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004fca:	f000 f88f 	bl	80050ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004fd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004fd8:	4619      	mov	r1, r3
 8004fda:	482e      	ldr	r0, [pc, #184]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fdc:	f002 fb66 	bl	80076ac <HAL_TIM_ConfigClockSource>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004fe6:	f000 f881 	bl	80050ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004fea:	482a      	ldr	r0, [pc, #168]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8004fec:	f002 f993 	bl	8007316 <HAL_TIM_PWM_Init>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004ff6:	f000 f879 	bl	80050ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005002:	f107 0320 	add.w	r3, r7, #32
 8005006:	4619      	mov	r1, r3
 8005008:	4822      	ldr	r0, [pc, #136]	@ (8005094 <MX_TIM3_Init+0x12c>)
 800500a:	f002 feef 	bl	8007dec <HAL_TIMEx_MasterConfigSynchronization>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005014:	f000 f86a 	bl	80050ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005018:	2360      	movs	r3, #96	@ 0x60
 800501a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800501c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005020:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	2200      	movs	r2, #0
 800502e:	4619      	mov	r1, r3
 8005030:	4818      	ldr	r0, [pc, #96]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8005032:	f002 fa79 	bl	8007528 <HAL_TIM_PWM_ConfigChannel>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800503c:	f000 f856 	bl	80050ec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	2204      	movs	r2, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4812      	ldr	r0, [pc, #72]	@ (8005094 <MX_TIM3_Init+0x12c>)
 800504c:	f002 fa6c 	bl	8007528 <HAL_TIM_PWM_ConfigChannel>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8005056:	f000 f849 	bl	80050ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	2208      	movs	r2, #8
 800505e:	4619      	mov	r1, r3
 8005060:	480c      	ldr	r0, [pc, #48]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8005062:	f002 fa61 	bl	8007528 <HAL_TIM_PWM_ConfigChannel>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 800506c:	f000 f83e 	bl	80050ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005070:	1d3b      	adds	r3, r7, #4
 8005072:	220c      	movs	r2, #12
 8005074:	4619      	mov	r1, r3
 8005076:	4807      	ldr	r0, [pc, #28]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8005078:	f002 fa56 	bl	8007528 <HAL_TIM_PWM_ConfigChannel>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8005082:	f000 f833 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005086:	4803      	ldr	r0, [pc, #12]	@ (8005094 <MX_TIM3_Init+0x12c>)
 8005088:	f000 f8c8 	bl	800521c <HAL_TIM_MspPostInit>

}
 800508c:	bf00      	nop
 800508e:	3738      	adds	r7, #56	@ 0x38
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2000015c 	.word	0x2000015c
 8005098:	40000400 	.word	0x40000400

0800509c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <MX_GPIO_Init+0x4c>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050aa:	4a0f      	ldr	r2, [pc, #60]	@ (80050e8 <MX_GPIO_Init+0x4c>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050b2:	4b0d      	ldr	r3, [pc, #52]	@ (80050e8 <MX_GPIO_Init+0x4c>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4b09      	ldr	r3, [pc, #36]	@ (80050e8 <MX_GPIO_Init+0x4c>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	4a08      	ldr	r2, [pc, #32]	@ (80050e8 <MX_GPIO_Init+0x4c>)
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ce:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <MX_GPIO_Init+0x4c>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800

080050ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050f0:	b672      	cpsid	i
}
 80050f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <Error_Handler+0x8>

080050f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <HAL_MspInit+0x4c>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	4a0f      	ldr	r2, [pc, #60]	@ (8005144 <HAL_MspInit+0x4c>)
 8005108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800510c:	6453      	str	r3, [r2, #68]	@ 0x44
 800510e:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <HAL_MspInit+0x4c>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4b09      	ldr	r3, [pc, #36]	@ (8005144 <HAL_MspInit+0x4c>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	4a08      	ldr	r2, [pc, #32]	@ (8005144 <HAL_MspInit+0x4c>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005128:	6413      	str	r3, [r2, #64]	@ 0x40
 800512a:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_MspInit+0x4c>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800

08005148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	@ 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_I2C_MspInit+0x84>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d12b      	bne.n	80051c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	4b18      	ldr	r3, [pc, #96]	@ (80051d0 <HAL_I2C_MspInit+0x88>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <HAL_I2C_MspInit+0x88>)
 8005174:	f043 0302 	orr.w	r3, r3, #2
 8005178:	6313      	str	r3, [r2, #48]	@ 0x30
 800517a:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <HAL_I2C_MspInit+0x88>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005186:	23c0      	movs	r3, #192	@ 0xc0
 8005188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800518a:	2312      	movs	r3, #18
 800518c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005192:	2303      	movs	r3, #3
 8005194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005196:	2304      	movs	r3, #4
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	4619      	mov	r1, r3
 80051a0:	480c      	ldr	r0, [pc, #48]	@ (80051d4 <HAL_I2C_MspInit+0x8c>)
 80051a2:	f000 fa7d 	bl	80056a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_I2C_MspInit+0x88>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	4a08      	ldr	r2, [pc, #32]	@ (80051d0 <HAL_I2C_MspInit+0x88>)
 80051b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051b6:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <HAL_I2C_MspInit+0x88>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051c2:	bf00      	nop
 80051c4:	3728      	adds	r7, #40	@ 0x28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40005400 	.word	0x40005400
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40020400 	.word	0x40020400

080051d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005214 <HAL_TIM_Base_MspInit+0x3c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10d      	bne.n	8005206 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <HAL_TIM_Base_MspInit+0x40>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	4a09      	ldr	r2, [pc, #36]	@ (8005218 <HAL_TIM_Base_MspInit+0x40>)
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <HAL_TIM_Base_MspInit+0x40>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40000400 	.word	0x40000400
 8005218:	40023800 	.word	0x40023800

0800521c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	60da      	str	r2, [r3, #12]
 8005232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a21      	ldr	r2, [pc, #132]	@ (80052c0 <HAL_TIM_MspPostInit+0xa4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d13b      	bne.n	80052b6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	4b20      	ldr	r3, [pc, #128]	@ (80052c4 <HAL_TIM_MspPostInit+0xa8>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_TIM_MspPostInit+0xa8>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	6313      	str	r3, [r2, #48]	@ 0x30
 800524e:	4b1d      	ldr	r3, [pc, #116]	@ (80052c4 <HAL_TIM_MspPostInit+0xa8>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	4b19      	ldr	r3, [pc, #100]	@ (80052c4 <HAL_TIM_MspPostInit+0xa8>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	4a18      	ldr	r2, [pc, #96]	@ (80052c4 <HAL_TIM_MspPostInit+0xa8>)
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	6313      	str	r3, [r2, #48]	@ 0x30
 800526a:	4b16      	ldr	r3, [pc, #88]	@ (80052c4 <HAL_TIM_MspPostInit+0xa8>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005276:	23c0      	movs	r3, #192	@ 0xc0
 8005278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527a:	2302      	movs	r3, #2
 800527c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005282:	2300      	movs	r3, #0
 8005284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005286:	2302      	movs	r3, #2
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800528a:	f107 0314 	add.w	r3, r7, #20
 800528e:	4619      	mov	r1, r3
 8005290:	480d      	ldr	r0, [pc, #52]	@ (80052c8 <HAL_TIM_MspPostInit+0xac>)
 8005292:	f000 fa05 	bl	80056a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005296:	2303      	movs	r3, #3
 8005298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529a:	2302      	movs	r3, #2
 800529c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052a6:	2302      	movs	r3, #2
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052aa:	f107 0314 	add.w	r3, r7, #20
 80052ae:	4619      	mov	r1, r3
 80052b0:	4806      	ldr	r0, [pc, #24]	@ (80052cc <HAL_TIM_MspPostInit+0xb0>)
 80052b2:	f000 f9f5 	bl	80056a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80052b6:	bf00      	nop
 80052b8:	3728      	adds	r7, #40	@ 0x28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40020000 	.word	0x40020000
 80052cc:	40020400 	.word	0x40020400

080052d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <NMI_Handler+0x4>

080052d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <HardFault_Handler+0x4>

080052e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <MemManage_Handler+0x4>

080052e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <BusFault_Handler+0x4>

080052f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <UsageFault_Handler+0x4>

080052f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052fc:	bf00      	nop
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005326:	f000 f891 	bl	800544c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005334:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <SystemInit+0x20>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533a:	4a05      	ldr	r2, [pc, #20]	@ (8005350 <SystemInit+0x20>)
 800533c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005340:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800538c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005358:	f7ff ffea 	bl	8005330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800535c:	480c      	ldr	r0, [pc, #48]	@ (8005390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800535e:	490d      	ldr	r1, [pc, #52]	@ (8005394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005360:	4a0d      	ldr	r2, [pc, #52]	@ (8005398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005364:	e002      	b.n	800536c <LoopCopyDataInit>

08005366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800536a:	3304      	adds	r3, #4

0800536c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800536c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800536e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005370:	d3f9      	bcc.n	8005366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005374:	4c0a      	ldr	r4, [pc, #40]	@ (80053a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005378:	e001      	b.n	800537e <LoopFillZerobss>

0800537a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800537a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800537c:	3204      	adds	r2, #4

0800537e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800537e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005380:	d3fb      	bcc.n	800537a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005382:	f002 fdbf 	bl	8007f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005386:	f7ff faff 	bl	8004988 <main>
  bx  lr    
 800538a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800538c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005394:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8005398:	08009194 	.word	0x08009194
  ldr r2, =_sbss
 800539c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80053a0:	200002e4 	.word	0x200002e4

080053a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053a4:	e7fe      	b.n	80053a4 <ADC_IRQHandler>
	...

080053a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053ac:	4b0e      	ldr	r3, [pc, #56]	@ (80053e8 <HAL_Init+0x40>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0d      	ldr	r2, [pc, #52]	@ (80053e8 <HAL_Init+0x40>)
 80053b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_Init+0x40>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a0a      	ldr	r2, [pc, #40]	@ (80053e8 <HAL_Init+0x40>)
 80053be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053c4:	4b08      	ldr	r3, [pc, #32]	@ (80053e8 <HAL_Init+0x40>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a07      	ldr	r2, [pc, #28]	@ (80053e8 <HAL_Init+0x40>)
 80053ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053d0:	2003      	movs	r0, #3
 80053d2:	f000 f931 	bl	8005638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053d6:	200f      	movs	r0, #15
 80053d8:	f000 f808 	bl	80053ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053dc:	f7ff fe8c 	bl	80050f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00

080053ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053f4:	4b12      	ldr	r3, [pc, #72]	@ (8005440 <HAL_InitTick+0x54>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <HAL_InitTick+0x58>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	4619      	mov	r1, r3
 80053fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005402:	fbb3 f3f1 	udiv	r3, r3, r1
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f93b 	bl	8005686 <HAL_SYSTICK_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e00e      	b.n	8005438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b0f      	cmp	r3, #15
 800541e:	d80a      	bhi.n	8005436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005420:	2200      	movs	r2, #0
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	f000 f911 	bl	800564e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800542c:	4a06      	ldr	r2, [pc, #24]	@ (8005448 <HAL_InitTick+0x5c>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	2000003c 	.word	0x2000003c
 8005444:	20000044 	.word	0x20000044
 8005448:	20000040 	.word	0x20000040

0800544c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005450:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_IncTick+0x20>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_IncTick+0x24>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4413      	add	r3, r2
 800545c:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <HAL_IncTick+0x24>)
 800545e:	6013      	str	r3, [r2, #0]
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000044 	.word	0x20000044
 8005470:	200001a8 	.word	0x200001a8

08005474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return uwTick;
 8005478:	4b03      	ldr	r3, [pc, #12]	@ (8005488 <HAL_GetTick+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	200001a8 	.word	0x200001a8

0800548c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005494:	f7ff ffee 	bl	8005474 <HAL_GetTick>
 8005498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d005      	beq.n	80054b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <HAL_Delay+0x44>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054b2:	bf00      	nop
 80054b4:	f7ff ffde 	bl	8005474 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d8f7      	bhi.n	80054b4 <HAL_Delay+0x28>
  {
  }
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000044 	.word	0x20000044

080054d4 <__NVIC_SetPriorityGrouping>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <__NVIC_SetPriorityGrouping+0x44>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005506:	4a04      	ldr	r2, [pc, #16]	@ (8005518 <__NVIC_SetPriorityGrouping+0x44>)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	60d3      	str	r3, [r2, #12]
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	e000ed00 	.word	0xe000ed00

0800551c <__NVIC_GetPriorityGrouping>:
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005520:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <__NVIC_GetPriorityGrouping+0x18>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	f003 0307 	and.w	r3, r3, #7
}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	e000ed00 	.word	0xe000ed00

08005538 <__NVIC_SetPriority>:
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	6039      	str	r1, [r7, #0]
 8005542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005548:	2b00      	cmp	r3, #0
 800554a:	db0a      	blt.n	8005562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	490c      	ldr	r1, [pc, #48]	@ (8005584 <__NVIC_SetPriority+0x4c>)
 8005552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005556:	0112      	lsls	r2, r2, #4
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	440b      	add	r3, r1
 800555c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005560:	e00a      	b.n	8005578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4908      	ldr	r1, [pc, #32]	@ (8005588 <__NVIC_SetPriority+0x50>)
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	3b04      	subs	r3, #4
 8005570:	0112      	lsls	r2, r2, #4
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	440b      	add	r3, r1
 8005576:	761a      	strb	r2, [r3, #24]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	e000e100 	.word	0xe000e100
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <NVIC_EncodePriority>:
{
 800558c:	b480      	push	{r7}
 800558e:	b089      	sub	sp, #36	@ 0x24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f1c3 0307 	rsb	r3, r3, #7
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	bf28      	it	cs
 80055aa:	2304      	movcs	r3, #4
 80055ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3304      	adds	r3, #4
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d902      	bls.n	80055bc <NVIC_EncodePriority+0x30>
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3b03      	subs	r3, #3
 80055ba:	e000      	b.n	80055be <NVIC_EncodePriority+0x32>
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43da      	mvns	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	401a      	ands	r2, r3
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055d4:	f04f 31ff 	mov.w	r1, #4294967295
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	fa01 f303 	lsl.w	r3, r1, r3
 80055de:	43d9      	mvns	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e4:	4313      	orrs	r3, r2
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3724      	adds	r7, #36	@ 0x24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005604:	d301      	bcc.n	800560a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005606:	2301      	movs	r3, #1
 8005608:	e00f      	b.n	800562a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800560a:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <SysTick_Config+0x40>)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3b01      	subs	r3, #1
 8005610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005612:	210f      	movs	r1, #15
 8005614:	f04f 30ff 	mov.w	r0, #4294967295
 8005618:	f7ff ff8e 	bl	8005538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <SysTick_Config+0x40>)
 800561e:	2200      	movs	r2, #0
 8005620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005622:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <SysTick_Config+0x40>)
 8005624:	2207      	movs	r2, #7
 8005626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	e000e010 	.word	0xe000e010

08005638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ff47 	bl	80054d4 <__NVIC_SetPriorityGrouping>
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	4603      	mov	r3, r0
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005660:	f7ff ff5c 	bl	800551c <__NVIC_GetPriorityGrouping>
 8005664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff ff8e 	bl	800558c <NVIC_EncodePriority>
 8005670:	4602      	mov	r2, r0
 8005672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff ff5d 	bl	8005538 <__NVIC_SetPriority>
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ffb0 	bl	80055f4 <SysTick_Config>
 8005694:	4603      	mov	r3, r0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	@ 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e159      	b.n	8005970 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056bc:	2201      	movs	r2, #1
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	f040 8148 	bne.w	800596a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d005      	beq.n	80056f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d130      	bne.n	8005754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	2203      	movs	r2, #3
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005728:	2201      	movs	r2, #1
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 0201 	and.w	r2, r3, #1
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b03      	cmp	r3, #3
 800575e:	d017      	beq.n	8005790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	2203      	movs	r2, #3
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d123      	bne.n	80057e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	08da      	lsrs	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3208      	adds	r2, #8
 80057a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	220f      	movs	r2, #15
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3208      	adds	r2, #8
 80057de:	69b9      	ldr	r1, [r7, #24]
 80057e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	2203      	movs	r2, #3
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0203 	and.w	r2, r3, #3
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80a2 	beq.w	800596a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	4b57      	ldr	r3, [pc, #348]	@ (8005988 <HAL_GPIO_Init+0x2e8>)
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	4a56      	ldr	r2, [pc, #344]	@ (8005988 <HAL_GPIO_Init+0x2e8>)
 8005830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005834:	6453      	str	r3, [r2, #68]	@ 0x44
 8005836:	4b54      	ldr	r3, [pc, #336]	@ (8005988 <HAL_GPIO_Init+0x2e8>)
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005842:	4a52      	ldr	r2, [pc, #328]	@ (800598c <HAL_GPIO_Init+0x2ec>)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	3302      	adds	r3, #2
 800584a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	220f      	movs	r2, #15
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4013      	ands	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a49      	ldr	r2, [pc, #292]	@ (8005990 <HAL_GPIO_Init+0x2f0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d019      	beq.n	80058a2 <HAL_GPIO_Init+0x202>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a48      	ldr	r2, [pc, #288]	@ (8005994 <HAL_GPIO_Init+0x2f4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_GPIO_Init+0x1fe>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a47      	ldr	r2, [pc, #284]	@ (8005998 <HAL_GPIO_Init+0x2f8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00d      	beq.n	800589a <HAL_GPIO_Init+0x1fa>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a46      	ldr	r2, [pc, #280]	@ (800599c <HAL_GPIO_Init+0x2fc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <HAL_GPIO_Init+0x1f6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a45      	ldr	r2, [pc, #276]	@ (80059a0 <HAL_GPIO_Init+0x300>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <HAL_GPIO_Init+0x1f2>
 800588e:	2304      	movs	r3, #4
 8005890:	e008      	b.n	80058a4 <HAL_GPIO_Init+0x204>
 8005892:	2307      	movs	r3, #7
 8005894:	e006      	b.n	80058a4 <HAL_GPIO_Init+0x204>
 8005896:	2303      	movs	r3, #3
 8005898:	e004      	b.n	80058a4 <HAL_GPIO_Init+0x204>
 800589a:	2302      	movs	r3, #2
 800589c:	e002      	b.n	80058a4 <HAL_GPIO_Init+0x204>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_GPIO_Init+0x204>
 80058a2:	2300      	movs	r3, #0
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	f002 0203 	and.w	r2, r2, #3
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	4093      	lsls	r3, r2
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058b4:	4935      	ldr	r1, [pc, #212]	@ (800598c <HAL_GPIO_Init+0x2ec>)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	3302      	adds	r3, #2
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058c2:	4b38      	ldr	r3, [pc, #224]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4013      	ands	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058e6:	4a2f      	ldr	r2, [pc, #188]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058ec:	4b2d      	ldr	r3, [pc, #180]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005910:	4a24      	ldr	r2, [pc, #144]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005916:	4b23      	ldr	r3, [pc, #140]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800593a:	4a1a      	ldr	r2, [pc, #104]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005940:	4b18      	ldr	r3, [pc, #96]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005964:	4a0f      	ldr	r2, [pc, #60]	@ (80059a4 <HAL_GPIO_Init+0x304>)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	f67f aea2 	bls.w	80056bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	3724      	adds	r7, #36	@ 0x24
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800
 800598c:	40013800 	.word	0x40013800
 8005990:	40020000 	.word	0x40020000
 8005994:	40020400 	.word	0x40020400
 8005998:	40020800 	.word	0x40020800
 800599c:	40020c00 	.word	0x40020c00
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40013c00 	.word	0x40013c00

080059a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e12b      	b.n	8005c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fbba 	bl	8005148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2224      	movs	r2, #36	@ 0x24
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f001 fc20 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 8005a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4a81      	ldr	r2, [pc, #516]	@ (8005c1c <HAL_I2C_Init+0x274>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d807      	bhi.n	8005a2c <HAL_I2C_Init+0x84>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a80      	ldr	r2, [pc, #512]	@ (8005c20 <HAL_I2C_Init+0x278>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	bf94      	ite	ls
 8005a24:	2301      	movls	r3, #1
 8005a26:	2300      	movhi	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e006      	b.n	8005a3a <HAL_I2C_Init+0x92>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c24 <HAL_I2C_Init+0x27c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bf94      	ite	ls
 8005a34:	2301      	movls	r3, #1
 8005a36:	2300      	movhi	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0e7      	b.n	8005c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a78      	ldr	r2, [pc, #480]	@ (8005c28 <HAL_I2C_Init+0x280>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	0c9b      	lsrs	r3, r3, #18
 8005a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4a6a      	ldr	r2, [pc, #424]	@ (8005c1c <HAL_I2C_Init+0x274>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d802      	bhi.n	8005a7c <HAL_I2C_Init+0xd4>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	e009      	b.n	8005a90 <HAL_I2C_Init+0xe8>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	4a69      	ldr	r2, [pc, #420]	@ (8005c2c <HAL_I2C_Init+0x284>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	099b      	lsrs	r3, r3, #6
 8005a8e:	3301      	adds	r3, #1
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005aa2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	495c      	ldr	r1, [pc, #368]	@ (8005c1c <HAL_I2C_Init+0x274>)
 8005aac:	428b      	cmp	r3, r1
 8005aae:	d819      	bhi.n	8005ae4 <HAL_I2C_Init+0x13c>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1e59      	subs	r1, r3, #1
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ac4:	400b      	ands	r3, r1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_I2C_Init+0x138>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1e59      	subs	r1, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ad8:	3301      	adds	r3, #1
 8005ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ade:	e051      	b.n	8005b84 <HAL_I2C_Init+0x1dc>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	e04f      	b.n	8005b84 <HAL_I2C_Init+0x1dc>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d111      	bne.n	8005b10 <HAL_I2C_Init+0x168>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1e58      	subs	r0, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6859      	ldr	r1, [r3, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	440b      	add	r3, r1
 8005afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005afe:	3301      	adds	r3, #1
 8005b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	e012      	b.n	8005b36 <HAL_I2C_Init+0x18e>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1e58      	subs	r0, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6859      	ldr	r1, [r3, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	0099      	lsls	r1, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b26:	3301      	adds	r3, #1
 8005b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_I2C_Init+0x196>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e022      	b.n	8005b84 <HAL_I2C_Init+0x1dc>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10e      	bne.n	8005b64 <HAL_I2C_Init+0x1bc>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1e58      	subs	r0, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6859      	ldr	r1, [r3, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	440b      	add	r3, r1
 8005b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b62:	e00f      	b.n	8005b84 <HAL_I2C_Init+0x1dc>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1e58      	subs	r0, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6859      	ldr	r1, [r3, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	0099      	lsls	r1, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	6809      	ldr	r1, [r1, #0]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69da      	ldr	r2, [r3, #28]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005bb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6911      	ldr	r1, [r2, #16]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68d2      	ldr	r2, [r2, #12]
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	000186a0 	.word	0x000186a0
 8005c20:	001e847f 	.word	0x001e847f
 8005c24:	003d08ff 	.word	0x003d08ff
 8005c28:	431bde83 	.word	0x431bde83
 8005c2c:	10624dd3 	.word	0x10624dd3

08005c30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	4608      	mov	r0, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	817b      	strh	r3, [r7, #10]
 8005c42:	460b      	mov	r3, r1
 8005c44:	813b      	strh	r3, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c4a:	f7ff fc13 	bl	8005474 <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	f040 80d9 	bne.w	8005e10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	2319      	movs	r3, #25
 8005c64:	2201      	movs	r2, #1
 8005c66:	496d      	ldr	r1, [pc, #436]	@ (8005e1c <HAL_I2C_Mem_Write+0x1ec>)
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fc8b 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	e0cc      	b.n	8005e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_I2C_Mem_Write+0x56>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e0c5      	b.n	8005e12 <HAL_I2C_Mem_Write+0x1e2>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d007      	beq.n	8005cac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2221      	movs	r2, #33	@ 0x21
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2240      	movs	r2, #64	@ 0x40
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a3a      	ldr	r2, [r7, #32]
 8005cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a4d      	ldr	r2, [pc, #308]	@ (8005e20 <HAL_I2C_Mem_Write+0x1f0>)
 8005cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cee:	88f8      	ldrh	r0, [r7, #6]
 8005cf0:	893a      	ldrh	r2, [r7, #8]
 8005cf2:	8979      	ldrh	r1, [r7, #10]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fac2 	bl	8006288 <I2C_RequestMemoryWrite>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d052      	beq.n	8005db0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e081      	b.n	8005e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fd50 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e06b      	b.n	8005e12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	781a      	ldrb	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d11b      	bne.n	8005db0 <HAL_I2C_Mem_Write+0x180>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d017      	beq.n	8005db0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1aa      	bne.n	8005d0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fd43 	bl	8006848 <I2C_WaitOnBTFFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00d      	beq.n	8005de4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d107      	bne.n	8005de0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e016      	b.n	8005e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e000      	b.n	8005e12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e10:	2302      	movs	r3, #2
  }
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	00100002 	.word	0x00100002
 8005e20:	ffff0000 	.word	0xffff0000

08005e24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	@ 0x30
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	460b      	mov	r3, r1
 8005e38:	813b      	strh	r3, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e3e:	f7ff fb19 	bl	8005474 <HAL_GetTick>
 8005e42:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	f040 8214 	bne.w	800627a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2319      	movs	r3, #25
 8005e58:	2201      	movs	r2, #1
 8005e5a:	497b      	ldr	r1, [pc, #492]	@ (8006048 <HAL_I2C_Mem_Read+0x224>)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fb91 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e207      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_I2C_Mem_Read+0x56>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e200      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d007      	beq.n	8005ea0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2222      	movs	r2, #34	@ 0x22
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2240      	movs	r2, #64	@ 0x40
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a5b      	ldr	r2, [pc, #364]	@ (800604c <HAL_I2C_Mem_Read+0x228>)
 8005ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ee2:	88f8      	ldrh	r0, [r7, #6]
 8005ee4:	893a      	ldrh	r2, [r7, #8]
 8005ee6:	8979      	ldrh	r1, [r7, #10]
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fa5e 	bl	80063b4 <I2C_RequestMemoryRead>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e1bc      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d113      	bne.n	8005f32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	623b      	str	r3, [r7, #32]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	623b      	str	r3, [r7, #32]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e190      	b.n	8006254 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d11b      	bne.n	8005f72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e170      	b.n	8006254 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d11b      	bne.n	8005fb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	e150      	b.n	8006254 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fc8:	e144      	b.n	8006254 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	f200 80f1 	bhi.w	80061b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d123      	bne.n	8006024 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fc79 	bl	80068d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e145      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006022:	e117      	b.n	8006254 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006028:	2b02      	cmp	r3, #2
 800602a:	d14e      	bne.n	80060ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	2200      	movs	r2, #0
 8006034:	4906      	ldr	r1, [pc, #24]	@ (8006050 <HAL_I2C_Mem_Read+0x22c>)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 faa4 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e11a      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
 8006046:	bf00      	nop
 8006048:	00100002 	.word	0x00100002
 800604c:	ffff0000 	.word	0xffff0000
 8006050:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060c8:	e0c4      	b.n	8006254 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	2200      	movs	r2, #0
 80060d2:	496c      	ldr	r1, [pc, #432]	@ (8006284 <HAL_I2C_Mem_Read+0x460>)
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fa55 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0cb      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612c:	2200      	movs	r2, #0
 800612e:	4955      	ldr	r1, [pc, #340]	@ (8006284 <HAL_I2C_Mem_Read+0x460>)
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fa27 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e09d      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061b4:	e04e      	b.n	8006254 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fb8c 	bl	80068d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e058      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d124      	bne.n	8006254 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620e:	2b03      	cmp	r3, #3
 8006210:	d107      	bne.n	8006222 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006220:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006258:	2b00      	cmp	r3, #0
 800625a:	f47f aeb6 	bne.w	8005fca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e000      	b.n	800627c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
  }
}
 800627c:	4618      	mov	r0, r3
 800627e:	3728      	adds	r7, #40	@ 0x28
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	00010004 	.word	0x00010004

08006288 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	4603      	mov	r3, r0
 8006298:	817b      	strh	r3, [r7, #10]
 800629a:	460b      	mov	r3, r1
 800629c:	813b      	strh	r3, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f960 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00d      	beq.n	80062e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d8:	d103      	bne.n	80062e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e05f      	b.n	80063a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062e6:	897b      	ldrh	r3, [r7, #10]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	492d      	ldr	r1, [pc, #180]	@ (80063b0 <I2C_RequestMemoryWrite+0x128>)
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f9bb 	bl	8006678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e04c      	b.n	80063a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fa46 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	2b04      	cmp	r3, #4
 8006338:	d107      	bne.n	800634a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006348:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e02b      	b.n	80063a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d105      	bne.n	8006360 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006354:	893b      	ldrh	r3, [r7, #8]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	611a      	str	r2, [r3, #16]
 800635e:	e021      	b.n	80063a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006360:	893b      	ldrh	r3, [r7, #8]
 8006362:	0a1b      	lsrs	r3, r3, #8
 8006364:	b29b      	uxth	r3, r3
 8006366:	b2da      	uxtb	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800636e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006370:	6a39      	ldr	r1, [r7, #32]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fa20 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00d      	beq.n	800639a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	2b04      	cmp	r3, #4
 8006384:	d107      	bne.n	8006396 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006394:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e005      	b.n	80063a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800639a:	893b      	ldrh	r3, [r7, #8]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	00010002 	.word	0x00010002

080063b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	4608      	mov	r0, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	817b      	strh	r3, [r7, #10]
 80063c6:	460b      	mov	r3, r1
 80063c8:	813b      	strh	r3, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f8c2 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00d      	beq.n	8006422 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006414:	d103      	bne.n	800641e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800641c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e0aa      	b.n	8006578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006430:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	6a3a      	ldr	r2, [r7, #32]
 8006436:	4952      	ldr	r1, [pc, #328]	@ (8006580 <I2C_RequestMemoryRead+0x1cc>)
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f91d 	bl	8006678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e097      	b.n	8006578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006460:	6a39      	ldr	r1, [r7, #32]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f9a8 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00d      	beq.n	800648a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006472:	2b04      	cmp	r3, #4
 8006474:	d107      	bne.n	8006486 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006484:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e076      	b.n	8006578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d105      	bne.n	800649c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006490:	893b      	ldrh	r3, [r7, #8]
 8006492:	b2da      	uxtb	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	611a      	str	r2, [r3, #16]
 800649a:	e021      	b.n	80064e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800649c:	893b      	ldrh	r3, [r7, #8]
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ac:	6a39      	ldr	r1, [r7, #32]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f982 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00d      	beq.n	80064d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d107      	bne.n	80064d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e050      	b.n	8006578 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064d6:	893b      	ldrh	r3, [r7, #8]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e2:	6a39      	ldr	r1, [r7, #32]
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f967 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00d      	beq.n	800650c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d107      	bne.n	8006508 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006506:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e035      	b.n	8006578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800651a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2200      	movs	r2, #0
 8006524:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f82b 	bl	8006584 <I2C_WaitOnFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00d      	beq.n	8006550 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006542:	d103      	bne.n	800654c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800654a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e013      	b.n	8006578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006550:	897b      	ldrh	r3, [r7, #10]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	4906      	ldr	r1, [pc, #24]	@ (8006580 <I2C_RequestMemoryRead+0x1cc>)
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f886 	bl	8006678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	00010002 	.word	0x00010002

08006584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006594:	e048      	b.n	8006628 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d044      	beq.n	8006628 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fe ff69 	bl	8005474 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d139      	bne.n	8006628 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	0c1b      	lsrs	r3, r3, #16
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10d      	bne.n	80065da <I2C_WaitOnFlagUntilTimeout+0x56>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	43da      	mvns	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4013      	ands	r3, r2
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bf0c      	ite	eq
 80065d0:	2301      	moveq	r3, #1
 80065d2:	2300      	movne	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	e00c      	b.n	80065f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	43da      	mvns	r2, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4013      	ands	r3, r2
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d116      	bne.n	8006628 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e023      	b.n	8006670 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d10d      	bne.n	800664e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	43da      	mvns	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4013      	ands	r3, r2
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf0c      	ite	eq
 8006644:	2301      	moveq	r3, #1
 8006646:	2300      	movne	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	e00c      	b.n	8006668 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	43da      	mvns	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4013      	ands	r3, r2
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf0c      	ite	eq
 8006660:	2301      	moveq	r3, #1
 8006662:	2300      	movne	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	429a      	cmp	r2, r3
 800666c:	d093      	beq.n	8006596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006686:	e071      	b.n	800676c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006696:	d123      	bne.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	f043 0204 	orr.w	r2, r3, #4
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e067      	b.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d041      	beq.n	800676c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e8:	f7fe fec4 	bl	8005474 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d302      	bcc.n	80066fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d136      	bne.n	800676c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b01      	cmp	r3, #1
 8006706:	d10c      	bne.n	8006722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	43da      	mvns	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4013      	ands	r3, r2
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2301      	movne	r3, #1
 800671c:	2300      	moveq	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	e00b      	b.n	800673a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	43da      	mvns	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4013      	ands	r3, r2
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2300      	moveq	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d016      	beq.n	800676c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e021      	b.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b01      	cmp	r3, #1
 8006774:	d10c      	bne.n	8006790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	43da      	mvns	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e00b      	b.n	80067a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	43da      	mvns	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4013      	ands	r3, r2
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bf14      	ite	ne
 80067a2:	2301      	movne	r3, #1
 80067a4:	2300      	moveq	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f47f af6d 	bne.w	8006688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c4:	e034      	b.n	8006830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f8e3 	bl	8006992 <I2C_IsAcknowledgeFailed>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e034      	b.n	8006840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d028      	beq.n	8006830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fe fe49 	bl	8005474 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d11d      	bne.n	8006830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fe:	2b80      	cmp	r3, #128	@ 0x80
 8006800:	d016      	beq.n	8006830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e007      	b.n	8006840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683a:	2b80      	cmp	r3, #128	@ 0x80
 800683c:	d1c3      	bne.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006854:	e034      	b.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f89b 	bl	8006992 <I2C_IsAcknowledgeFailed>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e034      	b.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d028      	beq.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fe fe01 	bl	8005474 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11d      	bne.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b04      	cmp	r3, #4
 8006890:	d016      	beq.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e007      	b.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d1c3      	bne.n	8006856 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068e4:	e049      	b.n	800697a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d119      	bne.n	8006928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0210 	mvn.w	r2, #16
 80068fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e030      	b.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006928:	f7fe fda4 	bl	8005474 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	429a      	cmp	r2, r3
 8006936:	d302      	bcc.n	800693e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d11d      	bne.n	800697a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006948:	2b40      	cmp	r3, #64	@ 0x40
 800694a:	d016      	beq.n	800697a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006966:	f043 0220 	orr.w	r2, r3, #32
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e007      	b.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b40      	cmp	r3, #64	@ 0x40
 8006986:	d1ae      	bne.n	80068e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a8:	d11b      	bne.n	80069e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	f043 0204 	orr.w	r2, r3, #4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e267      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d075      	beq.n	8006afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a0e:	4b88      	ldr	r3, [pc, #544]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d00c      	beq.n	8006a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a1a:	4b85      	ldr	r3, [pc, #532]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d112      	bne.n	8006a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a26:	4b82      	ldr	r3, [pc, #520]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a32:	d10b      	bne.n	8006a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a34:	4b7e      	ldr	r3, [pc, #504]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05b      	beq.n	8006af8 <HAL_RCC_OscConfig+0x108>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d157      	bne.n	8006af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e242      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a54:	d106      	bne.n	8006a64 <HAL_RCC_OscConfig+0x74>
 8006a56:	4b76      	ldr	r3, [pc, #472]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a75      	ldr	r2, [pc, #468]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e01d      	b.n	8006aa0 <HAL_RCC_OscConfig+0xb0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a6c:	d10c      	bne.n	8006a88 <HAL_RCC_OscConfig+0x98>
 8006a6e:	4b70      	ldr	r3, [pc, #448]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a6f      	ldr	r2, [pc, #444]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a6c      	ldr	r2, [pc, #432]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e00b      	b.n	8006aa0 <HAL_RCC_OscConfig+0xb0>
 8006a88:	4b69      	ldr	r3, [pc, #420]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a68      	ldr	r2, [pc, #416]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	4b66      	ldr	r3, [pc, #408]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a65      	ldr	r2, [pc, #404]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d013      	beq.n	8006ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa8:	f7fe fce4 	bl	8005474 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ab0:	f7fe fce0 	bl	8005474 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b64      	cmp	r3, #100	@ 0x64
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e207      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0xc0>
 8006ace:	e014      	b.n	8006afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fe fcd0 	bl	8005474 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ad8:	f7fe fccc 	bl	8005474 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b64      	cmp	r3, #100	@ 0x64
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e1f3      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aea:	4b51      	ldr	r3, [pc, #324]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0xe8>
 8006af6:	e000      	b.n	8006afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d063      	beq.n	8006bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b06:	4b4a      	ldr	r3, [pc, #296]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 030c 	and.w	r3, r3, #12
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b12:	4b47      	ldr	r3, [pc, #284]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d11c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1e:	4b44      	ldr	r3, [pc, #272]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d116      	bne.n	8006b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b2a:	4b41      	ldr	r3, [pc, #260]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_RCC_OscConfig+0x152>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e1c7      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b42:	4b3b      	ldr	r3, [pc, #236]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4937      	ldr	r1, [pc, #220]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b56:	e03a      	b.n	8006bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d020      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b60:	4b34      	ldr	r3, [pc, #208]	@ (8006c34 <HAL_RCC_OscConfig+0x244>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fe fc85 	bl	8005474 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b6e:	f7fe fc81 	bl	8005474 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e1a8      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b80:	4b2b      	ldr	r3, [pc, #172]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4b28      	ldr	r3, [pc, #160]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	4925      	ldr	r1, [pc, #148]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	e015      	b.n	8006bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba2:	4b24      	ldr	r3, [pc, #144]	@ (8006c34 <HAL_RCC_OscConfig+0x244>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fe fc64 	bl	8005474 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bb0:	f7fe fc60 	bl	8005474 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e187      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f0      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d036      	beq.n	8006c48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d016      	beq.n	8006c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be2:	4b15      	ldr	r3, [pc, #84]	@ (8006c38 <HAL_RCC_OscConfig+0x248>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fe fc44 	bl	8005474 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bf0:	f7fe fc40 	bl	8005474 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e167      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c02:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <HAL_RCC_OscConfig+0x240>)
 8006c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x200>
 8006c0e:	e01b      	b.n	8006c48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c10:	4b09      	ldr	r3, [pc, #36]	@ (8006c38 <HAL_RCC_OscConfig+0x248>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c16:	f7fe fc2d 	bl	8005474 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1c:	e00e      	b.n	8006c3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c1e:	f7fe fc29 	bl	8005474 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d907      	bls.n	8006c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e150      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
 8006c30:	40023800 	.word	0x40023800
 8006c34:	42470000 	.word	0x42470000
 8006c38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3c:	4b88      	ldr	r3, [pc, #544]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ea      	bne.n	8006c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8097 	beq.w	8006d84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c5a:	4b81      	ldr	r3, [pc, #516]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10f      	bne.n	8006c86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	4b7d      	ldr	r3, [pc, #500]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	4a7c      	ldr	r2, [pc, #496]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c76:	4b7a      	ldr	r3, [pc, #488]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c7e:	60bb      	str	r3, [r7, #8]
 8006c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c86:	4b77      	ldr	r3, [pc, #476]	@ (8006e64 <HAL_RCC_OscConfig+0x474>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d118      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c92:	4b74      	ldr	r3, [pc, #464]	@ (8006e64 <HAL_RCC_OscConfig+0x474>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a73      	ldr	r2, [pc, #460]	@ (8006e64 <HAL_RCC_OscConfig+0x474>)
 8006c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c9e:	f7fe fbe9 	bl	8005474 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca6:	f7fe fbe5 	bl	8005474 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e10c      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8006e64 <HAL_RCC_OscConfig+0x474>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <HAL_RCC_OscConfig+0x2ea>
 8006ccc:	4b64      	ldr	r3, [pc, #400]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd0:	4a63      	ldr	r2, [pc, #396]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cd8:	e01c      	b.n	8006d14 <HAL_RCC_OscConfig+0x324>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x30c>
 8006ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce6:	4a5e      	ldr	r2, [pc, #376]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006ce8:	f043 0304 	orr.w	r3, r3, #4
 8006cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cee:	4b5c      	ldr	r3, [pc, #368]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCC_OscConfig+0x324>
 8006cfc:	4b58      	ldr	r3, [pc, #352]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d00:	4a57      	ldr	r2, [pc, #348]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d08:	4b55      	ldr	r3, [pc, #340]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0c:	4a54      	ldr	r2, [pc, #336]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d0e:	f023 0304 	bic.w	r3, r3, #4
 8006d12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d015      	beq.n	8006d48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1c:	f7fe fbaa 	bl	8005474 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d22:	e00a      	b.n	8006d3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d24:	f7fe fba6 	bl	8005474 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e0cb      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d3a:	4b49      	ldr	r3, [pc, #292]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0ee      	beq.n	8006d24 <HAL_RCC_OscConfig+0x334>
 8006d46:	e014      	b.n	8006d72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d48:	f7fe fb94 	bl	8005474 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d50:	f7fe fb90 	bl	8005474 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e0b5      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d66:	4b3e      	ldr	r3, [pc, #248]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1ee      	bne.n	8006d50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d105      	bne.n	8006d84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d78:	4b39      	ldr	r3, [pc, #228]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	4a38      	ldr	r2, [pc, #224]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80a1 	beq.w	8006ed0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d8e:	4b34      	ldr	r3, [pc, #208]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d05c      	beq.n	8006e54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d141      	bne.n	8006e26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da2:	4b31      	ldr	r3, [pc, #196]	@ (8006e68 <HAL_RCC_OscConfig+0x478>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7fe fb64 	bl	8005474 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fe fb60 	bl	8005474 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e087      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc2:	4b27      	ldr	r3, [pc, #156]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	019b      	lsls	r3, r3, #6
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	3b01      	subs	r3, #1
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df0:	061b      	lsls	r3, r3, #24
 8006df2:	491b      	ldr	r1, [pc, #108]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006df8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e68 <HAL_RCC_OscConfig+0x478>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfe:	f7fe fb39 	bl	8005474 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e06:	f7fe fb35 	bl	8005474 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e05c      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e18:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x416>
 8006e24:	e054      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e26:	4b10      	ldr	r3, [pc, #64]	@ (8006e68 <HAL_RCC_OscConfig+0x478>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2c:	f7fe fb22 	bl	8005474 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e34:	f7fe fb1e 	bl	8005474 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e045      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e46:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <HAL_RCC_OscConfig+0x470>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0x444>
 8006e52:	e03d      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d107      	bne.n	8006e6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e038      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
 8006e60:	40023800 	.word	0x40023800
 8006e64:	40007000 	.word	0x40007000
 8006e68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006edc <HAL_RCC_OscConfig+0x4ec>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d028      	beq.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d121      	bne.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d11a      	bne.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ea2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d111      	bne.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40023800 	.word	0x40023800

08006ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0cc      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef4:	4b68      	ldr	r3, [pc, #416]	@ (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d90c      	bls.n	8006f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f02:	4b65      	ldr	r3, [pc, #404]	@ (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0a:	4b63      	ldr	r3, [pc, #396]	@ (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d001      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0b8      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d020      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f34:	4b59      	ldr	r3, [pc, #356]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	4a58      	ldr	r2, [pc, #352]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f4c:	4b53      	ldr	r3, [pc, #332]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	4a52      	ldr	r2, [pc, #328]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f58:	4b50      	ldr	r3, [pc, #320]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	494d      	ldr	r1, [pc, #308]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d044      	beq.n	8007000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f7e:	4b47      	ldr	r3, [pc, #284]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d119      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e07f      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d003      	beq.n	8006f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e06f      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fae:	4b3b      	ldr	r3, [pc, #236]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e067      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fbe:	4b37      	ldr	r3, [pc, #220]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f023 0203 	bic.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4934      	ldr	r1, [pc, #208]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fd0:	f7fe fa50 	bl	8005474 <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	e00a      	b.n	8006fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd8:	f7fe fa4c 	bl	8005474 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e04f      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 020c 	and.w	r2, r3, #12
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d1eb      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007000:	4b25      	ldr	r3, [pc, #148]	@ (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d20c      	bcs.n	8007028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700e:	4b22      	ldr	r3, [pc, #136]	@ (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007016:	4b20      	ldr	r3, [pc, #128]	@ (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d001      	beq.n	8007028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e032      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007034:	4b19      	ldr	r3, [pc, #100]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4916      	ldr	r1, [pc, #88]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	4313      	orrs	r3, r2
 8007044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007052:	4b12      	ldr	r3, [pc, #72]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	490e      	ldr	r1, [pc, #56]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007066:	f000 f821 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 800706a:	4602      	mov	r2, r0
 800706c:	4b0b      	ldr	r3, [pc, #44]	@ (800709c <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	091b      	lsrs	r3, r3, #4
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	490a      	ldr	r1, [pc, #40]	@ (80070a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007078:	5ccb      	ldrb	r3, [r1, r3]
 800707a:	fa22 f303 	lsr.w	r3, r2, r3
 800707e:	4a09      	ldr	r2, [pc, #36]	@ (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007082:	4b09      	ldr	r3, [pc, #36]	@ (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe f9b0 	bl	80053ec <HAL_InitTick>

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40023c00 	.word	0x40023c00
 800709c:	40023800 	.word	0x40023800
 80070a0:	08009130 	.word	0x08009130
 80070a4:	2000003c 	.word	0x2000003c
 80070a8:	20000040 	.word	0x20000040

080070ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b0:	b090      	sub	sp, #64	@ 0x40
 80070b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b8:	2300      	movs	r3, #0
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070bc:	2300      	movs	r3, #0
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070c4:	4b59      	ldr	r3, [pc, #356]	@ (800722c <HAL_RCC_GetSysClockFreq+0x180>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 030c 	and.w	r3, r3, #12
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d00d      	beq.n	80070ec <HAL_RCC_GetSysClockFreq+0x40>
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	f200 80a1 	bhi.w	8007218 <HAL_RCC_GetSysClockFreq+0x16c>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x34>
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80070de:	e09b      	b.n	8007218 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070e0:	4b53      	ldr	r3, [pc, #332]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x184>)
 80070e2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80070e4:	e09b      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070e6:	4b53      	ldr	r3, [pc, #332]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x188>)
 80070e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80070ea:	e098      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070ec:	4b4f      	ldr	r3, [pc, #316]	@ (800722c <HAL_RCC_GetSysClockFreq+0x180>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070f6:	4b4d      	ldr	r3, [pc, #308]	@ (800722c <HAL_RCC_GetSysClockFreq+0x180>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d028      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007102:	4b4a      	ldr	r3, [pc, #296]	@ (800722c <HAL_RCC_GetSysClockFreq+0x180>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	2200      	movs	r2, #0
 800710a:	623b      	str	r3, [r7, #32]
 800710c:	627a      	str	r2, [r7, #36]	@ 0x24
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007114:	2100      	movs	r1, #0
 8007116:	4b47      	ldr	r3, [pc, #284]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x188>)
 8007118:	fb03 f201 	mul.w	r2, r3, r1
 800711c:	2300      	movs	r3, #0
 800711e:	fb00 f303 	mul.w	r3, r0, r3
 8007122:	4413      	add	r3, r2
 8007124:	4a43      	ldr	r2, [pc, #268]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x188>)
 8007126:	fba0 1202 	umull	r1, r2, r0, r2
 800712a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800712c:	460a      	mov	r2, r1
 800712e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007132:	4413      	add	r3, r2
 8007134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007138:	2200      	movs	r2, #0
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	61fa      	str	r2, [r7, #28]
 800713e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007142:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007146:	f7f9 fd5d 	bl	8000c04 <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4613      	mov	r3, r2
 8007150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007152:	e053      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007154:	4b35      	ldr	r3, [pc, #212]	@ (800722c <HAL_RCC_GetSysClockFreq+0x180>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	099b      	lsrs	r3, r3, #6
 800715a:	2200      	movs	r2, #0
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	617a      	str	r2, [r7, #20]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007166:	f04f 0b00 	mov.w	fp, #0
 800716a:	4652      	mov	r2, sl
 800716c:	465b      	mov	r3, fp
 800716e:	f04f 0000 	mov.w	r0, #0
 8007172:	f04f 0100 	mov.w	r1, #0
 8007176:	0159      	lsls	r1, r3, #5
 8007178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800717c:	0150      	lsls	r0, r2, #5
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	ebb2 080a 	subs.w	r8, r2, sl
 8007186:	eb63 090b 	sbc.w	r9, r3, fp
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007196:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800719a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800719e:	ebb2 0408 	subs.w	r4, r2, r8
 80071a2:	eb63 0509 	sbc.w	r5, r3, r9
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	00eb      	lsls	r3, r5, #3
 80071b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071b4:	00e2      	lsls	r2, r4, #3
 80071b6:	4614      	mov	r4, r2
 80071b8:	461d      	mov	r5, r3
 80071ba:	eb14 030a 	adds.w	r3, r4, sl
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	eb45 030b 	adc.w	r3, r5, fp
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071d2:	4629      	mov	r1, r5
 80071d4:	028b      	lsls	r3, r1, #10
 80071d6:	4621      	mov	r1, r4
 80071d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071dc:	4621      	mov	r1, r4
 80071de:	028a      	lsls	r2, r1, #10
 80071e0:	4610      	mov	r0, r2
 80071e2:	4619      	mov	r1, r3
 80071e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e6:	2200      	movs	r2, #0
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	60fa      	str	r2, [r7, #12]
 80071ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f0:	f7f9 fd08 	bl	8000c04 <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4613      	mov	r3, r2
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071fc:	4b0b      	ldr	r3, [pc, #44]	@ (800722c <HAL_RCC_GetSysClockFreq+0x180>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	3301      	adds	r3, #1
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800720c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007216:	e002      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007218:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x184>)
 800721a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800721c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007220:	4618      	mov	r0, r3
 8007222:	3740      	adds	r7, #64	@ 0x40
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722a:	bf00      	nop
 800722c:	40023800 	.word	0x40023800
 8007230:	00f42400 	.word	0x00f42400
 8007234:	017d7840 	.word	0x017d7840

08007238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800723c:	4b03      	ldr	r3, [pc, #12]	@ (800724c <HAL_RCC_GetHCLKFreq+0x14>)
 800723e:	681b      	ldr	r3, [r3, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	2000003c 	.word	0x2000003c

08007250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007254:	f7ff fff0 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 8007258:	4602      	mov	r2, r0
 800725a:	4b05      	ldr	r3, [pc, #20]	@ (8007270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	0a9b      	lsrs	r3, r3, #10
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	4903      	ldr	r1, [pc, #12]	@ (8007274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007266:	5ccb      	ldrb	r3, [r1, r3]
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40023800 	.word	0x40023800
 8007274:	08009140 	.word	0x08009140

08007278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e041      	b.n	800730e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fd ff9a 	bl	80051d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f000 fac0 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e041      	b.n	80073ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f839 	bl	80073b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2202      	movs	r2, #2
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3304      	adds	r3, #4
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f000 fa71 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <HAL_TIM_PWM_Start+0x24>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	bf14      	ite	ne
 80073e4:	2301      	movne	r3, #1
 80073e6:	2300      	moveq	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	e022      	b.n	8007432 <HAL_TIM_PWM_Start+0x6a>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d109      	bne.n	8007406 <HAL_TIM_PWM_Start+0x3e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	bf14      	ite	ne
 80073fe:	2301      	movne	r3, #1
 8007400:	2300      	moveq	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	e015      	b.n	8007432 <HAL_TIM_PWM_Start+0x6a>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b08      	cmp	r3, #8
 800740a:	d109      	bne.n	8007420 <HAL_TIM_PWM_Start+0x58>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	e008      	b.n	8007432 <HAL_TIM_PWM_Start+0x6a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b01      	cmp	r3, #1
 800742a:	bf14      	ite	ne
 800742c:	2301      	movne	r3, #1
 800742e:	2300      	moveq	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e068      	b.n	800750c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <HAL_TIM_PWM_Start+0x82>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007448:	e013      	b.n	8007472 <HAL_TIM_PWM_Start+0xaa>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b04      	cmp	r3, #4
 800744e:	d104      	bne.n	800745a <HAL_TIM_PWM_Start+0x92>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007458:	e00b      	b.n	8007472 <HAL_TIM_PWM_Start+0xaa>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d104      	bne.n	800746a <HAL_TIM_PWM_Start+0xa2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007468:	e003      	b.n	8007472 <HAL_TIM_PWM_Start+0xaa>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2202      	movs	r2, #2
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2201      	movs	r2, #1
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fc90 	bl	8007da0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a23      	ldr	r2, [pc, #140]	@ (8007514 <HAL_TIM_PWM_Start+0x14c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d107      	bne.n	800749a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007498:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1d      	ldr	r2, [pc, #116]	@ (8007514 <HAL_TIM_PWM_Start+0x14c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d018      	beq.n	80074d6 <HAL_TIM_PWM_Start+0x10e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ac:	d013      	beq.n	80074d6 <HAL_TIM_PWM_Start+0x10e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a19      	ldr	r2, [pc, #100]	@ (8007518 <HAL_TIM_PWM_Start+0x150>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00e      	beq.n	80074d6 <HAL_TIM_PWM_Start+0x10e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a17      	ldr	r2, [pc, #92]	@ (800751c <HAL_TIM_PWM_Start+0x154>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d009      	beq.n	80074d6 <HAL_TIM_PWM_Start+0x10e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <HAL_TIM_PWM_Start+0x158>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <HAL_TIM_PWM_Start+0x10e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a14      	ldr	r2, [pc, #80]	@ (8007524 <HAL_TIM_PWM_Start+0x15c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d111      	bne.n	80074fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d010      	beq.n	800750a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0201 	orr.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f8:	e007      	b.n	800750a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0201 	orr.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40010000 	.word	0x40010000
 8007518:	40000400 	.word	0x40000400
 800751c:	40000800 	.word	0x40000800
 8007520:	40000c00 	.word	0x40000c00
 8007524:	40014000 	.word	0x40014000

08007528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007542:	2302      	movs	r3, #2
 8007544:	e0ae      	b.n	80076a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b0c      	cmp	r3, #12
 8007552:	f200 809f 	bhi.w	8007694 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007556:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007591 	.word	0x08007591
 8007560:	08007695 	.word	0x08007695
 8007564:	08007695 	.word	0x08007695
 8007568:	08007695 	.word	0x08007695
 800756c:	080075d1 	.word	0x080075d1
 8007570:	08007695 	.word	0x08007695
 8007574:	08007695 	.word	0x08007695
 8007578:	08007695 	.word	0x08007695
 800757c:	08007613 	.word	0x08007613
 8007580:	08007695 	.word	0x08007695
 8007584:	08007695 	.word	0x08007695
 8007588:	08007695 	.word	0x08007695
 800758c:	08007653 	.word	0x08007653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f9dc 	bl	8007954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0208 	orr.w	r2, r2, #8
 80075aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0204 	bic.w	r2, r2, #4
 80075ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6999      	ldr	r1, [r3, #24]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	619a      	str	r2, [r3, #24]
      break;
 80075ce:	e064      	b.n	800769a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fa22 	bl	8007a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6999      	ldr	r1, [r3, #24]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	021a      	lsls	r2, r3, #8
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	619a      	str	r2, [r3, #24]
      break;
 8007610:	e043      	b.n	800769a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fa6d 	bl	8007af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0208 	orr.w	r2, r2, #8
 800762c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0204 	bic.w	r2, r2, #4
 800763c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69d9      	ldr	r1, [r3, #28]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	61da      	str	r2, [r3, #28]
      break;
 8007650:	e023      	b.n	800769a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68b9      	ldr	r1, [r7, #8]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fab7 	bl	8007bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69da      	ldr	r2, [r3, #28]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800766c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800767c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69d9      	ldr	r1, [r3, #28]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	021a      	lsls	r2, r3, #8
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	61da      	str	r2, [r3, #28]
      break;
 8007692:	e002      	b.n	800769a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]
      break;
 8007698:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e0b4      	b.n	8007832 <HAL_TIM_ConfigClockSource+0x186>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007700:	d03e      	beq.n	8007780 <HAL_TIM_ConfigClockSource+0xd4>
 8007702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007706:	f200 8087 	bhi.w	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 800770a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800770e:	f000 8086 	beq.w	800781e <HAL_TIM_ConfigClockSource+0x172>
 8007712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007716:	d87f      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 8007718:	2b70      	cmp	r3, #112	@ 0x70
 800771a:	d01a      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0xa6>
 800771c:	2b70      	cmp	r3, #112	@ 0x70
 800771e:	d87b      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 8007720:	2b60      	cmp	r3, #96	@ 0x60
 8007722:	d050      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x11a>
 8007724:	2b60      	cmp	r3, #96	@ 0x60
 8007726:	d877      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 8007728:	2b50      	cmp	r3, #80	@ 0x50
 800772a:	d03c      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0xfa>
 800772c:	2b50      	cmp	r3, #80	@ 0x50
 800772e:	d873      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 8007730:	2b40      	cmp	r3, #64	@ 0x40
 8007732:	d058      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x13a>
 8007734:	2b40      	cmp	r3, #64	@ 0x40
 8007736:	d86f      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 8007738:	2b30      	cmp	r3, #48	@ 0x30
 800773a:	d064      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x15a>
 800773c:	2b30      	cmp	r3, #48	@ 0x30
 800773e:	d86b      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 8007740:	2b20      	cmp	r3, #32
 8007742:	d060      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x15a>
 8007744:	2b20      	cmp	r3, #32
 8007746:	d867      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d05c      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x15a>
 800774c:	2b10      	cmp	r3, #16
 800774e:	d05a      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x15a>
 8007750:	e062      	b.n	8007818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007762:	f000 fafd 	bl	8007d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	609a      	str	r2, [r3, #8]
      break;
 800777e:	e04f      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007790:	f000 fae6 	bl	8007d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077a2:	609a      	str	r2, [r3, #8]
      break;
 80077a4:	e03c      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	461a      	mov	r2, r3
 80077b4:	f000 fa5a 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2150      	movs	r1, #80	@ 0x50
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fab3 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 80077c4:	e02c      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077d2:	461a      	mov	r2, r3
 80077d4:	f000 fa79 	bl	8007cca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2160      	movs	r1, #96	@ 0x60
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 faa3 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 80077e4:	e01c      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f2:	461a      	mov	r2, r3
 80077f4:	f000 fa3a 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2140      	movs	r1, #64	@ 0x40
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fa93 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 8007804:	e00c      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f000 fa8a 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 8007816:	e003      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
      break;
 800781c:	e000      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800781e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a3a      	ldr	r2, [pc, #232]	@ (8007938 <TIM_Base_SetConfig+0xfc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00f      	beq.n	8007874 <TIM_Base_SetConfig+0x38>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785a:	d00b      	beq.n	8007874 <TIM_Base_SetConfig+0x38>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a37      	ldr	r2, [pc, #220]	@ (800793c <TIM_Base_SetConfig+0x100>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <TIM_Base_SetConfig+0x38>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a36      	ldr	r2, [pc, #216]	@ (8007940 <TIM_Base_SetConfig+0x104>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_Base_SetConfig+0x38>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a35      	ldr	r2, [pc, #212]	@ (8007944 <TIM_Base_SetConfig+0x108>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d108      	bne.n	8007886 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800787a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a2b      	ldr	r2, [pc, #172]	@ (8007938 <TIM_Base_SetConfig+0xfc>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d01b      	beq.n	80078c6 <TIM_Base_SetConfig+0x8a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007894:	d017      	beq.n	80078c6 <TIM_Base_SetConfig+0x8a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a28      	ldr	r2, [pc, #160]	@ (800793c <TIM_Base_SetConfig+0x100>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d013      	beq.n	80078c6 <TIM_Base_SetConfig+0x8a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a27      	ldr	r2, [pc, #156]	@ (8007940 <TIM_Base_SetConfig+0x104>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00f      	beq.n	80078c6 <TIM_Base_SetConfig+0x8a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a26      	ldr	r2, [pc, #152]	@ (8007944 <TIM_Base_SetConfig+0x108>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <TIM_Base_SetConfig+0x8a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a25      	ldr	r2, [pc, #148]	@ (8007948 <TIM_Base_SetConfig+0x10c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d007      	beq.n	80078c6 <TIM_Base_SetConfig+0x8a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a24      	ldr	r2, [pc, #144]	@ (800794c <TIM_Base_SetConfig+0x110>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_Base_SetConfig+0x8a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a23      	ldr	r2, [pc, #140]	@ (8007950 <TIM_Base_SetConfig+0x114>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d108      	bne.n	80078d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007938 <TIM_Base_SetConfig+0xfc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d103      	bne.n	800790c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d105      	bne.n	800792a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f023 0201 	bic.w	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	611a      	str	r2, [r3, #16]
  }
}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40010000 	.word	0x40010000
 800793c:	40000400 	.word	0x40000400
 8007940:	40000800 	.word	0x40000800
 8007944:	40000c00 	.word	0x40000c00
 8007948:	40014000 	.word	0x40014000
 800794c:	40014400 	.word	0x40014400
 8007950:	40014800 	.word	0x40014800

08007954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	f023 0201 	bic.w	r2, r3, #1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f023 0302 	bic.w	r3, r3, #2
 800799c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1c      	ldr	r2, [pc, #112]	@ (8007a1c <TIM_OC1_SetConfig+0xc8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10c      	bne.n	80079ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f023 0308 	bic.w	r3, r3, #8
 80079b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f023 0304 	bic.w	r3, r3, #4
 80079c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a13      	ldr	r2, [pc, #76]	@ (8007a1c <TIM_OC1_SetConfig+0xc8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d111      	bne.n	80079f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	621a      	str	r2, [r3, #32]
}
 8007a10:	bf00      	nop
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	40010000 	.word	0x40010000

08007a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	f023 0210 	bic.w	r2, r3, #16
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f023 0320 	bic.w	r3, r3, #32
 8007a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007af4 <TIM_OC2_SetConfig+0xd4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d10d      	bne.n	8007a9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a15      	ldr	r2, [pc, #84]	@ (8007af4 <TIM_OC2_SetConfig+0xd4>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d113      	bne.n	8007acc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	621a      	str	r2, [r3, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	40010000 	.word	0x40010000

08007af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0303 	bic.w	r3, r3, #3
 8007b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc8 <TIM_OC3_SetConfig+0xd0>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d10d      	bne.n	8007b72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a14      	ldr	r2, [pc, #80]	@ (8007bc8 <TIM_OC3_SetConfig+0xd0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d113      	bne.n	8007ba2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	621a      	str	r2, [r3, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	40010000 	.word	0x40010000

08007bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	031b      	lsls	r3, r3, #12
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a10      	ldr	r2, [pc, #64]	@ (8007c68 <TIM_OC4_SetConfig+0x9c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d109      	bne.n	8007c40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	019b      	lsls	r3, r3, #6
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40010000 	.word	0x40010000

08007c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0201 	bic.w	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 030a 	bic.w	r3, r3, #10
 8007ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b087      	sub	sp, #28
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f023 0210 	bic.w	r2, r3, #16
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	031b      	lsls	r3, r3, #12
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f043 0307 	orr.w	r3, r3, #7
 8007d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	609a      	str	r2, [r3, #8]
}
 8007d54:	bf00      	nop
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	021a      	lsls	r2, r3, #8
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	609a      	str	r2, [r3, #8]
}
 8007d94:	bf00      	nop
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 031f 	and.w	r3, r3, #31
 8007db2:	2201      	movs	r2, #1
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6a1a      	ldr	r2, [r3, #32]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a1a      	ldr	r2, [r3, #32]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e050      	b.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d018      	beq.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e50:	d013      	beq.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a18      	ldr	r2, [pc, #96]	@ (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00e      	beq.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a16      	ldr	r2, [pc, #88]	@ (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d009      	beq.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d004      	beq.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a13      	ldr	r2, [pc, #76]	@ (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d10c      	bne.n	8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40000400 	.word	0x40000400
 8007ebc:	40000800 	.word	0x40000800
 8007ec0:	40000c00 	.word	0x40000c00
 8007ec4:	40014000 	.word	0x40014000

08007ec8 <memcmp>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	3901      	subs	r1, #1
 8007ecc:	4402      	add	r2, r0
 8007ece:	4290      	cmp	r0, r2
 8007ed0:	d101      	bne.n	8007ed6 <memcmp+0xe>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e005      	b.n	8007ee2 <memcmp+0x1a>
 8007ed6:	7803      	ldrb	r3, [r0, #0]
 8007ed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d001      	beq.n	8007ee4 <memcmp+0x1c>
 8007ee0:	1b18      	subs	r0, r3, r4
 8007ee2:	bd10      	pop	{r4, pc}
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	e7f2      	b.n	8007ece <memcmp+0x6>

08007ee8 <memset>:
 8007ee8:	4402      	add	r2, r0
 8007eea:	4603      	mov	r3, r0
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d100      	bne.n	8007ef2 <memset+0xa>
 8007ef0:	4770      	bx	lr
 8007ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef6:	e7f9      	b.n	8007eec <memset+0x4>

08007ef8 <__errno>:
 8007ef8:	4b01      	ldr	r3, [pc, #4]	@ (8007f00 <__errno+0x8>)
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20000048 	.word	0x20000048

08007f04 <__libc_init_array>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4d0d      	ldr	r5, [pc, #52]	@ (8007f3c <__libc_init_array+0x38>)
 8007f08:	4c0d      	ldr	r4, [pc, #52]	@ (8007f40 <__libc_init_array+0x3c>)
 8007f0a:	1b64      	subs	r4, r4, r5
 8007f0c:	10a4      	asrs	r4, r4, #2
 8007f0e:	2600      	movs	r6, #0
 8007f10:	42a6      	cmp	r6, r4
 8007f12:	d109      	bne.n	8007f28 <__libc_init_array+0x24>
 8007f14:	4d0b      	ldr	r5, [pc, #44]	@ (8007f44 <__libc_init_array+0x40>)
 8007f16:	4c0c      	ldr	r4, [pc, #48]	@ (8007f48 <__libc_init_array+0x44>)
 8007f18:	f000 fab2 	bl	8008480 <_init>
 8007f1c:	1b64      	subs	r4, r4, r5
 8007f1e:	10a4      	asrs	r4, r4, #2
 8007f20:	2600      	movs	r6, #0
 8007f22:	42a6      	cmp	r6, r4
 8007f24:	d105      	bne.n	8007f32 <__libc_init_array+0x2e>
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2c:	4798      	blx	r3
 8007f2e:	3601      	adds	r6, #1
 8007f30:	e7ee      	b.n	8007f10 <__libc_init_array+0xc>
 8007f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f36:	4798      	blx	r3
 8007f38:	3601      	adds	r6, #1
 8007f3a:	e7f2      	b.n	8007f22 <__libc_init_array+0x1e>
 8007f3c:	0800918c 	.word	0x0800918c
 8007f40:	0800918c 	.word	0x0800918c
 8007f44:	0800918c 	.word	0x0800918c
 8007f48:	08009190 	.word	0x08009190

08007f4c <asinf>:
 8007f4c:	b508      	push	{r3, lr}
 8007f4e:	ed2d 8b02 	vpush	{d8}
 8007f52:	eeb0 8a40 	vmov.f32	s16, s0
 8007f56:	f000 f835 	bl	8007fc4 <__ieee754_asinf>
 8007f5a:	eeb4 8a48 	vcmp.f32	s16, s16
 8007f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f62:	eef0 8a40 	vmov.f32	s17, s0
 8007f66:	d615      	bvs.n	8007f94 <asinf+0x48>
 8007f68:	eeb0 0a48 	vmov.f32	s0, s16
 8007f6c:	f000 f81c 	bl	8007fa8 <fabsf>
 8007f70:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007f74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7c:	dd0a      	ble.n	8007f94 <asinf+0x48>
 8007f7e:	f7ff ffbb 	bl	8007ef8 <__errno>
 8007f82:	ecbd 8b02 	vpop	{d8}
 8007f86:	2321      	movs	r3, #33	@ 0x21
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f8e:	4804      	ldr	r0, [pc, #16]	@ (8007fa0 <asinf+0x54>)
 8007f90:	f000 b812 	b.w	8007fb8 <nanf>
 8007f94:	eeb0 0a68 	vmov.f32	s0, s17
 8007f98:	ecbd 8b02 	vpop	{d8}
 8007f9c:	bd08      	pop	{r3, pc}
 8007f9e:	bf00      	nop
 8007fa0:	08009148 	.word	0x08009148

08007fa4 <atan2f>:
 8007fa4:	f000 b8f4 	b.w	8008190 <__ieee754_atan2f>

08007fa8 <fabsf>:
 8007fa8:	ee10 3a10 	vmov	r3, s0
 8007fac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fb0:	ee00 3a10 	vmov	s0, r3
 8007fb4:	4770      	bx	lr
	...

08007fb8 <nanf>:
 8007fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007fc0 <nanf+0x8>
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	7fc00000 	.word	0x7fc00000

08007fc4 <__ieee754_asinf>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	ee10 5a10 	vmov	r5, s0
 8007fca:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8007fce:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8007fd2:	ed2d 8b04 	vpush	{d8-d9}
 8007fd6:	d10c      	bne.n	8007ff2 <__ieee754_asinf+0x2e>
 8007fd8:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8008150 <__ieee754_asinf+0x18c>
 8007fdc:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8008154 <__ieee754_asinf+0x190>
 8007fe0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007fe4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fec:	ecbd 8b04 	vpop	{d8-d9}
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
 8007ff2:	d904      	bls.n	8007ffe <__ieee754_asinf+0x3a>
 8007ff4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007ff8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007ffc:	e7f6      	b.n	8007fec <__ieee754_asinf+0x28>
 8007ffe:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8008002:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8008006:	d20b      	bcs.n	8008020 <__ieee754_asinf+0x5c>
 8008008:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800800c:	d252      	bcs.n	80080b4 <__ieee754_asinf+0xf0>
 800800e:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8008158 <__ieee754_asinf+0x194>
 8008012:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008016:	eef4 7ae8 	vcmpe.f32	s15, s17
 800801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801e:	dce5      	bgt.n	8007fec <__ieee754_asinf+0x28>
 8008020:	f7ff ffc2 	bl	8007fa8 <fabsf>
 8008024:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8008028:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800802c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008030:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800815c <__ieee754_asinf+0x198>
 8008034:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8008160 <__ieee754_asinf+0x19c>
 8008038:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8008164 <__ieee754_asinf+0x1a0>
 800803c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008040:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8008168 <__ieee754_asinf+0x1a4>
 8008044:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008048:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800816c <__ieee754_asinf+0x1a8>
 800804c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008050:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8008170 <__ieee754_asinf+0x1ac>
 8008054:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008058:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8008174 <__ieee754_asinf+0x1b0>
 800805c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008060:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8008178 <__ieee754_asinf+0x1b4>
 8008064:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008068:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800817c <__ieee754_asinf+0x1b8>
 800806c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008070:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8008180 <__ieee754_asinf+0x1bc>
 8008074:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008078:	eeb0 0a48 	vmov.f32	s0, s16
 800807c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008080:	f000 f9fa 	bl	8008478 <__ieee754_sqrtf>
 8008084:	4b3f      	ldr	r3, [pc, #252]	@ (8008184 <__ieee754_asinf+0x1c0>)
 8008086:	ee29 9a08 	vmul.f32	s18, s18, s16
 800808a:	429c      	cmp	r4, r3
 800808c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008090:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8008094:	d93d      	bls.n	8008112 <__ieee754_asinf+0x14e>
 8008096:	eea0 0a06 	vfma.f32	s0, s0, s12
 800809a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8008188 <__ieee754_asinf+0x1c4>
 800809e:	eee0 7a26 	vfma.f32	s15, s0, s13
 80080a2:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8008154 <__ieee754_asinf+0x190>
 80080a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80080aa:	2d00      	cmp	r5, #0
 80080ac:	bfd8      	it	le
 80080ae:	eeb1 0a40 	vnegle.f32	s0, s0
 80080b2:	e79b      	b.n	8007fec <__ieee754_asinf+0x28>
 80080b4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80080b8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8008160 <__ieee754_asinf+0x19c>
 80080bc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800815c <__ieee754_asinf+0x198>
 80080c0:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8008174 <__ieee754_asinf+0x1b0>
 80080c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80080c8:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8008168 <__ieee754_asinf+0x1a4>
 80080cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80080d0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800816c <__ieee754_asinf+0x1a8>
 80080d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080d8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8008170 <__ieee754_asinf+0x1ac>
 80080dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80080e0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008164 <__ieee754_asinf+0x1a0>
 80080e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080e8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8008178 <__ieee754_asinf+0x1b4>
 80080ec:	eee7 6a86 	vfma.f32	s13, s15, s12
 80080f0:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800817c <__ieee754_asinf+0x1b8>
 80080f4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80080f8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8008180 <__ieee754_asinf+0x1bc>
 80080fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008104:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008108:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800810c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008110:	e76c      	b.n	8007fec <__ieee754_asinf+0x28>
 8008112:	ee10 3a10 	vmov	r3, s0
 8008116:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800811a:	f023 030f 	bic.w	r3, r3, #15
 800811e:	ee07 3a10 	vmov	s14, r3
 8008122:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008126:	ee70 5a00 	vadd.f32	s11, s0, s0
 800812a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800812e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008150 <__ieee754_asinf+0x18c>
 8008132:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8008136:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800818c <__ieee754_asinf+0x1c8>
 800813a:	eee5 7a66 	vfms.f32	s15, s10, s13
 800813e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8008142:	eeb0 6a40 	vmov.f32	s12, s0
 8008146:	eea7 6a66 	vfms.f32	s12, s14, s13
 800814a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800814e:	e7aa      	b.n	80080a6 <__ieee754_asinf+0xe2>
 8008150:	b33bbd2e 	.word	0xb33bbd2e
 8008154:	3fc90fdb 	.word	0x3fc90fdb
 8008158:	7149f2ca 	.word	0x7149f2ca
 800815c:	3a4f7f04 	.word	0x3a4f7f04
 8008160:	3811ef08 	.word	0x3811ef08
 8008164:	3e2aaaab 	.word	0x3e2aaaab
 8008168:	bd241146 	.word	0xbd241146
 800816c:	3e4e0aa8 	.word	0x3e4e0aa8
 8008170:	bea6b090 	.word	0xbea6b090
 8008174:	3d9dc62e 	.word	0x3d9dc62e
 8008178:	bf303361 	.word	0xbf303361
 800817c:	4001572d 	.word	0x4001572d
 8008180:	c019d139 	.word	0xc019d139
 8008184:	3f799999 	.word	0x3f799999
 8008188:	333bbd2e 	.word	0x333bbd2e
 800818c:	3f490fdb 	.word	0x3f490fdb

08008190 <__ieee754_atan2f>:
 8008190:	ee10 2a90 	vmov	r2, s1
 8008194:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008198:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800819c:	b510      	push	{r4, lr}
 800819e:	eef0 7a40 	vmov.f32	s15, s0
 80081a2:	d806      	bhi.n	80081b2 <__ieee754_atan2f+0x22>
 80081a4:	ee10 0a10 	vmov	r0, s0
 80081a8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80081ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80081b0:	d904      	bls.n	80081bc <__ieee754_atan2f+0x2c>
 80081b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80081b6:	eeb0 0a67 	vmov.f32	s0, s15
 80081ba:	bd10      	pop	{r4, pc}
 80081bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80081c0:	d103      	bne.n	80081ca <__ieee754_atan2f+0x3a>
 80081c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c6:	f000 b883 	b.w	80082d0 <atanf>
 80081ca:	1794      	asrs	r4, r2, #30
 80081cc:	f004 0402 	and.w	r4, r4, #2
 80081d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80081d4:	b943      	cbnz	r3, 80081e8 <__ieee754_atan2f+0x58>
 80081d6:	2c02      	cmp	r4, #2
 80081d8:	d05e      	beq.n	8008298 <__ieee754_atan2f+0x108>
 80081da:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80082ac <__ieee754_atan2f+0x11c>
 80081de:	2c03      	cmp	r4, #3
 80081e0:	bf08      	it	eq
 80081e2:	eef0 7a47 	vmoveq.f32	s15, s14
 80081e6:	e7e6      	b.n	80081b6 <__ieee754_atan2f+0x26>
 80081e8:	b941      	cbnz	r1, 80081fc <__ieee754_atan2f+0x6c>
 80081ea:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80082b0 <__ieee754_atan2f+0x120>
 80081ee:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80082b4 <__ieee754_atan2f+0x124>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	bfb8      	it	lt
 80081f6:	eef0 7a47 	vmovlt.f32	s15, s14
 80081fa:	e7dc      	b.n	80081b6 <__ieee754_atan2f+0x26>
 80081fc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008200:	d110      	bne.n	8008224 <__ieee754_atan2f+0x94>
 8008202:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008206:	f104 34ff 	add.w	r4, r4, #4294967295
 800820a:	d107      	bne.n	800821c <__ieee754_atan2f+0x8c>
 800820c:	2c02      	cmp	r4, #2
 800820e:	d846      	bhi.n	800829e <__ieee754_atan2f+0x10e>
 8008210:	4b29      	ldr	r3, [pc, #164]	@ (80082b8 <__ieee754_atan2f+0x128>)
 8008212:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008216:	edd3 7a00 	vldr	s15, [r3]
 800821a:	e7cc      	b.n	80081b6 <__ieee754_atan2f+0x26>
 800821c:	2c02      	cmp	r4, #2
 800821e:	d841      	bhi.n	80082a4 <__ieee754_atan2f+0x114>
 8008220:	4b26      	ldr	r3, [pc, #152]	@ (80082bc <__ieee754_atan2f+0x12c>)
 8008222:	e7f6      	b.n	8008212 <__ieee754_atan2f+0x82>
 8008224:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008228:	d0df      	beq.n	80081ea <__ieee754_atan2f+0x5a>
 800822a:	1a5b      	subs	r3, r3, r1
 800822c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8008230:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008234:	da1a      	bge.n	800826c <__ieee754_atan2f+0xdc>
 8008236:	2a00      	cmp	r2, #0
 8008238:	da01      	bge.n	800823e <__ieee754_atan2f+0xae>
 800823a:	313c      	adds	r1, #60	@ 0x3c
 800823c:	db19      	blt.n	8008272 <__ieee754_atan2f+0xe2>
 800823e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008242:	f7ff feb1 	bl	8007fa8 <fabsf>
 8008246:	f000 f843 	bl	80082d0 <atanf>
 800824a:	eef0 7a40 	vmov.f32	s15, s0
 800824e:	2c01      	cmp	r4, #1
 8008250:	d012      	beq.n	8008278 <__ieee754_atan2f+0xe8>
 8008252:	2c02      	cmp	r4, #2
 8008254:	d017      	beq.n	8008286 <__ieee754_atan2f+0xf6>
 8008256:	2c00      	cmp	r4, #0
 8008258:	d0ad      	beq.n	80081b6 <__ieee754_atan2f+0x26>
 800825a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80082c0 <__ieee754_atan2f+0x130>
 800825e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008262:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80082c4 <__ieee754_atan2f+0x134>
 8008266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800826a:	e7a4      	b.n	80081b6 <__ieee754_atan2f+0x26>
 800826c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80082b0 <__ieee754_atan2f+0x120>
 8008270:	e7ed      	b.n	800824e <__ieee754_atan2f+0xbe>
 8008272:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80082c8 <__ieee754_atan2f+0x138>
 8008276:	e7ea      	b.n	800824e <__ieee754_atan2f+0xbe>
 8008278:	ee17 3a90 	vmov	r3, s15
 800827c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	e797      	b.n	80081b6 <__ieee754_atan2f+0x26>
 8008286:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80082c0 <__ieee754_atan2f+0x130>
 800828a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800828e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80082c4 <__ieee754_atan2f+0x134>
 8008292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008296:	e78e      	b.n	80081b6 <__ieee754_atan2f+0x26>
 8008298:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80082c4 <__ieee754_atan2f+0x134>
 800829c:	e78b      	b.n	80081b6 <__ieee754_atan2f+0x26>
 800829e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80082cc <__ieee754_atan2f+0x13c>
 80082a2:	e788      	b.n	80081b6 <__ieee754_atan2f+0x26>
 80082a4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80082c8 <__ieee754_atan2f+0x138>
 80082a8:	e785      	b.n	80081b6 <__ieee754_atan2f+0x26>
 80082aa:	bf00      	nop
 80082ac:	c0490fdb 	.word	0xc0490fdb
 80082b0:	3fc90fdb 	.word	0x3fc90fdb
 80082b4:	bfc90fdb 	.word	0xbfc90fdb
 80082b8:	08009158 	.word	0x08009158
 80082bc:	0800914c 	.word	0x0800914c
 80082c0:	33bbbd2e 	.word	0x33bbbd2e
 80082c4:	40490fdb 	.word	0x40490fdb
 80082c8:	00000000 	.word	0x00000000
 80082cc:	3f490fdb 	.word	0x3f490fdb

080082d0 <atanf>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	ee10 5a10 	vmov	r5, s0
 80082d6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80082da:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80082de:	eef0 7a40 	vmov.f32	s15, s0
 80082e2:	d310      	bcc.n	8008306 <atanf+0x36>
 80082e4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80082e8:	d904      	bls.n	80082f4 <atanf+0x24>
 80082ea:	ee70 7a00 	vadd.f32	s15, s0, s0
 80082ee:	eeb0 0a67 	vmov.f32	s0, s15
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800842c <atanf+0x15c>
 80082f8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008430 <atanf+0x160>
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	bfc8      	it	gt
 8008300:	eef0 7a47 	vmovgt.f32	s15, s14
 8008304:	e7f3      	b.n	80082ee <atanf+0x1e>
 8008306:	4b4b      	ldr	r3, [pc, #300]	@ (8008434 <atanf+0x164>)
 8008308:	429c      	cmp	r4, r3
 800830a:	d810      	bhi.n	800832e <atanf+0x5e>
 800830c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8008310:	d20a      	bcs.n	8008328 <atanf+0x58>
 8008312:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008438 <atanf+0x168>
 8008316:	ee30 7a07 	vadd.f32	s14, s0, s14
 800831a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800831e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008326:	dce2      	bgt.n	80082ee <atanf+0x1e>
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	e013      	b.n	8008356 <atanf+0x86>
 800832e:	f7ff fe3b 	bl	8007fa8 <fabsf>
 8008332:	4b42      	ldr	r3, [pc, #264]	@ (800843c <atanf+0x16c>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d84f      	bhi.n	80083d8 <atanf+0x108>
 8008338:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800833c:	429c      	cmp	r4, r3
 800833e:	d841      	bhi.n	80083c4 <atanf+0xf4>
 8008340:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8008344:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008348:	eea0 7a27 	vfma.f32	s14, s0, s15
 800834c:	2300      	movs	r3, #0
 800834e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008352:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800835c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008440 <atanf+0x170>
 8008360:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8008444 <atanf+0x174>
 8008364:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8008448 <atanf+0x178>
 8008368:	ee66 6a06 	vmul.f32	s13, s12, s12
 800836c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008370:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800844c <atanf+0x17c>
 8008374:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008378:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8008450 <atanf+0x180>
 800837c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008380:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008454 <atanf+0x184>
 8008384:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008388:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008458 <atanf+0x188>
 800838c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008390:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800845c <atanf+0x18c>
 8008394:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008398:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008460 <atanf+0x190>
 800839c:	eea5 7a26 	vfma.f32	s14, s10, s13
 80083a0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8008464 <atanf+0x194>
 80083a4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80083a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008468 <atanf+0x198>
 80083ac:	eea5 7a26 	vfma.f32	s14, s10, s13
 80083b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80083b4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80083b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80083bc:	d121      	bne.n	8008402 <atanf+0x132>
 80083be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083c2:	e794      	b.n	80082ee <atanf+0x1e>
 80083c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80083c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80083cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083d0:	2301      	movs	r3, #1
 80083d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80083d6:	e7be      	b.n	8008356 <atanf+0x86>
 80083d8:	4b24      	ldr	r3, [pc, #144]	@ (800846c <atanf+0x19c>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	d80b      	bhi.n	80083f6 <atanf+0x126>
 80083de:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80083e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083e6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80083ea:	2302      	movs	r3, #2
 80083ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 80083f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f4:	e7af      	b.n	8008356 <atanf+0x86>
 80083f6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80083fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80083fe:	2303      	movs	r3, #3
 8008400:	e7a9      	b.n	8008356 <atanf+0x86>
 8008402:	4a1b      	ldr	r2, [pc, #108]	@ (8008470 <atanf+0x1a0>)
 8008404:	491b      	ldr	r1, [pc, #108]	@ (8008474 <atanf+0x1a4>)
 8008406:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800840a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800840e:	edd3 6a00 	vldr	s13, [r3]
 8008412:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008416:	2d00      	cmp	r5, #0
 8008418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800841c:	edd2 7a00 	vldr	s15, [r2]
 8008420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008424:	bfb8      	it	lt
 8008426:	eef1 7a67 	vneglt.f32	s15, s15
 800842a:	e760      	b.n	80082ee <atanf+0x1e>
 800842c:	bfc90fdb 	.word	0xbfc90fdb
 8008430:	3fc90fdb 	.word	0x3fc90fdb
 8008434:	3edfffff 	.word	0x3edfffff
 8008438:	7149f2ca 	.word	0x7149f2ca
 800843c:	3f97ffff 	.word	0x3f97ffff
 8008440:	3c8569d7 	.word	0x3c8569d7
 8008444:	3d4bda59 	.word	0x3d4bda59
 8008448:	bd6ef16b 	.word	0xbd6ef16b
 800844c:	3d886b35 	.word	0x3d886b35
 8008450:	3dba2e6e 	.word	0x3dba2e6e
 8008454:	3e124925 	.word	0x3e124925
 8008458:	3eaaaaab 	.word	0x3eaaaaab
 800845c:	bd15a221 	.word	0xbd15a221
 8008460:	bd9d8795 	.word	0xbd9d8795
 8008464:	bde38e38 	.word	0xbde38e38
 8008468:	be4ccccd 	.word	0xbe4ccccd
 800846c:	401bffff 	.word	0x401bffff
 8008470:	08009174 	.word	0x08009174
 8008474:	08009164 	.word	0x08009164

08008478 <__ieee754_sqrtf>:
 8008478:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800847c:	4770      	bx	lr
	...

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
