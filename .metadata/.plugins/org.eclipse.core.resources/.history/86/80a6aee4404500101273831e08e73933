// I2Cdev library collection - HMC5883L I2C device class header file
// Based on Honeywell HMC5883L datasheet, 10/2010 (Form #900405 Rev B)
// 6/12/2012 by Jeff Rowberg <jeff@rowberg.net>
// 6/6/2015 by Andrey Voloshin <voloshin@think.in.ua>
// 03/28/2017 by Kamnev Yuriy <kamnev.u1969@gmail.com>
//
// Changelog:
//     2017-03-28 - ported to STM32 using Keil MDK Pack
//     2015-06-06 - ported to STM32 HAL library from Arduino code
//     2012-06-12 - fixed swapped Y/Z axes
//     2011-08-22 - small Doxygen comment fixes
//     2011-07-31 - initial release

/* ============================================
I2Cdev device library code is placed under the MIT license
Copyright (c) 2011 Jeff Rowberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
===============================================
*/

#include "HMC5883L/HMC5883L.h"


static uint8_t mode = HMC5883L_MODE_SINGLE; // Tracks current mode
static const uint8_t devAddr = HMC5883L_DEFAULT_ADDRESS;

static void HMC5883L_SetGain(uint8_t gain) {
    // Write gain to CONFIG_B register (bits 7:5), bits 4:0 must be 0
    uint8_t value = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
    HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, HMC5883L_RA_CONFIG_B, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
}

static void HMC5883L_SetMode(uint8_t newMode) {
    // Write mode to MODE register (bits 1:0), bits 7:2 must be 0
    uint8_t value = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
    HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, HMC5883L_RA_MODE, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
    mode = newMode;
}


int8_t HMC5883L_testConnection() {

    uint8_t buffer[3];
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_ID_A, I2C_MEMADD_SIZE_8BIT, buffer, 3, HAL_MAX_DELAY);

    if (status == HAL_OK) {
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
    }

    return -1;

}



void HMC5883L_Initialize(void) {
    // Prepare CONFIG_A value
    uint8_t configA =
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));

    HAL_StatusTypeDef  status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, HMC5883L_RA_CONFIG_A, I2C_MEMADD_SIZE_8BIT, &configA, 1, HAL_MAX_DELAY);
    if (status != HAL_OK) {
    	return;
        // Handle the error, e.g., print debug message, retry, or set an error flag
        // Example:
        // printf("I2C write failed with status %d\n", status);
    }
    // Set gain
    HMC5883L_SetGain(HMC5883L_GAIN_1090);
    // Set mode
    HMC5883L_SetMode(HMC5883L_MODE_SINGLE);
}
